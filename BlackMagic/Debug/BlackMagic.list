
BlackMagic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101e4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0801047c  0801047c  0002047c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080104cc  080104cc  000204cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080104d4  080104d4  000204d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080104d8  080104d8  000204d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080104dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e8c  24000010  080104ec  00030010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000e9c  080104ec  00030e9c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00030854  00000000  00000000  00030081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005714  00000000  00000000  000608d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000024f8  00000000  00000000  00065ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001ced  00000000  00000000  000684e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000413d2  00000000  00000000  0006a1d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00037577  00000000  00000000  000ab5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001a11c6  00000000  00000000  000e2b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009f58  00000000  00000000  00283ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000055  00000000  00000000  0028dc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010464 	.word	0x08010464

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08010464 	.word	0x08010464

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
 80005f4:	615a      	str	r2, [r3, #20]
 80005f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f8:	4b30      	ldr	r3, [pc, #192]	; (80006bc <MX_ADC1_Init+0xe8>)
 80005fa:	4a31      	ldr	r2, [pc, #196]	; (80006c0 <MX_ADC1_Init+0xec>)
 80005fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005fe:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000604:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060a:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <MX_ADC1_Init+0xe8>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000610:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000612:	2204      	movs	r2, #4
 8000614:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000616:	4b29      	ldr	r3, [pc, #164]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000618:	2200      	movs	r2, #0
 800061a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800061c:	4b27      	ldr	r3, [pc, #156]	; (80006bc <MX_ADC1_Init+0xe8>)
 800061e:	2200      	movs	r2, #0
 8000620:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000622:	4b26      	ldr	r3, [pc, #152]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000624:	2201      	movs	r2, #1
 8000626:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <MX_ADC1_Init+0xe8>)
 800062a:	2200      	movs	r2, #0
 800062c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800062e:	4b23      	ldr	r3, [pc, #140]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000630:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000634:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800063c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 800063e:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000640:	2201      	movs	r2, #1
 8000642:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000646:	2200      	movs	r2, #0
 8000648:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000652:	2200      	movs	r2, #0
 8000654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000658:	4818      	ldr	r0, [pc, #96]	; (80006bc <MX_ADC1_Init+0xe8>)
 800065a:	f003 ff67 	bl	800452c <HAL_ADC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000664:	f001 fbb2 	bl	8001dcc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4619      	mov	r1, r3
 8000672:	4812      	ldr	r0, [pc, #72]	; (80006bc <MX_ADC1_Init+0xe8>)
 8000674:	f005 f808 	bl	8005688 <HAL_ADCEx_MultiModeConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800067e:	f001 fba5 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_ADC1_Init+0xf0>)
 8000684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000686:	2306      	movs	r3, #6
 8000688:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000692:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000694:	2304      	movs	r3, #4
 8000696:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800069c:	2300      	movs	r3, #0
 800069e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_ADC1_Init+0xe8>)
 80006a6:	f004 fb3b 	bl	8004d20 <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006b0:	f001 fb8c 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	3728      	adds	r7, #40	; 0x28
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2400002c 	.word	0x2400002c
 80006c0:	40022000 	.word	0x40022000
 80006c4:	04300002 	.word	0x04300002

080006c8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
 80006dc:	615a      	str	r2, [r3, #20]
 80006de:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_ADC2_Init+0xbc>)
 80006e2:	4a29      	ldr	r2, [pc, #164]	; (8000788 <MX_ADC2_Init+0xc0>)
 80006e4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006e6:	4b27      	ldr	r3, [pc, #156]	; (8000784 <MX_ADC2_Init+0xbc>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80006ec:	4b25      	ldr	r3, [pc, #148]	; (8000784 <MX_ADC2_Init+0xbc>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MX_ADC2_Init+0xbc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_ADC2_Init+0xbc>)
 80006fa:	2204      	movs	r2, #4
 80006fc:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_ADC2_Init+0xbc>)
 8000700:	2200      	movs	r2, #0
 8000702:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_ADC2_Init+0xbc>)
 8000706:	2200      	movs	r2, #0
 8000708:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800070a:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <MX_ADC2_Init+0xbc>)
 800070c:	2201      	movs	r2, #1
 800070e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000710:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_ADC2_Init+0xbc>)
 8000712:	2200      	movs	r2, #0
 8000714:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000716:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_ADC2_Init+0xbc>)
 8000718:	2200      	movs	r2, #0
 800071a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_ADC2_Init+0xbc>)
 800071e:	2200      	movs	r2, #0
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_ADC2_Init+0xbc>)
 8000724:	2200      	movs	r2, #0
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_ADC2_Init+0xbc>)
 800072a:	2200      	movs	r2, #0
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_ADC2_Init+0xbc>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_ADC2_Init+0xbc>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800073c:	4811      	ldr	r0, [pc, #68]	; (8000784 <MX_ADC2_Init+0xbc>)
 800073e:	f003 fef5 	bl	800452c <HAL_ADC_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000748:	f001 fb40 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_ADC2_Init+0xc4>)
 800074e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000750:	2306      	movs	r3, #6
 8000752:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <MX_ADC2_Init+0xc8>)
 800075a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800075c:	2304      	movs	r3, #4
 800075e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_ADC2_Init+0xbc>)
 800076e:	f004 fad7 	bl	8004d20 <HAL_ADC_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000778:	f001 fb28 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	3720      	adds	r7, #32
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	24000090 	.word	0x24000090
 8000788:	40022100 	.word	0x40022100
 800078c:	04300002 	.word	0x04300002
 8000790:	47ff0000 	.word	0x47ff0000

08000794 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]
 80007aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007ac:	4b28      	ldr	r3, [pc, #160]	; (8000850 <MX_ADC3_Init+0xbc>)
 80007ae:	4a29      	ldr	r2, [pc, #164]	; (8000854 <MX_ADC3_Init+0xc0>)
 80007b0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80007b2:	4b27      	ldr	r3, [pc, #156]	; (8000850 <MX_ADC3_Init+0xbc>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b8:	4b25      	ldr	r3, [pc, #148]	; (8000850 <MX_ADC3_Init+0xbc>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007be:	4b24      	ldr	r3, [pc, #144]	; (8000850 <MX_ADC3_Init+0xbc>)
 80007c0:	2204      	movs	r2, #4
 80007c2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <MX_ADC3_Init+0xbc>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007ca:	4b21      	ldr	r3, [pc, #132]	; (8000850 <MX_ADC3_Init+0xbc>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_ADC3_Init+0xbc>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007d6:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <MX_ADC3_Init+0xbc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <MX_ADC3_Init+0xbc>)
 80007de:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_ADC3_Init+0xbc>)
 80007e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_ADC3_Init+0xbc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_ADC3_Init+0xbc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_ADC3_Init+0xbc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_ADC3_Init+0xbc>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000806:	4812      	ldr	r0, [pc, #72]	; (8000850 <MX_ADC3_Init+0xbc>)
 8000808:	f003 fe90 	bl	800452c <HAL_ADC_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 8000812:	f001 fadb 	bl	8001dcc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_ADC3_Init+0xc4>)
 8000818:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081a:	2306      	movs	r3, #6
 800081c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_ADC3_Init+0xc8>)
 8000824:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000826:	2304      	movs	r3, #4
 8000828:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <MX_ADC3_Init+0xbc>)
 8000838:	f004 fa72 	bl	8004d20 <HAL_ADC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000842:	f001 fac3 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	240000f4 	.word	0x240000f4
 8000854:	58026000 	.word	0x58026000
 8000858:	04300002 	.word	0x04300002
 800085c:	47ff0000 	.word	0x47ff0000

08000860 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b092      	sub	sp, #72	; 0x48
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a8e      	ldr	r2, [pc, #568]	; (8000ab8 <HAL_ADC_MspInit+0x258>)
 800087e:	4293      	cmp	r3, r2
 8000880:	f040 80a1 	bne.w	80009c6 <HAL_ADC_MspInit+0x166>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000884:	4b8d      	ldr	r3, [pc, #564]	; (8000abc <HAL_ADC_MspInit+0x25c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	4a8c      	ldr	r2, [pc, #560]	; (8000abc <HAL_ADC_MspInit+0x25c>)
 800088c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800088e:	4b8b      	ldr	r3, [pc, #556]	; (8000abc <HAL_ADC_MspInit+0x25c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d10e      	bne.n	80008b4 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000896:	4b8a      	ldr	r3, [pc, #552]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 8000898:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800089c:	4a88      	ldr	r2, [pc, #544]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 800089e:	f043 0320 	orr.w	r3, r3, #32
 80008a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008a6:	4b86      	ldr	r3, [pc, #536]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 80008a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008ac:	f003 0320 	and.w	r3, r3, #32
 80008b0:	633b      	str	r3, [r7, #48]	; 0x30
 80008b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b4:	4b82      	ldr	r3, [pc, #520]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 80008b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ba:	4a81      	ldr	r2, [pc, #516]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c4:	4b7e      	ldr	r3, [pc, #504]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b7b      	ldr	r3, [pc, #492]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d8:	4a79      	ldr	r2, [pc, #484]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e2:	4b77      	ldr	r3, [pc, #476]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80008ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f0:	4b73      	ldr	r3, [pc, #460]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	4a72      	ldr	r2, [pc, #456]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000900:	4b6f      	ldr	r3, [pc, #444]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
 800090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA0_C     ------> ADC1_INN1
    PA1_C     ------> ADC1_INP1
    PB1     ------> ADC1_INP5
    PB0     ------> ADC1_INN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800090e:	230c      	movs	r3, #12
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000912:	2303      	movs	r3, #3
 8000914:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800091e:	4619      	mov	r1, r3
 8000920:	4868      	ldr	r0, [pc, #416]	; (8000ac4 <HAL_ADC_MspInit+0x264>)
 8000922:	f006 fec1 	bl	80076a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000926:	2303      	movs	r3, #3
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092a:	2303      	movs	r3, #3
 800092c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000936:	4619      	mov	r1, r3
 8000938:	4863      	ldr	r0, [pc, #396]	; (8000ac8 <HAL_ADC_MspInit+0x268>)
 800093a:	f006 feb5 	bl	80076a8 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800093e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000942:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000946:	f003 fc0d 	bl	8004164 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800094a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800094e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000952:	f003 fc07 	bl	8004164 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream4;
 8000956:	4b5d      	ldr	r3, [pc, #372]	; (8000acc <HAL_ADC_MspInit+0x26c>)
 8000958:	4a5d      	ldr	r2, [pc, #372]	; (8000ad0 <HAL_ADC_MspInit+0x270>)
 800095a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800095c:	4b5b      	ldr	r3, [pc, #364]	; (8000acc <HAL_ADC_MspInit+0x26c>)
 800095e:	2209      	movs	r2, #9
 8000960:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000962:	4b5a      	ldr	r3, [pc, #360]	; (8000acc <HAL_ADC_MspInit+0x26c>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000968:	4b58      	ldr	r3, [pc, #352]	; (8000acc <HAL_ADC_MspInit+0x26c>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800096e:	4b57      	ldr	r3, [pc, #348]	; (8000acc <HAL_ADC_MspInit+0x26c>)
 8000970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000974:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000976:	4b55      	ldr	r3, [pc, #340]	; (8000acc <HAL_ADC_MspInit+0x26c>)
 8000978:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800097c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800097e:	4b53      	ldr	r3, [pc, #332]	; (8000acc <HAL_ADC_MspInit+0x26c>)
 8000980:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000984:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000986:	4b51      	ldr	r3, [pc, #324]	; (8000acc <HAL_ADC_MspInit+0x26c>)
 8000988:	2200      	movs	r2, #0
 800098a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800098c:	4b4f      	ldr	r3, [pc, #316]	; (8000acc <HAL_ADC_MspInit+0x26c>)
 800098e:	2200      	movs	r2, #0
 8000990:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000992:	4b4e      	ldr	r3, [pc, #312]	; (8000acc <HAL_ADC_MspInit+0x26c>)
 8000994:	2200      	movs	r2, #0
 8000996:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000998:	484c      	ldr	r0, [pc, #304]	; (8000acc <HAL_ADC_MspInit+0x26c>)
 800099a:	f005 f9c3 	bl	8005d24 <HAL_DMA_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_ADC_MspInit+0x148>
    {
      Error_Handler();
 80009a4:	f001 fa12 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a48      	ldr	r2, [pc, #288]	; (8000acc <HAL_ADC_MspInit+0x26c>)
 80009ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80009ae:	4a47      	ldr	r2, [pc, #284]	; (8000acc <HAL_ADC_MspInit+0x26c>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	2012      	movs	r0, #18
 80009ba:	f005 f81e 	bl	80059fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009be:	2012      	movs	r0, #18
 80009c0:	f005 f835 	bl	8005a2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80009c4:	e0df      	b.n	8000b86 <HAL_ADC_MspInit+0x326>
  else if(adcHandle->Instance==ADC2)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a42      	ldr	r2, [pc, #264]	; (8000ad4 <HAL_ADC_MspInit+0x274>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	f040 8083 	bne.w	8000ad8 <HAL_ADC_MspInit+0x278>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80009d2:	4b3a      	ldr	r3, [pc, #232]	; (8000abc <HAL_ADC_MspInit+0x25c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	4a38      	ldr	r2, [pc, #224]	; (8000abc <HAL_ADC_MspInit+0x25c>)
 80009da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009dc:	4b37      	ldr	r3, [pc, #220]	; (8000abc <HAL_ADC_MspInit+0x25c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d10e      	bne.n	8000a02 <HAL_ADC_MspInit+0x1a2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009e4:	4b36      	ldr	r3, [pc, #216]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 80009e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009ea:	4a35      	ldr	r2, [pc, #212]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 80009ec:	f043 0320 	orr.w	r3, r3, #32
 80009f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80009f4:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 80009f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009fa:	f003 0320 	and.w	r3, r3, #32
 80009fe:	623b      	str	r3, [r7, #32]
 8000a00:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	4b2f      	ldr	r3, [pc, #188]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	4a2d      	ldr	r2, [pc, #180]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a12:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	61fb      	str	r3, [r7, #28]
 8000a1e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a26:	4a26      	ldr	r2, [pc, #152]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a30:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	61bb      	str	r3, [r7, #24]
 8000a3c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a44:	4a1e      	ldr	r2, [pc, #120]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 8000a46:	f043 0302 	orr.w	r3, r3, #2
 8000a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_ADC_MspInit+0x260>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a54:	f003 0302 	and.w	r3, r3, #2
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a60:	2303      	movs	r3, #3
 8000a62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4815      	ldr	r0, [pc, #84]	; (8000ac4 <HAL_ADC_MspInit+0x264>)
 8000a70:	f006 fe1a 	bl	80076a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000a74:	2303      	movs	r3, #3
 8000a76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a84:	4619      	mov	r1, r3
 8000a86:	4810      	ldr	r0, [pc, #64]	; (8000ac8 <HAL_ADC_MspInit+0x268>)
 8000a88:	f006 fe0e 	bl	80076a8 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000a8c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000a90:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000a94:	f003 fb66 	bl	8004164 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8000a98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000a9c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000aa0:	f003 fb60 	bl	8004164 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2012      	movs	r0, #18
 8000aaa:	f004 ffa6 	bl	80059fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000aae:	2012      	movs	r0, #18
 8000ab0:	f004 ffbd 	bl	8005a2e <HAL_NVIC_EnableIRQ>
}
 8000ab4:	e067      	b.n	8000b86 <HAL_ADC_MspInit+0x326>
 8000ab6:	bf00      	nop
 8000ab8:	40022000 	.word	0x40022000
 8000abc:	240001d0 	.word	0x240001d0
 8000ac0:	58024400 	.word	0x58024400
 8000ac4:	58020800 	.word	0x58020800
 8000ac8:	58020400 	.word	0x58020400
 8000acc:	24000158 	.word	0x24000158
 8000ad0:	40020070 	.word	0x40020070
 8000ad4:	40022100 	.word	0x40022100
  else if(adcHandle->Instance==ADC3)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a2c      	ldr	r2, [pc, #176]	; (8000b90 <HAL_ADC_MspInit+0x330>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d151      	bne.n	8000b86 <HAL_ADC_MspInit+0x326>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000ae2:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <HAL_ADC_MspInit+0x334>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae8:	4a2a      	ldr	r2, [pc, #168]	; (8000b94 <HAL_ADC_MspInit+0x334>)
 8000aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <HAL_ADC_MspInit+0x334>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b00:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <HAL_ADC_MspInit+0x334>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b06:	4a23      	ldr	r2, [pc, #140]	; (8000b94 <HAL_ADC_MspInit+0x334>)
 8000b08:	f043 0320 	orr.w	r3, r3, #32
 8000b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b10:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <HAL_ADC_MspInit+0x334>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b16:	f003 0320 	and.w	r3, r3, #32
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <HAL_ADC_MspInit+0x334>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	4a1b      	ldr	r2, [pc, #108]	; (8000b94 <HAL_ADC_MspInit+0x334>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_ADC_MspInit+0x334>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b34:	f003 0304 	and.w	r3, r3, #4
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b42:	2303      	movs	r3, #3
 8000b44:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4811      	ldr	r0, [pc, #68]	; (8000b98 <HAL_ADC_MspInit+0x338>)
 8000b52:	f006 fda9 	bl	80076a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b56:	2304      	movs	r3, #4
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b66:	4619      	mov	r1, r3
 8000b68:	480c      	ldr	r0, [pc, #48]	; (8000b9c <HAL_ADC_MspInit+0x33c>)
 8000b6a:	f006 fd9d 	bl	80076a8 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000b6e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000b72:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000b76:	f003 faf5 	bl	8004164 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000b7a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000b7e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000b82:	f003 faef 	bl	8004164 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000b86:	bf00      	nop
 8000b88:	3748      	adds	r7, #72	; 0x48
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	58026000 	.word	0x58026000
 8000b94:	58024400 	.word	0x58024400
 8000b98:	58021400 	.word	0x58021400
 8000b9c:	58020800 	.word	0x58020800

08000ba0 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac1_ch2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2224      	movs	r2, #36	; 0x24
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f00f fc2d 	bl	801040c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <MX_DAC1_Init+0x70>)
 8000bb4:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <MX_DAC1_Init+0x74>)
 8000bb6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000bb8:	4815      	ldr	r0, [pc, #84]	; (8000c10 <MX_DAC1_Init+0x70>)
 8000bba:	f004 ff52 	bl	8005a62 <HAL_DAC_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000bc4:	f001 f902 	bl	8001dcc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 8000bcc:	2306      	movs	r3, #6
 8000bce:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2200      	movs	r2, #0
 8000be0:	4619      	mov	r1, r3
 8000be2:	480b      	ldr	r0, [pc, #44]	; (8000c10 <MX_DAC1_Init+0x70>)
 8000be4:	f004 ff60 	bl	8005aa8 <HAL_DAC_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bee:	f001 f8ed 	bl	8001dcc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2210      	movs	r2, #16
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_DAC1_Init+0x70>)
 8000bfa:	f004 ff55 	bl	8005aa8 <HAL_DAC_ConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000c04:	f001 f8e2 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	; 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	240001d4 	.word	0x240001d4
 8000c14:	40007400 	.word	0x40007400

08000c18 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a47      	ldr	r2, [pc, #284]	; (8000d54 <HAL_DAC_MspInit+0x13c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	f040 8088 	bne.w	8000d4c <HAL_DAC_MspInit+0x134>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c3c:	4b46      	ldr	r3, [pc, #280]	; (8000d58 <HAL_DAC_MspInit+0x140>)
 8000c3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c42:	4a45      	ldr	r2, [pc, #276]	; (8000d58 <HAL_DAC_MspInit+0x140>)
 8000c44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c4c:	4b42      	ldr	r3, [pc, #264]	; (8000d58 <HAL_DAC_MspInit+0x140>)
 8000c4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b3f      	ldr	r3, [pc, #252]	; (8000d58 <HAL_DAC_MspInit+0x140>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c60:	4a3d      	ldr	r2, [pc, #244]	; (8000d58 <HAL_DAC_MspInit+0x140>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6a:	4b3b      	ldr	r3, [pc, #236]	; (8000d58 <HAL_DAC_MspInit+0x140>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000c78:	2330      	movs	r3, #48	; 0x30
 8000c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4834      	ldr	r0, [pc, #208]	; (8000d5c <HAL_DAC_MspInit+0x144>)
 8000c8c:	f006 fd0c 	bl	80076a8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream2;
 8000c90:	4b33      	ldr	r3, [pc, #204]	; (8000d60 <HAL_DAC_MspInit+0x148>)
 8000c92:	4a34      	ldr	r2, [pc, #208]	; (8000d64 <HAL_DAC_MspInit+0x14c>)
 8000c94:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c96:	4b32      	ldr	r3, [pc, #200]	; (8000d60 <HAL_DAC_MspInit+0x148>)
 8000c98:	2243      	movs	r2, #67	; 0x43
 8000c9a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c9c:	4b30      	ldr	r3, [pc, #192]	; (8000d60 <HAL_DAC_MspInit+0x148>)
 8000c9e:	2240      	movs	r2, #64	; 0x40
 8000ca0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca2:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <HAL_DAC_MspInit+0x148>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ca8:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <HAL_DAC_MspInit+0x148>)
 8000caa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cae:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cb0:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <HAL_DAC_MspInit+0x148>)
 8000cb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cb6:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cb8:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <HAL_DAC_MspInit+0x148>)
 8000cba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cbe:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <HAL_DAC_MspInit+0x148>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <HAL_DAC_MspInit+0x148>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ccc:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <HAL_DAC_MspInit+0x148>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000cd2:	4823      	ldr	r0, [pc, #140]	; (8000d60 <HAL_DAC_MspInit+0x148>)
 8000cd4:	f005 f826 	bl	8005d24 <HAL_DMA_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000cde:	f001 f875 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a1e      	ldr	r2, [pc, #120]	; (8000d60 <HAL_DAC_MspInit+0x148>)
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	4a1d      	ldr	r2, [pc, #116]	; (8000d60 <HAL_DAC_MspInit+0x148>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream3;
 8000cee:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <HAL_DAC_MspInit+0x150>)
 8000cf0:	4a1e      	ldr	r2, [pc, #120]	; (8000d6c <HAL_DAC_MspInit+0x154>)
 8000cf2:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <HAL_DAC_MspInit+0x150>)
 8000cf6:	2244      	movs	r2, #68	; 0x44
 8000cf8:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <HAL_DAC_MspInit+0x150>)
 8000cfc:	2240      	movs	r2, #64	; 0x40
 8000cfe:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <HAL_DAC_MspInit+0x150>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_DAC_MspInit+0x150>)
 8000d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d0c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <HAL_DAC_MspInit+0x150>)
 8000d10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d14:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <HAL_DAC_MspInit+0x150>)
 8000d18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d1c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_NORMAL;
 8000d1e:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_DAC_MspInit+0x150>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000d24:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_DAC_MspInit+0x150>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <HAL_DAC_MspInit+0x150>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <HAL_DAC_MspInit+0x150>)
 8000d32:	f004 fff7 	bl	8005d24 <HAL_DMA_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_DAC_MspInit+0x128>
    {
      Error_Handler();
 8000d3c:	f001 f846 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac1_ch2);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <HAL_DAC_MspInit+0x150>)
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_DAC_MspInit+0x150>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	3728      	adds	r7, #40	; 0x28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40007400 	.word	0x40007400
 8000d58:	58024400 	.word	0x58024400
 8000d5c:	58020000 	.word	0x58020000
 8000d60:	240001e8 	.word	0x240001e8
 8000d64:	40020040 	.word	0x40020040
 8000d68:	24000260 	.word	0x24000260
 8000d6c:	40020058 	.word	0x40020058

08000d70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <MX_DMA_Init+0x5c>)
 8000d78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d7c:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <MX_DMA_Init+0x5c>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_DMA_Init+0x5c>)
 8000d88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	200d      	movs	r0, #13
 8000d9a:	f004 fe2e 	bl	80059fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d9e:	200d      	movs	r0, #13
 8000da0:	f004 fe45 	bl	8005a2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	200e      	movs	r0, #14
 8000daa:	f004 fe26 	bl	80059fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000dae:	200e      	movs	r0, #14
 8000db0:	f004 fe3d 	bl	8005a2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	200f      	movs	r0, #15
 8000dba:	f004 fe1e 	bl	80059fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000dbe:	200f      	movs	r0, #15
 8000dc0:	f004 fe35 	bl	8005a2e <HAL_NVIC_EnableIRQ>

}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	58024400 	.word	0x58024400

08000dd0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
 8000de4:	615a      	str	r2, [r3, #20]
 8000de6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000de8:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <MX_FMC_Init+0x94>)
 8000dea:	4a1f      	ldr	r2, [pc, #124]	; (8000e68 <MX_FMC_Init+0x98>)
 8000dec:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <MX_FMC_Init+0x94>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <MX_FMC_Init+0x94>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_FMC_Init+0x94>)
 8000dfc:	2208      	movs	r2, #8
 8000dfe:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000e00:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_FMC_Init+0x94>)
 8000e02:	2210      	movs	r2, #16
 8000e04:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <MX_FMC_Init+0x94>)
 8000e08:	2240      	movs	r2, #64	; 0x40
 8000e0a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <MX_FMC_Init+0x94>)
 8000e0e:	2280      	movs	r2, #128	; 0x80
 8000e10:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_FMC_Init+0x94>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <MX_FMC_Init+0x94>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_FMC_Init+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_FMC_Init+0x94>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000e2e:	2310      	movs	r3, #16
 8000e30:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000e32:	2310      	movs	r3, #16
 8000e34:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000e36:	2310      	movs	r3, #16
 8000e38:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000e3a:	2310      	movs	r3, #16
 8000e3c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000e3e:	2310      	movs	r3, #16
 8000e40:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000e42:	2310      	movs	r3, #16
 8000e44:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4806      	ldr	r0, [pc, #24]	; (8000e64 <MX_FMC_Init+0x94>)
 8000e4c:	f00b fc30 	bl	800c6b0 <HAL_SDRAM_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000e56:	f000 ffb9 	bl	8001dcc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3720      	adds	r7, #32
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	240002d8 	.word	0x240002d8
 8000e68:	52004140 	.word	0x52004140

08000e6c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0b8      	sub	sp, #224	; 0xe0
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000e82:	4b5b      	ldr	r3, [pc, #364]	; (8000ff0 <HAL_FMC_MspInit+0x184>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f040 80ae 	bne.w	8000fe8 <HAL_FMC_MspInit+0x17c>
    return;
  }
  FMC_Initialized = 1;
 8000e8c:	4b58      	ldr	r3, [pc, #352]	; (8000ff0 <HAL_FMC_MspInit+0x184>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	22c0      	movs	r2, #192	; 0xc0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f00f fab6 	bl	801040c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000ea0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ea4:	f04f 0300 	mov.w	r3, #0
 8000ea8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f008 fde5 	bl	8009a84 <HAL_RCCEx_PeriphCLKConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000ec0:	f000 ff84 	bl	8001dcc <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ec4:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <HAL_FMC_MspInit+0x188>)
 8000ec6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000eca:	4a4a      	ldr	r2, [pc, #296]	; (8000ff4 <HAL_FMC_MspInit+0x188>)
 8000ecc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ed0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000ed4:	4b47      	ldr	r3, [pc, #284]	; (8000ff4 <HAL_FMC_MspInit+0x188>)
 8000ed6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000eda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PD8   ------> FMC_D13
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000ee2:	f248 1337 	movw	r3, #33079	; 0x8137
 8000ee6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000efc:	230c      	movs	r3, #12
 8000efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f02:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f06:	4619      	mov	r1, r3
 8000f08:	483b      	ldr	r0, [pc, #236]	; (8000ff8 <HAL_FMC_MspInit+0x18c>)
 8000f0a:	f006 fbcd 	bl	80076a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000f0e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000f12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f28:	230c      	movs	r3, #12
 8000f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f32:	4619      	mov	r1, r3
 8000f34:	4831      	ldr	r0, [pc, #196]	; (8000ffc <HAL_FMC_MspInit+0x190>)
 8000f36:	f006 fbb7 	bl	80076a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8000f3a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000f3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f54:	230c      	movs	r3, #12
 8000f56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f5a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4827      	ldr	r0, [pc, #156]	; (8001000 <HAL_FMC_MspInit+0x194>)
 8000f62:	f006 fba1 	bl	80076a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f66:	2301      	movs	r3, #1
 8000f68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f7e:	230c      	movs	r3, #12
 8000f80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f88:	4619      	mov	r1, r3
 8000f8a:	481e      	ldr	r0, [pc, #120]	; (8001004 <HAL_FMC_MspInit+0x198>)
 8000f8c:	f006 fb8c 	bl	80076a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f90:	230c      	movs	r3, #12
 8000f92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fa8:	230c      	movs	r3, #12
 8000faa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4814      	ldr	r0, [pc, #80]	; (8001008 <HAL_FMC_MspInit+0x19c>)
 8000fb6:	f006 fb77 	bl	80076a8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12
 8000fba:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000fbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_7
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fd4:	230c      	movs	r3, #12
 8000fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480a      	ldr	r0, [pc, #40]	; (800100c <HAL_FMC_MspInit+0x1a0>)
 8000fe2:	f006 fb61 	bl	80076a8 <HAL_GPIO_Init>
 8000fe6:	e000      	b.n	8000fea <HAL_FMC_MspInit+0x17e>
    return;
 8000fe8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000fea:	37e0      	adds	r7, #224	; 0xe0
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2400030c 	.word	0x2400030c
 8000ff4:	58024400 	.word	0x58024400
 8000ff8:	58021800 	.word	0x58021800
 8000ffc:	58020c00 	.word	0x58020c00
 8001000:	58021400 	.word	0x58021400
 8001004:	58020800 	.word	0x58020800
 8001008:	58021c00 	.word	0x58021c00
 800100c:	58021000 	.word	0x58021000

08001010 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001018:	f7ff ff28 	bl	8000e6c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <MX_GPIO_Init>:
     PA11   ------> USB_OTG_FS_DM
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b090      	sub	sp, #64	; 0x40
 8001028:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800103a:	4bb8      	ldr	r3, [pc, #736]	; (800131c <MX_GPIO_Init+0x2f8>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001040:	4ab6      	ldr	r2, [pc, #728]	; (800131c <MX_GPIO_Init+0x2f8>)
 8001042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001046:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104a:	4bb4      	ldr	r3, [pc, #720]	; (800131c <MX_GPIO_Init+0x2f8>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
 8001056:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001058:	4bb0      	ldr	r3, [pc, #704]	; (800131c <MX_GPIO_Init+0x2f8>)
 800105a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105e:	4aaf      	ldr	r2, [pc, #700]	; (800131c <MX_GPIO_Init+0x2f8>)
 8001060:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001064:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001068:	4bac      	ldr	r3, [pc, #688]	; (800131c <MX_GPIO_Init+0x2f8>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001076:	4ba9      	ldr	r3, [pc, #676]	; (800131c <MX_GPIO_Init+0x2f8>)
 8001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107c:	4aa7      	ldr	r2, [pc, #668]	; (800131c <MX_GPIO_Init+0x2f8>)
 800107e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001086:	4ba5      	ldr	r3, [pc, #660]	; (800131c <MX_GPIO_Init+0x2f8>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001090:	623b      	str	r3, [r7, #32]
 8001092:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001094:	4ba1      	ldr	r3, [pc, #644]	; (800131c <MX_GPIO_Init+0x2f8>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109a:	4aa0      	ldr	r2, [pc, #640]	; (800131c <MX_GPIO_Init+0x2f8>)
 800109c:	f043 0308 	orr.w	r3, r3, #8
 80010a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a4:	4b9d      	ldr	r3, [pc, #628]	; (800131c <MX_GPIO_Init+0x2f8>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b9a      	ldr	r3, [pc, #616]	; (800131c <MX_GPIO_Init+0x2f8>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b8:	4a98      	ldr	r2, [pc, #608]	; (800131c <MX_GPIO_Init+0x2f8>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c2:	4b96      	ldr	r3, [pc, #600]	; (800131c <MX_GPIO_Init+0x2f8>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	61bb      	str	r3, [r7, #24]
 80010ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d0:	4b92      	ldr	r3, [pc, #584]	; (800131c <MX_GPIO_Init+0x2f8>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d6:	4a91      	ldr	r2, [pc, #580]	; (800131c <MX_GPIO_Init+0x2f8>)
 80010d8:	f043 0310 	orr.w	r3, r3, #16
 80010dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e0:	4b8e      	ldr	r3, [pc, #568]	; (800131c <MX_GPIO_Init+0x2f8>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b8b      	ldr	r3, [pc, #556]	; (800131c <MX_GPIO_Init+0x2f8>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f4:	4a89      	ldr	r2, [pc, #548]	; (800131c <MX_GPIO_Init+0x2f8>)
 80010f6:	f043 0302 	orr.w	r3, r3, #2
 80010fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fe:	4b87      	ldr	r3, [pc, #540]	; (800131c <MX_GPIO_Init+0x2f8>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800110c:	4b83      	ldr	r3, [pc, #524]	; (800131c <MX_GPIO_Init+0x2f8>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001112:	4a82      	ldr	r2, [pc, #520]	; (800131c <MX_GPIO_Init+0x2f8>)
 8001114:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800111c:	4b7f      	ldr	r3, [pc, #508]	; (800131c <MX_GPIO_Init+0x2f8>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800112a:	4b7c      	ldr	r3, [pc, #496]	; (800131c <MX_GPIO_Init+0x2f8>)
 800112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001130:	4a7a      	ldr	r2, [pc, #488]	; (800131c <MX_GPIO_Init+0x2f8>)
 8001132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001136:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113a:	4b78      	ldr	r3, [pc, #480]	; (800131c <MX_GPIO_Init+0x2f8>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001148:	4b74      	ldr	r3, [pc, #464]	; (800131c <MX_GPIO_Init+0x2f8>)
 800114a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114e:	4a73      	ldr	r2, [pc, #460]	; (800131c <MX_GPIO_Init+0x2f8>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001158:	4b70      	ldr	r3, [pc, #448]	; (800131c <MX_GPIO_Init+0x2f8>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001166:	4b6d      	ldr	r3, [pc, #436]	; (800131c <MX_GPIO_Init+0x2f8>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116c:	4a6b      	ldr	r2, [pc, #428]	; (800131c <MX_GPIO_Init+0x2f8>)
 800116e:	f043 0320 	orr.w	r3, r3, #32
 8001172:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001176:	4b69      	ldr	r3, [pc, #420]	; (800131c <MX_GPIO_Init+0x2f8>)
 8001178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117c:	f003 0320 	and.w	r3, r3, #32
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001184:	2200      	movs	r2, #0
 8001186:	f24f 5190 	movw	r1, #62864	; 0xf590
 800118a:	4865      	ldr	r0, [pc, #404]	; (8001320 <MX_GPIO_Init+0x2fc>)
 800118c:	f006 fc3c 	bl	8007a08 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8001190:	2200      	movs	r2, #0
 8001192:	21fc      	movs	r1, #252	; 0xfc
 8001194:	4863      	ldr	r0, [pc, #396]	; (8001324 <MX_GPIO_Init+0x300>)
 8001196:	f006 fc37 	bl	8007a08 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_2, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_11, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f640 0108 	movw	r1, #2056	; 0x808
 80011a0:	4861      	ldr	r0, [pc, #388]	; (8001328 <MX_GPIO_Init+0x304>)
 80011a2:	f006 fc31 	bl	8007a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_15, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ac:	485f      	ldr	r0, [pc, #380]	; (800132c <MX_GPIO_Init+0x308>)
 80011ae:	f006 fc2b 	bl	8007a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2104      	movs	r1, #4
 80011b6:	485e      	ldr	r0, [pc, #376]	; (8001330 <MX_GPIO_Init+0x30c>)
 80011b8:	f006 fc26 	bl	8007a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14|BTN1_Pin|BTN2_Pin|SEGA_Pin
 80011bc:	2200      	movs	r2, #0
 80011be:	f247 01ff 	movw	r1, #28927	; 0x70ff
 80011c2:	485c      	ldr	r0, [pc, #368]	; (8001334 <MX_GPIO_Init+0x310>)
 80011c4:	f006 fc20 	bl	8007a08 <HAL_GPIO_WritePin>
                          |SEGDP_Pin|SEGG_Pin|SEGB_Pin|SEGF_Pin
                          |SEGC_Pin|SEGD_Pin|SEGE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2108      	movs	r1, #8
 80011cc:	485a      	ldr	r0, [pc, #360]	; (8001338 <MX_GPIO_Init+0x314>)
 80011ce:	f006 fc1b 	bl	8007a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI4 PI7 PI8 PI10
                           PI12 PI13 PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 80011d2:	f24f 5390 	movw	r3, #62864	; 0xf590
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e8:	4619      	mov	r1, r3
 80011ea:	484d      	ldr	r0, [pc, #308]	; (8001320 <MX_GPIO_Init+0x2fc>)
 80011ec:	f006 fa5c 	bl	80076a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3
                           PK7 PK2 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 80011f0:	23fc      	movs	r3, #252	; 0xfc
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001204:	4619      	mov	r1, r3
 8001206:	4847      	ldr	r0, [pc, #284]	; (8001324 <MX_GPIO_Init+0x300>)
 8001208:	f006 fa4e 	bl	80076a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800120c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001212:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800121c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001220:	4619      	mov	r1, r3
 8001222:	4844      	ldr	r0, [pc, #272]	; (8001334 <MX_GPIO_Init+0x310>)
 8001224:	f006 fa40 	bl	80076a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_11;
 8001228:	f640 0308 	movw	r3, #2056	; 0x808
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800123a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800123e:	4619      	mov	r1, r3
 8001240:	4839      	ldr	r0, [pc, #228]	; (8001328 <MX_GPIO_Init+0x304>)
 8001242:	f006 fa31 	bl	80076a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001258:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800125c:	4619      	mov	r1, r3
 800125e:	4833      	ldr	r0, [pc, #204]	; (800132c <MX_GPIO_Init+0x308>)
 8001260:	f006 fa22 	bl	80076a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001264:	2304      	movs	r3, #4
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001274:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001278:	4619      	mov	r1, r3
 800127a:	482d      	ldr	r0, [pc, #180]	; (8001330 <MX_GPIO_Init+0x30c>)
 800127c:	f006 fa14 	bl	80076a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ14 PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|BTN1_Pin|BTN2_Pin|SEGA_Pin
 8001280:	f247 03ff 	movw	r3, #28927	; 0x70ff
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SEGDP_Pin|SEGG_Pin|SEGB_Pin|SEGF_Pin
                          |SEGC_Pin|SEGD_Pin|SEGE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001292:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001296:	4619      	mov	r1, r3
 8001298:	4826      	ldr	r0, [pc, #152]	; (8001334 <MX_GPIO_Init+0x310>)
 800129a:	f006 fa05 	bl	80076a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_11;
 800129e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80012b0:	230a      	movs	r3, #10
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012b8:	4619      	mov	r1, r3
 80012ba:	4820      	ldr	r0, [pc, #128]	; (800133c <MX_GPIO_Init+0x318>)
 80012bc:	f006 f9f4 	bl	80076a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CDET_Pin;
 80012c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CDET_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d2:	4619      	mov	r1, r3
 80012d4:	481a      	ldr	r0, [pc, #104]	; (8001340 <MX_GPIO_Init+0x31c>)
 80012d6:	f006 f9e7 	bl	80076a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ee:	4619      	mov	r1, r3
 80012f0:	480b      	ldr	r0, [pc, #44]	; (8001320 <MX_GPIO_Init+0x2fc>)
 80012f2:	f006 f9d9 	bl	80076a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012f6:	2308      	movs	r3, #8
 80012f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800130a:	4619      	mov	r1, r3
 800130c:	480a      	ldr	r0, [pc, #40]	; (8001338 <MX_GPIO_Init+0x314>)
 800130e:	f006 f9cb 	bl	80076a8 <HAL_GPIO_Init>

}
 8001312:	bf00      	nop
 8001314:	3740      	adds	r7, #64	; 0x40
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	58024400 	.word	0x58024400
 8001320:	58022000 	.word	0x58022000
 8001324:	58022800 	.word	0x58022800
 8001328:	58020c00 	.word	0x58020c00
 800132c:	58021c00 	.word	0x58021c00
 8001330:	58021000 	.word	0x58021000
 8001334:	58022400 	.word	0x58022400
 8001338:	58021800 	.word	0x58021800
 800133c:	58020000 	.word	0x58020000
 8001340:	58020800 	.word	0x58020800

08001344 <MX_HRTIM_Init>:

HRTIM_HandleTypeDef hhrtim;

/* HRTIM init function */
void MX_HRTIM_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b0a6      	sub	sp, #152	; 0x98
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 800134a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8001358:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	2254      	movs	r2, #84	; 0x54
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f00f f84c 	bl	801040c <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2220      	movs	r2, #32
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f00f f846 	bl	801040c <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8001380:	4b71      	ldr	r3, [pc, #452]	; (8001548 <MX_HRTIM_Init+0x204>)
 8001382:	4a72      	ldr	r2, [pc, #456]	; (800154c <MX_HRTIM_Init+0x208>)
 8001384:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001386:	4b70      	ldr	r3, [pc, #448]	; (8001548 <MX_HRTIM_Init+0x204>)
 8001388:	2200      	movs	r2, #0
 800138a:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800138c:	4b6e      	ldr	r3, [pc, #440]	; (8001548 <MX_HRTIM_Init+0x204>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8001392:	486d      	ldr	r0, [pc, #436]	; (8001548 <MX_HRTIM_Init+0x204>)
 8001394:	f006 fb52 	bl	8007a3c <HAL_HRTIM_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_HRTIM_Init+0x5e>
  {
    Error_Handler();
 800139e:	f000 fd15 	bl	8001dcc <Error_Handler>
  }
  if (HAL_HRTIM_FaultPrescalerConfig(&hhrtim, HRTIM_FAULTPRESCALER_DIV1) != HAL_OK)
 80013a2:	2100      	movs	r1, #0
 80013a4:	4868      	ldr	r0, [pc, #416]	; (8001548 <MX_HRTIM_Init+0x204>)
 80013a6:	f006 fd8b 	bl	8007ec0 <HAL_HRTIM_FaultPrescalerConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_HRTIM_Init+0x70>
  {
    Error_Handler();
 80013b0:	f000 fd0c 	bl	8001dcc <Error_Handler>
  }
  pFaultCfg.Source = HRTIM_FAULTSOURCE_DIGITALINPUT;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pFaultCfg.Polarity = HRTIM_FAULTPOLARITY_HIGH;
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  pFaultCfg.Filter = HRTIM_FAULTFILTER_NONE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pFaultCfg.Lock = HRTIM_FAULTLOCK_READWRITE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_HRTIM_FaultConfig(&hhrtim, HRTIM_FAULT_3, &pFaultCfg) != HAL_OK)
 80013cc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013d0:	461a      	mov	r2, r3
 80013d2:	2104      	movs	r1, #4
 80013d4:	485c      	ldr	r0, [pc, #368]	; (8001548 <MX_HRTIM_Init+0x204>)
 80013d6:	f006 fc29 	bl	8007c2c <HAL_HRTIM_FaultConfig>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_HRTIM_Init+0xa0>
  {
    Error_Handler();
 80013e0:	f000 fcf4 	bl	8001dcc <Error_Handler>
  }
  HAL_HRTIM_FaultModeCtl(&hhrtim, HRTIM_FAULT_3, HRTIM_FAULTMODECTL_ENABLED);
 80013e4:	2201      	movs	r2, #1
 80013e6:	2104      	movs	r1, #4
 80013e8:	4857      	ldr	r0, [pc, #348]	; (8001548 <MX_HRTIM_Init+0x204>)
 80013ea:	f006 fda2 	bl	8007f32 <HAL_HRTIM_FaultModeCtl>
  pTimeBaseCfg.Period = 0xFFFD;
 80013ee:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80013f2:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80013f4:	2300      	movs	r3, #0
 80013f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 80013f8:	2305      	movs	r3, #5
 80013fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80013fe:	2308      	movs	r3, #8
 8001400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8001404:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001408:	461a      	mov	r2, r3
 800140a:	2100      	movs	r1, #0
 800140c:	484e      	ldr	r0, [pc, #312]	; (8001548 <MX_HRTIM_Init+0x204>)
 800140e:	f006 fbe5 	bl	8007bdc <HAL_HRTIM_TimeBaseConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_HRTIM_Init+0xd8>
  {
    Error_Handler();
 8001418:	f000 fcd8 	bl	8001dcc <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 800141c:	2300      	movs	r3, #0
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001420:	2300      	movs	r3, #0
 8001422:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.DMASrcAddress = 0x0000;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 8001428:	2300      	movs	r3, #0
 800142a:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASize = 0x1;
 800142c:	2301      	movs	r3, #1
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001430:	2300      	movs	r3, #0
 8001432:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001434:	2300      	movs	r3, #0
 8001436:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8001438:	2300      	movs	r3, #0
 800143a:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800143c:	2300      	movs	r3, #0
 800143e:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001440:	2300      	movs	r3, #0
 8001442:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001444:	2300      	movs	r3, #0
 8001446:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001448:	2300      	movs	r3, #0
 800144a:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800144c:	2300      	movs	r3, #0
 800144e:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001450:	2300      	movs	r3, #0
 8001452:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001454:	2300      	movs	r3, #0
 8001456:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8001458:	2300      	movs	r3, #0
 800145a:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800145c:	2300      	movs	r3, #0
 800145e:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001460:	2300      	movs	r3, #0
 8001462:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8001464:	2300      	movs	r3, #0
 8001466:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8001468:	2300      	movs	r3, #0
 800146a:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800146c:	2300      	movs	r3, #0
 800146e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8001470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001474:	461a      	mov	r2, r3
 8001476:	2100      	movs	r1, #0
 8001478:	4833      	ldr	r0, [pc, #204]	; (8001548 <MX_HRTIM_Init+0x204>)
 800147a:	f006 fdc8 	bl	800800e <HAL_HRTIM_WaveformTimerConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_HRTIM_Init+0x144>
  {
    Error_Handler();
 8001484:	f000 fca2 	bl	8001dcc <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8001488:	2300      	movs	r3, #0
 800148a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 800148c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001490:	461a      	mov	r2, r3
 8001492:	2104      	movs	r1, #4
 8001494:	482c      	ldr	r0, [pc, #176]	; (8001548 <MX_HRTIM_Init+0x204>)
 8001496:	f006 fdba 	bl	800800e <HAL_HRTIM_WaveformTimerConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_HRTIM_Init+0x160>
  {
    Error_Handler();
 80014a0:	f000 fc94 	bl	8001dcc <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2201      	movs	r2, #1
 80014c8:	2100      	movs	r1, #0
 80014ca:	481f      	ldr	r0, [pc, #124]	; (8001548 <MX_HRTIM_Init+0x204>)
 80014cc:	f006 fe11 	bl	80080f2 <HAL_HRTIM_WaveformOutputConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_HRTIM_Init+0x196>
  {
    Error_Handler();
 80014d6:	f000 fc79 	bl	8001dcc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014e0:	2104      	movs	r1, #4
 80014e2:	4819      	ldr	r0, [pc, #100]	; (8001548 <MX_HRTIM_Init+0x204>)
 80014e4:	f006 fe05 	bl	80080f2 <HAL_HRTIM_WaveformOutputConfig>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_HRTIM_Init+0x1ae>
  {
    Error_Handler();
 80014ee:	f000 fc6d 	bl	8001dcc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2202      	movs	r2, #2
 80014f6:	2100      	movs	r1, #0
 80014f8:	4813      	ldr	r0, [pc, #76]	; (8001548 <MX_HRTIM_Init+0x204>)
 80014fa:	f006 fdfa 	bl	80080f2 <HAL_HRTIM_WaveformOutputConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_HRTIM_Init+0x1c4>
  {
    Error_Handler();
 8001504:	f000 fc62 	bl	8001dcc <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE2, &pOutputCfg) != HAL_OK)
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800150e:	2104      	movs	r1, #4
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <MX_HRTIM_Init+0x204>)
 8001512:	f006 fdee 	bl	80080f2 <HAL_HRTIM_WaveformOutputConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_HRTIM_Init+0x1dc>
  {
    Error_Handler();
 800151c:	f000 fc56 	bl	8001dcc <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8001520:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001524:	461a      	mov	r2, r3
 8001526:	2104      	movs	r1, #4
 8001528:	4807      	ldr	r0, [pc, #28]	; (8001548 <MX_HRTIM_Init+0x204>)
 800152a:	f006 fb57 	bl	8007bdc <HAL_HRTIM_TimeBaseConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_HRTIM_Init+0x1f4>
  {
    Error_Handler();
 8001534:	f000 fc4a 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8001538:	4803      	ldr	r0, [pc, #12]	; (8001548 <MX_HRTIM_Init+0x204>)
 800153a:	f000 f871 	bl	8001620 <HAL_HRTIM_MspPostInit>

}
 800153e:	bf00      	nop
 8001540:	3798      	adds	r7, #152	; 0x98
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	24000310 	.word	0x24000310
 800154c:	40017400 	.word	0x40017400

08001550 <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b0ba      	sub	sp, #232	; 0xe8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	22c0      	movs	r2, #192	; 0xc0
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f00e ff4b 	bl	801040c <memset>
  if(hrtimHandle->Instance==HRTIM1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a26      	ldr	r2, [pc, #152]	; (8001614 <HAL_HRTIM_MspInit+0xc4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d145      	bne.n	800160c <HAL_HRTIM_MspInit+0xbc>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8001580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	4618      	mov	r0, r3
 8001598:	f008 fa74 	bl	8009a84 <HAL_RCCEx_PeriphCLKConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_HRTIM_MspInit+0x56>
    {
      Error_Handler();
 80015a2:	f000 fc13 	bl	8001dcc <Error_Handler>
    }

    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <HAL_HRTIM_MspInit+0xc8>)
 80015a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015ac:	4a1a      	ldr	r2, [pc, #104]	; (8001618 <HAL_HRTIM_MspInit+0xc8>)
 80015ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_HRTIM_MspInit+0xc8>)
 80015b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <HAL_HRTIM_MspInit+0xc8>)
 80015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ca:	4a13      	ldr	r2, [pc, #76]	; (8001618 <HAL_HRTIM_MspInit+0xc8>)
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d4:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_HRTIM_MspInit+0xc8>)
 80015d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM GPIO Configuration
    PD4     ------> HRTIM_FLT3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015e2:	2310      	movs	r3, #16
 80015e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 80015fa:	2302      	movs	r3, #2
 80015fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001600:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001604:	4619      	mov	r1, r3
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <HAL_HRTIM_MspInit+0xcc>)
 8001608:	f006 f84e 	bl	80076a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 800160c:	bf00      	nop
 800160e:	37e8      	adds	r7, #232	; 0xe8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40017400 	.word	0x40017400
 8001618:	58024400 	.word	0x58024400
 800161c:	58020c00 	.word	0x58020c00

08001620 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a31      	ldr	r2, [pc, #196]	; (8001704 <HAL_HRTIM_MspPostInit+0xe4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d15c      	bne.n	80016fc <HAL_HRTIM_MspPostInit+0xdc>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001642:	4b31      	ldr	r3, [pc, #196]	; (8001708 <HAL_HRTIM_MspPostInit+0xe8>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001648:	4a2f      	ldr	r2, [pc, #188]	; (8001708 <HAL_HRTIM_MspPostInit+0xe8>)
 800164a:	f043 0310 	orr.w	r3, r3, #16
 800164e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001652:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <HAL_HRTIM_MspPostInit+0xe8>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001658:	f003 0310 	and.w	r3, r3, #16
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001660:	4b29      	ldr	r3, [pc, #164]	; (8001708 <HAL_HRTIM_MspPostInit+0xe8>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001666:	4a28      	ldr	r2, [pc, #160]	; (8001708 <HAL_HRTIM_MspPostInit+0xe8>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001670:	4b25      	ldr	r3, [pc, #148]	; (8001708 <HAL_HRTIM_MspPostInit+0xe8>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800167e:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_HRTIM_MspPostInit+0xe8>)
 8001680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001684:	4a20      	ldr	r2, [pc, #128]	; (8001708 <HAL_HRTIM_MspPostInit+0xe8>)
 8001686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800168a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800168e:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <HAL_HRTIM_MspPostInit+0xe8>)
 8001690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> HRTIM_CHA2
    PC6     ------> HRTIM_CHA1
    PG7     ------> HRTIM_CHE2
    PG6     ------> HRTIM_CHE1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800169c:	2302      	movs	r3, #2
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016a8:	2302      	movs	r3, #2
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_HRTIM1;
 80016ac:	2303      	movs	r3, #3
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	4815      	ldr	r0, [pc, #84]	; (800170c <HAL_HRTIM_MspPostInit+0xec>)
 80016b8:	f005 fff6 	bl	80076a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80016bc:	23c0      	movs	r3, #192	; 0xc0
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 80016cc:	2301      	movs	r3, #1
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	480e      	ldr	r0, [pc, #56]	; (8001710 <HAL_HRTIM_MspPostInit+0xf0>)
 80016d8:	f005 ffe6 	bl	80076a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80016dc:	23c0      	movs	r3, #192	; 0xc0
 80016de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 80016ec:	2302      	movs	r3, #2
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	4807      	ldr	r0, [pc, #28]	; (8001714 <HAL_HRTIM_MspPostInit+0xf4>)
 80016f8:	f005 ffd6 	bl	80076a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40017400 	.word	0x40017400
 8001708:	58024400 	.word	0x58024400
 800170c:	58021000 	.word	0x58021000
 8001710:	58020800 	.word	0x58020800
 8001714:	58021800 	.word	0x58021800

08001718 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c3;
I2C_HandleTypeDef hi2c4;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <MX_I2C2_Init+0x74>)
 800171e:	4a1c      	ldr	r2, [pc, #112]	; (8001790 <MX_I2C2_Init+0x78>)
 8001720:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909FCE;
 8001722:	4b1a      	ldr	r3, [pc, #104]	; (800178c <MX_I2C2_Init+0x74>)
 8001724:	4a1b      	ldr	r2, [pc, #108]	; (8001794 <MX_I2C2_Init+0x7c>)
 8001726:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001728:	4b18      	ldr	r3, [pc, #96]	; (800178c <MX_I2C2_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800172e:	4b17      	ldr	r3, [pc, #92]	; (800178c <MX_I2C2_Init+0x74>)
 8001730:	2201      	movs	r2, #1
 8001732:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <MX_I2C2_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800173a:	4b14      	ldr	r3, [pc, #80]	; (800178c <MX_I2C2_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <MX_I2C2_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_I2C2_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_I2C2_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001752:	480e      	ldr	r0, [pc, #56]	; (800178c <MX_I2C2_Init+0x74>)
 8001754:	f007 f84e 	bl	80087f4 <HAL_I2C_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800175e:	f000 fb35 	bl	8001dcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001762:	2100      	movs	r1, #0
 8001764:	4809      	ldr	r0, [pc, #36]	; (800178c <MX_I2C2_Init+0x74>)
 8001766:	f007 f8d5 	bl	8008914 <HAL_I2CEx_ConfigAnalogFilter>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001770:	f000 fb2c 	bl	8001dcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001774:	2100      	movs	r1, #0
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_I2C2_Init+0x74>)
 8001778:	f007 f917 	bl	80089aa <HAL_I2CEx_ConfigDigitalFilter>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001782:	f000 fb23 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	240003ec 	.word	0x240003ec
 8001790:	40005800 	.word	0x40005800
 8001794:	00909fce 	.word	0x00909fce

08001798 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <MX_I2C3_Init+0x74>)
 800179e:	4a1c      	ldr	r2, [pc, #112]	; (8001810 <MX_I2C3_Init+0x78>)
 80017a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00909FCE;
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <MX_I2C3_Init+0x74>)
 80017a4:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <MX_I2C3_Init+0x7c>)
 80017a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <MX_I2C3_Init+0x74>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <MX_I2C3_Init+0x74>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <MX_I2C3_Init+0x74>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <MX_I2C3_Init+0x74>)
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <MX_I2C3_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_I2C3_Init+0x74>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_I2C3_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017d2:	480e      	ldr	r0, [pc, #56]	; (800180c <MX_I2C3_Init+0x74>)
 80017d4:	f007 f80e 	bl	80087f4 <HAL_I2C_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80017de:	f000 faf5 	bl	8001dcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017e2:	2100      	movs	r1, #0
 80017e4:	4809      	ldr	r0, [pc, #36]	; (800180c <MX_I2C3_Init+0x74>)
 80017e6:	f007 f895 	bl	8008914 <HAL_I2CEx_ConfigAnalogFilter>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80017f0:	f000 faec 	bl	8001dcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80017f4:	2100      	movs	r1, #0
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_I2C3_Init+0x74>)
 80017f8:	f007 f8d7 	bl	80089aa <HAL_I2CEx_ConfigDigitalFilter>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001802:	f000 fae3 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	24000440 	.word	0x24000440
 8001810:	40005c00 	.word	0x40005c00
 8001814:	00909fce 	.word	0x00909fce

08001818 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_I2C4_Init+0x74>)
 800181e:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <MX_I2C4_Init+0x78>)
 8001820:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00909FCE;
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <MX_I2C4_Init+0x74>)
 8001824:	4a1b      	ldr	r2, [pc, #108]	; (8001894 <MX_I2C4_Init+0x7c>)
 8001826:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <MX_I2C4_Init+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <MX_I2C4_Init+0x74>)
 8001830:	2201      	movs	r2, #1
 8001832:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <MX_I2C4_Init+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <MX_I2C4_Init+0x74>)
 800183c:	2200      	movs	r2, #0
 800183e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <MX_I2C4_Init+0x74>)
 8001842:	2200      	movs	r2, #0
 8001844:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_I2C4_Init+0x74>)
 8001848:	2200      	movs	r2, #0
 800184a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <MX_I2C4_Init+0x74>)
 800184e:	2200      	movs	r2, #0
 8001850:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001852:	480e      	ldr	r0, [pc, #56]	; (800188c <MX_I2C4_Init+0x74>)
 8001854:	f006 ffce 	bl	80087f4 <HAL_I2C_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800185e:	f000 fab5 	bl	8001dcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001862:	2100      	movs	r1, #0
 8001864:	4809      	ldr	r0, [pc, #36]	; (800188c <MX_I2C4_Init+0x74>)
 8001866:	f007 f855 	bl	8008914 <HAL_I2CEx_ConfigAnalogFilter>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001870:	f000 faac 	bl	8001dcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001874:	2100      	movs	r1, #0
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_I2C4_Init+0x74>)
 8001878:	f007 f897 	bl	80089aa <HAL_I2CEx_ConfigDigitalFilter>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001882:	f000 faa3 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	24000494 	.word	0x24000494
 8001890:	58001c00 	.word	0x58001c00
 8001894:	00909fce 	.word	0x00909fce

08001898 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b0c0      	sub	sp, #256	; 0x100
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b4:	22c0      	movs	r2, #192	; 0xc0
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f00e fda7 	bl	801040c <memset>
  if(i2cHandle->Instance==I2C2)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a86      	ldr	r2, [pc, #536]	; (8001adc <HAL_I2C_MspInit+0x244>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d146      	bne.n	8001956 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018c8:	f04f 0208 	mov.w	r2, #8
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018de:	4618      	mov	r0, r3
 80018e0:	f008 f8d0 	bl	8009a84 <HAL_RCCEx_PeriphCLKConfig>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80018ea:	f000 fa6f 	bl	8001dcc <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ee:	4b7c      	ldr	r3, [pc, #496]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 80018f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f4:	4a7a      	ldr	r2, [pc, #488]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 80018f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018fe:	4b78      	ldr	r3, [pc, #480]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 8001900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800190c:	2330      	movs	r3, #48	; 0x30
 800190e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001912:	2312      	movs	r3, #18
 8001914:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001918:	2301      	movs	r3, #1
 800191a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001924:	2304      	movs	r3, #4
 8001926:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800192a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800192e:	4619      	mov	r1, r3
 8001930:	486c      	ldr	r0, [pc, #432]	; (8001ae4 <HAL_I2C_MspInit+0x24c>)
 8001932:	f005 feb9 	bl	80076a8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001936:	4b6a      	ldr	r3, [pc, #424]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 8001938:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800193c:	4a68      	ldr	r2, [pc, #416]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 800193e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001942:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001946:	4b66      	ldr	r3, [pc, #408]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 8001948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800194c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001950:	623b      	str	r3, [r7, #32]
 8001952:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001954:	e0bc      	b.n	8001ad0 <HAL_I2C_MspInit+0x238>
  else if(i2cHandle->Instance==I2C3)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a63      	ldr	r2, [pc, #396]	; (8001ae8 <HAL_I2C_MspInit+0x250>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d147      	bne.n	80019f0 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001960:	f04f 0208 	mov.w	r2, #8
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001976:	4618      	mov	r0, r3
 8001978:	f008 f884 	bl	8009a84 <HAL_RCCEx_PeriphCLKConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001982:	f000 fa23 	bl	8001dcc <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001986:	4b56      	ldr	r3, [pc, #344]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 8001988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800198c:	4a54      	ldr	r2, [pc, #336]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 800198e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001996:	4b52      	ldr	r3, [pc, #328]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 8001998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 80019a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80019a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ac:	2312      	movs	r3, #18
 80019ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019be:	2304      	movs	r3, #4
 80019c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019c4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019c8:	4619      	mov	r1, r3
 80019ca:	4846      	ldr	r0, [pc, #280]	; (8001ae4 <HAL_I2C_MspInit+0x24c>)
 80019cc:	f005 fe6c 	bl	80076a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80019d0:	4b43      	ldr	r3, [pc, #268]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 80019d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019d6:	4a42      	ldr	r2, [pc, #264]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 80019d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019e0:	4b3f      	ldr	r3, [pc, #252]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 80019e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019ea:	61bb      	str	r3, [r7, #24]
 80019ec:	69bb      	ldr	r3, [r7, #24]
}
 80019ee:	e06f      	b.n	8001ad0 <HAL_I2C_MspInit+0x238>
  else if(i2cHandle->Instance==I2C4)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a3d      	ldr	r2, [pc, #244]	; (8001aec <HAL_I2C_MspInit+0x254>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d16a      	bne.n	8001ad0 <HAL_I2C_MspInit+0x238>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80019fa:	f04f 0210 	mov.w	r2, #16
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a10:	4618      	mov	r0, r3
 8001a12:	f008 f837 	bl	8009a84 <HAL_RCCEx_PeriphCLKConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8001a1c:	f000 f9d6 	bl	8001dcc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a20:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 8001a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a26:	4a2e      	ldr	r2, [pc, #184]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 8001a28:	f043 0302 	orr.w	r3, r3, #2
 8001a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a30:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a3e:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 8001a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a44:	4a26      	ldr	r2, [pc, #152]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 8001a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a4e:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 8001a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a5c:	2340      	movs	r3, #64	; 0x40
 8001a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a62:	2312      	movs	r3, #18
 8001a64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8001a74:	2306      	movs	r3, #6
 8001a76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a7e:	4619      	mov	r1, r3
 8001a80:	481b      	ldr	r0, [pc, #108]	; (8001af0 <HAL_I2C_MspInit+0x258>)
 8001a82:	f005 fe11 	bl	80076a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a8e:	2312      	movs	r3, #18
 8001a90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001aa6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <HAL_I2C_MspInit+0x24c>)
 8001aae:	f005 fdfb 	bl	80076a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 8001ab4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ab8:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 8001aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001abe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_I2C_MspInit+0x248>)
 8001ac4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40005800 	.word	0x40005800
 8001ae0:	58024400 	.word	0x58024400
 8001ae4:	58021c00 	.word	0x58021c00
 8001ae8:	40005c00 	.word	0x40005c00
 8001aec:	58001c00 	.word	0x58001c00
 8001af0:	58020400 	.word	0x58020400

08001af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001afa:	4b5a      	ldr	r3, [pc, #360]	; (8001c64 <main+0x170>)
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d11b      	bne.n	8001b3e <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b06:	f3bf 8f4f 	dsb	sy
}
 8001b0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b0c:	f3bf 8f6f 	isb	sy
}
 8001b10:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b12:	4b54      	ldr	r3, [pc, #336]	; (8001c64 <main+0x170>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b1a:	f3bf 8f4f 	dsb	sy
}
 8001b1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b20:	f3bf 8f6f 	isb	sy
}
 8001b24:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001b26:	4b4f      	ldr	r3, [pc, #316]	; (8001c64 <main+0x170>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	4a4e      	ldr	r2, [pc, #312]	; (8001c64 <main+0x170>)
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b30:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b32:	f3bf 8f4f 	dsb	sy
}
 8001b36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b38:	f3bf 8f6f 	isb	sy
}
 8001b3c:	e000      	b.n	8001b40 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b3e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001b40:	4b48      	ldr	r3, [pc, #288]	; (8001c64 <main+0x170>)
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d138      	bne.n	8001bbe <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001b4c:	4b45      	ldr	r3, [pc, #276]	; (8001c64 <main+0x170>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001b54:	f3bf 8f4f 	dsb	sy
}
 8001b58:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001b5a:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <main+0x170>)
 8001b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b60:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	0b5b      	lsrs	r3, r3, #13
 8001b66:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b6a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	08db      	lsrs	r3, r3, #3
 8001b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b74:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	015a      	lsls	r2, r3, #5
 8001b7a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001b7e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001b84:	4937      	ldr	r1, [pc, #220]	; (8001c64 <main+0x170>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	1e5a      	subs	r2, r3, #1
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ef      	bne.n	8001b76 <main+0x82>
    } while(sets-- != 0U);
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	1e5a      	subs	r2, r3, #1
 8001b9a:	60ba      	str	r2, [r7, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1e5      	bne.n	8001b6c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001ba6:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <main+0x170>)
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	4a2e      	ldr	r2, [pc, #184]	; (8001c64 <main+0x170>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb2:	f3bf 8f4f 	dsb	sy
}
 8001bb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bb8:	f3bf 8f6f 	isb	sy
}
 8001bbc:	e000      	b.n	8001bc0 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001bbe:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bc0:	f002 fa0e 	bl	8003fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bc4:	f000 f850 	bl	8001c68 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001bc8:	f000 f8d0 	bl	8001d6c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bcc:	f7ff fa2a 	bl	8001024 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bd0:	f7ff f8ce 	bl	8000d70 <MX_DMA_Init>
  MX_ADC1_Init();
 8001bd4:	f7fe fcfe 	bl	80005d4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001bd8:	f7fe fd76 	bl	80006c8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001bdc:	f7fe fdda 	bl	8000794 <MX_ADC3_Init>
  MX_DAC1_Init();
 8001be0:	f7fe ffde 	bl	8000ba0 <MX_DAC1_Init>
  MX_FMC_Init();
 8001be4:	f7ff f8f4 	bl	8000dd0 <MX_FMC_Init>
  MX_HRTIM_Init();
 8001be8:	f7ff fbac 	bl	8001344 <MX_HRTIM_Init>
  MX_I2C2_Init();
 8001bec:	f7ff fd94 	bl	8001718 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001bf0:	f7ff fdd2 	bl	8001798 <MX_I2C3_Init>
  MX_I2C4_Init();
 8001bf4:	f7ff fe10 	bl	8001818 <MX_I2C4_Init>
  MX_LPUART1_UART_Init();
 8001bf8:	f001 fd0e 	bl	8003618 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 8001bfc:	f001 fd5a 	bl	80036b4 <MX_UART4_Init>
  MX_UART7_Init();
 8001c00:	f001 fda4 	bl	800374c <MX_UART7_Init>
  MX_UART8_Init();
 8001c04:	f001 fdee 	bl	80037e4 <MX_UART8_Init>
  MX_USART1_Init();
 8001c08:	f001 fe38 	bl	800387c <MX_USART1_Init>
  MX_USART2_UART_Init();
 8001c0c:	f001 fe82 	bl	8003914 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001c10:	f000 f8e2 	bl	8001dd8 <MX_RTC_Init>
  MX_SPI1_Init();
 8001c14:	f000 f93a 	bl	8001e8c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001c18:	f000 f98e 	bl	8001f38 <MX_SPI2_Init>
  MX_SPI5_Init();
 8001c1c:	f000 f9e2 	bl	8001fe4 <MX_SPI5_Init>
  MX_SPI6_Init();
 8001c20:	f000 fa36 	bl	8002090 <MX_SPI6_Init>
  MX_TIM1_Init();
 8001c24:	f000 fd84 	bl	8002730 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c28:	f000 fdd6 	bl	80027d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c2c:	f000 fe5c 	bl	80028e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c30:	f000 feb4 	bl	800299c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001c34:	f000 ff2a 	bl	8002a8c <MX_TIM5_Init>
  MX_TIM6_Init();
 8001c38:	f000 ff7e 	bl	8002b38 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001c3c:	f000 ffb2 	bl	8002ba4 <MX_TIM7_Init>
  MX_TIM8_Init();
 8001c40:	f000 ffe6 	bl	8002c10 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001c44:	f001 f83e 	bl	8002cc4 <MX_TIM12_Init>
  MX_TIM13_Init();
 8001c48:	f001 f8be 	bl	8002dc8 <MX_TIM13_Init>
  MX_TIM14_Init();
 8001c4c:	f001 f8e0 	bl	8002e10 <MX_TIM14_Init>
  MX_TIM15_Init();
 8001c50:	f001 f92c 	bl	8002eac <MX_TIM15_Init>
  MX_TIM16_Init();
 8001c54:	f001 f982 	bl	8002f5c <MX_TIM16_Init>
  MX_TIM17_Init();
 8001c58:	f001 f9a6 	bl	8002fa8 <MX_TIM17_Init>
  MX_USB_OTG_FS_USB_Init();
 8001c5c:	f002 f98e 	bl	8003f7c <MX_USB_OTG_FS_USB_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <main+0x16c>
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b09c      	sub	sp, #112	; 0x70
 8001c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c72:	224c      	movs	r2, #76	; 0x4c
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f00e fbc8 	bl	801040c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	2220      	movs	r2, #32
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f00e fbc2 	bl	801040c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001c88:	2002      	movs	r0, #2
 8001c8a:	f006 fedb 	bl	8008a44 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	4b34      	ldr	r3, [pc, #208]	; (8001d64 <SystemClock_Config+0xfc>)
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	4a33      	ldr	r2, [pc, #204]	; (8001d64 <SystemClock_Config+0xfc>)
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001c9e:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <SystemClock_Config+0xfc>)
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <SystemClock_Config+0x100>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cb0:	4a2d      	ldr	r2, [pc, #180]	; (8001d68 <SystemClock_Config+0x100>)
 8001cb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb6:	6193      	str	r3, [r2, #24]
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <SystemClock_Config+0x100>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001cc4:	bf00      	nop
 8001cc6:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <SystemClock_Config+0x100>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cd2:	d1f8      	bne.n	8001cc6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8001cd4:	2329      	movs	r3, #41	; 0x29
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cea:	2302      	movs	r3, #2
 8001cec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001cf2:	2309      	movs	r3, #9
 8001cf4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001d02:	230c      	movs	r3, #12
 8001d04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001d06:	2302      	movs	r3, #2
 8001d08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8001d0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d14:	4618      	mov	r0, r3
 8001d16:	f006 fecf 	bl	8008ab8 <HAL_RCC_OscConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001d20:	f000 f854 	bl	8001dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d24:	233f      	movs	r3, #63	; 0x3f
 8001d26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001d34:	2340      	movs	r3, #64	; 0x40
 8001d36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001d38:	2340      	movs	r3, #64	; 0x40
 8001d3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001d42:	2340      	movs	r3, #64	; 0x40
 8001d44:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2101      	movs	r1, #1
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f007 fb0e 	bl	800936c <HAL_RCC_ClockConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001d56:	f000 f839 	bl	8001dcc <Error_Handler>
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3770      	adds	r7, #112	; 0x70
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	58000400 	.word	0x58000400
 8001d68:	58024800 	.word	0x58024800

08001d6c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b0b0      	sub	sp, #192	; 0xc0
 8001d70:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d72:	463b      	mov	r3, r7
 8001d74:	22c0      	movs	r2, #192	; 0xc0
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f00e fb47 	bl	801040c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001d8e:	2309      	movs	r3, #9
 8001d90:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001d92:	2304      	movs	r3, #4
 8001d94:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001d96:	2302      	movs	r3, #2
 8001d98:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001d9e:	23c0      	movs	r3, #192	; 0xc0
 8001da0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001da2:	2320      	movs	r3, #32
 8001da4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001da6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001db2:	463b      	mov	r3, r7
 8001db4:	4618      	mov	r0, r3
 8001db6:	f007 fe65 	bl	8009a84 <HAL_RCCEx_PeriphCLKConfig>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001dc0:	f000 f804 	bl	8001dcc <Error_Handler>
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	37c0      	adds	r7, #192	; 0xc0
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd0:	b672      	cpsid	i
}
 8001dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <Error_Handler+0x8>
	...

08001dd8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <MX_RTC_Init+0x48>)
 8001dde:	4a11      	ldr	r2, [pc, #68]	; (8001e24 <MX_RTC_Init+0x4c>)
 8001de0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <MX_RTC_Init+0x48>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001de8:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <MX_RTC_Init+0x48>)
 8001dea:	227f      	movs	r2, #127	; 0x7f
 8001dec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <MX_RTC_Init+0x48>)
 8001df0:	22ff      	movs	r2, #255	; 0xff
 8001df2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <MX_RTC_Init+0x48>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <MX_RTC_Init+0x48>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <MX_RTC_Init+0x48>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <MX_RTC_Init+0x48>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e0c:	4804      	ldr	r0, [pc, #16]	; (8001e20 <MX_RTC_Init+0x48>)
 8001e0e:	f00a fb37 	bl	800c480 <HAL_RTC_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001e18:	f7ff ffd8 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	240004e8 	.word	0x240004e8
 8001e24:	58004000 	.word	0x58004000

08001e28 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b0b2      	sub	sp, #200	; 0xc8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e30:	f107 0308 	add.w	r3, r7, #8
 8001e34:	22c0      	movs	r2, #192	; 0xc0
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f00e fae7 	bl	801040c <memset>
  if(rtcHandle->Instance==RTC)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <HAL_RTC_MspInit+0x5c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d119      	bne.n	8001e7c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e48:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e5c:	f107 0308 	add.w	r3, r7, #8
 8001e60:	4618      	mov	r0, r3
 8001e62:	f007 fe0f 	bl	8009a84 <HAL_RCCEx_PeriphCLKConfig>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001e6c:	f7ff ffae 	bl	8001dcc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_RTC_MspInit+0x60>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <HAL_RTC_MspInit+0x60>)
 8001e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e7a:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	37c8      	adds	r7, #200	; 0xc8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	58004000 	.word	0x58004000
 8001e88:	58024400 	.word	0x58024400

08001e8c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi5;
SPI_HandleTypeDef hspi6;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e90:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001e92:	4a28      	ldr	r2, [pc, #160]	; (8001f34 <MX_SPI1_Init+0xa8>)
 8001e94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001e98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ea4:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eaa:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eb0:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001eb8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ebc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001ec0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ec4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ecc:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001ee0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ee4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001eec:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ef8:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f04:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f10:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f1c:	4804      	ldr	r0, [pc, #16]	; (8001f30 <MX_SPI1_Init+0xa4>)
 8001f1e:	f00a fc03 	bl	800c728 <HAL_SPI_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001f28:	f7ff ff50 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	2400050c 	.word	0x2400050c
 8001f34:	40013000 	.word	0x40013000

08001f38 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001f3e:	4a28      	ldr	r2, [pc, #160]	; (8001fe0 <MX_SPI2_Init+0xa8>)
 8001f40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f42:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001f44:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f4a:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001f50:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001f52:	2203      	movs	r2, #3
 8001f54:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f56:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001f62:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001f64:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f68:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001f6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f70:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f7e:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001f84:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001f8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f90:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f98:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001faa:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fc8:	4804      	ldr	r0, [pc, #16]	; (8001fdc <MX_SPI2_Init+0xa4>)
 8001fca:	f00a fbad 	bl	800c728 <HAL_SPI_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001fd4:	f7ff fefa 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	24000594 	.word	0x24000594
 8001fe0:	40003800 	.word	0x40003800

08001fe4 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001fe8:	4b27      	ldr	r3, [pc, #156]	; (8002088 <MX_SPI5_Init+0xa4>)
 8001fea:	4a28      	ldr	r2, [pc, #160]	; (800208c <MX_SPI5_Init+0xa8>)
 8001fec:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001fee:	4b26      	ldr	r3, [pc, #152]	; (8002088 <MX_SPI5_Init+0xa4>)
 8001ff0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ff4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <MX_SPI5_Init+0xa4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ffc:	4b22      	ldr	r3, [pc, #136]	; (8002088 <MX_SPI5_Init+0xa4>)
 8001ffe:	2203      	movs	r2, #3
 8002000:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <MX_SPI5_Init+0xa4>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002008:	4b1f      	ldr	r3, [pc, #124]	; (8002088 <MX_SPI5_Init+0xa4>)
 800200a:	2200      	movs	r2, #0
 800200c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800200e:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <MX_SPI5_Init+0xa4>)
 8002010:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002014:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002016:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <MX_SPI5_Init+0xa4>)
 8002018:	2200      	movs	r2, #0
 800201a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800201c:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <MX_SPI5_Init+0xa4>)
 800201e:	2200      	movs	r2, #0
 8002020:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002022:	4b19      	ldr	r3, [pc, #100]	; (8002088 <MX_SPI5_Init+0xa4>)
 8002024:	2200      	movs	r2, #0
 8002026:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002028:	4b17      	ldr	r3, [pc, #92]	; (8002088 <MX_SPI5_Init+0xa4>)
 800202a:	2200      	movs	r2, #0
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800202e:	4b16      	ldr	r3, [pc, #88]	; (8002088 <MX_SPI5_Init+0xa4>)
 8002030:	2200      	movs	r2, #0
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002034:	4b14      	ldr	r3, [pc, #80]	; (8002088 <MX_SPI5_Init+0xa4>)
 8002036:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800203a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <MX_SPI5_Init+0xa4>)
 800203e:	2200      	movs	r2, #0
 8002040:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <MX_SPI5_Init+0xa4>)
 8002044:	2200      	movs	r2, #0
 8002046:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <MX_SPI5_Init+0xa4>)
 800204a:	2200      	movs	r2, #0
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <MX_SPI5_Init+0xa4>)
 8002050:	2200      	movs	r2, #0
 8002052:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <MX_SPI5_Init+0xa4>)
 8002056:	2200      	movs	r2, #0
 8002058:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <MX_SPI5_Init+0xa4>)
 800205c:	2200      	movs	r2, #0
 800205e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <MX_SPI5_Init+0xa4>)
 8002062:	2200      	movs	r2, #0
 8002064:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <MX_SPI5_Init+0xa4>)
 8002068:	2200      	movs	r2, #0
 800206a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <MX_SPI5_Init+0xa4>)
 800206e:	2200      	movs	r2, #0
 8002070:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002072:	4805      	ldr	r0, [pc, #20]	; (8002088 <MX_SPI5_Init+0xa4>)
 8002074:	f00a fb58 	bl	800c728 <HAL_SPI_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_SPI5_Init+0x9e>
  {
    Error_Handler();
 800207e:	f7ff fea5 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2400061c 	.word	0x2400061c
 800208c:	40015000 	.word	0x40015000

08002090 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 8002094:	4b27      	ldr	r3, [pc, #156]	; (8002134 <MX_SPI6_Init+0xa4>)
 8002096:	4a28      	ldr	r2, [pc, #160]	; (8002138 <MX_SPI6_Init+0xa8>)
 8002098:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800209a:	4b26      	ldr	r3, [pc, #152]	; (8002134 <MX_SPI6_Init+0xa4>)
 800209c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020a0:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 80020a2:	4b24      	ldr	r3, [pc, #144]	; (8002134 <MX_SPI6_Init+0xa4>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_4BIT;
 80020a8:	4b22      	ldr	r3, [pc, #136]	; (8002134 <MX_SPI6_Init+0xa4>)
 80020aa:	2203      	movs	r2, #3
 80020ac:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ae:	4b21      	ldr	r3, [pc, #132]	; (8002134 <MX_SPI6_Init+0xa4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020b4:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <MX_SPI6_Init+0xa4>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <MX_SPI6_Init+0xa4>)
 80020bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020c0:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <MX_SPI6_Init+0xa4>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020c8:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <MX_SPI6_Init+0xa4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <MX_SPI6_Init+0xa4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d4:	4b17      	ldr	r3, [pc, #92]	; (8002134 <MX_SPI6_Init+0xa4>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <MX_SPI6_Init+0xa4>)
 80020dc:	2200      	movs	r2, #0
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020e0:	4b14      	ldr	r3, [pc, #80]	; (8002134 <MX_SPI6_Init+0xa4>)
 80020e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020e6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <MX_SPI6_Init+0xa4>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <MX_SPI6_Init+0xa4>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <MX_SPI6_Init+0xa4>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <MX_SPI6_Init+0xa4>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <MX_SPI6_Init+0xa4>)
 8002102:	2200      	movs	r2, #0
 8002104:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <MX_SPI6_Init+0xa4>)
 8002108:	2200      	movs	r2, #0
 800210a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <MX_SPI6_Init+0xa4>)
 800210e:	2200      	movs	r2, #0
 8002110:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002112:	4b08      	ldr	r3, [pc, #32]	; (8002134 <MX_SPI6_Init+0xa4>)
 8002114:	2200      	movs	r2, #0
 8002116:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <MX_SPI6_Init+0xa4>)
 800211a:	2200      	movs	r2, #0
 800211c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 800211e:	4805      	ldr	r0, [pc, #20]	; (8002134 <MX_SPI6_Init+0xa4>)
 8002120:	f00a fb02 	bl	800c728 <HAL_SPI_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 800212a:	f7ff fe4f 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	240006a4 	.word	0x240006a4
 8002138:	58001400 	.word	0x58001400

0800213c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b0c4      	sub	sp, #272	; 0x110
 8002140:	af00      	add	r7, sp, #0
 8002142:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002146:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800214a:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800215c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002160:	22c0      	movs	r2, #192	; 0xc0
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f00e f951 	bl	801040c <memset>
  if(spiHandle->Instance==SPI1)
 800216a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800216e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4aad      	ldr	r2, [pc, #692]	; (800242c <HAL_SPI_MspInit+0x2f0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d16b      	bne.n	8002254 <HAL_SPI_MspInit+0x118>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800217c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002188:	2300      	movs	r3, #0
 800218a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800218e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002192:	4618      	mov	r0, r3
 8002194:	f007 fc76 	bl	8009a84 <HAL_RCCEx_PeriphCLKConfig>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_SPI_MspInit+0x66>
    {
      Error_Handler();
 800219e:	f7ff fe15 	bl	8001dcc <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021a2:	4ba3      	ldr	r3, [pc, #652]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 80021a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021a8:	4aa1      	ldr	r2, [pc, #644]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 80021aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021b2:	4b9f      	ldr	r3, [pc, #636]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 80021b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021bc:	637b      	str	r3, [r7, #52]	; 0x34
 80021be:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021c0:	4b9b      	ldr	r3, [pc, #620]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 80021c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c6:	4a9a      	ldr	r2, [pc, #616]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 80021c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021d0:	4b97      	ldr	r3, [pc, #604]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 80021d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021da:	633b      	str	r3, [r7, #48]	; 0x30
 80021dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021de:	4b94      	ldr	r3, [pc, #592]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 80021e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e4:	4a92      	ldr	r2, [pc, #584]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 80021e6:	f043 0308 	orr.w	r3, r3, #8
 80021ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ee:	4b90      	ldr	r3, [pc, #576]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 80021f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    PG10     ------> SPI1_NSS
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_11;
 80021fc:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8002200:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	2300      	movs	r3, #0
 8002212:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002216:	2305      	movs	r3, #5
 8002218:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800221c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002220:	4619      	mov	r1, r3
 8002222:	4884      	ldr	r0, [pc, #528]	; (8002434 <HAL_SPI_MspInit+0x2f8>)
 8002224:	f005 fa40 	bl	80076a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222e:	2302      	movs	r3, #2
 8002230:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002240:	2305      	movs	r3, #5
 8002242:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002246:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800224a:	4619      	mov	r1, r3
 800224c:	487a      	ldr	r0, [pc, #488]	; (8002438 <HAL_SPI_MspInit+0x2fc>)
 800224e:	f005 fa2b 	bl	80076a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8002252:	e15f      	b.n	8002514 <HAL_SPI_MspInit+0x3d8>
  else if(spiHandle->Instance==SPI2)
 8002254:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002258:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a76      	ldr	r2, [pc, #472]	; (800243c <HAL_SPI_MspInit+0x300>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d146      	bne.n	80022f4 <HAL_SPI_MspInit+0x1b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002266:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002278:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800227c:	4618      	mov	r0, r3
 800227e:	f007 fc01 	bl	8009a84 <HAL_RCCEx_PeriphCLKConfig>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_SPI_MspInit+0x150>
      Error_Handler();
 8002288:	f7ff fda0 	bl	8001dcc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800228c:	4b68      	ldr	r3, [pc, #416]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 800228e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002292:	4a67      	ldr	r2, [pc, #412]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 8002294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002298:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800229c:	4b64      	ldr	r3, [pc, #400]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 800229e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80022a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80022aa:	4b61      	ldr	r3, [pc, #388]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 80022ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b0:	4a5f      	ldr	r2, [pc, #380]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 80022b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ba:	4b5d      	ldr	r3, [pc, #372]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 80022bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80022c8:	230f      	movs	r3, #15
 80022ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022e0:	2305      	movs	r3, #5
 80022e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022e6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80022ea:	4619      	mov	r1, r3
 80022ec:	4854      	ldr	r0, [pc, #336]	; (8002440 <HAL_SPI_MspInit+0x304>)
 80022ee:	f005 f9db 	bl	80076a8 <HAL_GPIO_Init>
}
 80022f2:	e10f      	b.n	8002514 <HAL_SPI_MspInit+0x3d8>
  else if(spiHandle->Instance==SPI5)
 80022f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a50      	ldr	r2, [pc, #320]	; (8002444 <HAL_SPI_MspInit+0x308>)
 8002302:	4293      	cmp	r3, r2
 8002304:	f040 80a6 	bne.w	8002454 <HAL_SPI_MspInit+0x318>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8002308:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800231a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800231e:	4618      	mov	r0, r3
 8002320:	f007 fbb0 	bl	8009a84 <HAL_RCCEx_PeriphCLKConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_SPI_MspInit+0x1f2>
      Error_Handler();
 800232a:	f7ff fd4f 	bl	8001dcc <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800232e:	4b40      	ldr	r3, [pc, #256]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 8002330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002334:	4a3e      	ldr	r2, [pc, #248]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 8002336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800233a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800233e:	4b3c      	ldr	r3, [pc, #240]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 8002340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002348:	623b      	str	r3, [r7, #32]
 800234a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800234c:	4b38      	ldr	r3, [pc, #224]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 800234e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002352:	4a37      	ldr	r2, [pc, #220]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 8002354:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002358:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800235c:	4b34      	ldr	r3, [pc, #208]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 800235e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002366:	61fb      	str	r3, [r7, #28]
 8002368:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800236a:	4b31      	ldr	r3, [pc, #196]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 800236c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002370:	4a2f      	ldr	r2, [pc, #188]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 8002372:	f043 0320 	orr.w	r3, r3, #32
 8002376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800237a:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 800237c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	61bb      	str	r3, [r7, #24]
 8002386:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002388:	4b29      	ldr	r3, [pc, #164]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 800238a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800238e:	4a28      	ldr	r2, [pc, #160]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 8002390:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002394:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002398:	4b25      	ldr	r3, [pc, #148]	; (8002430 <HAL_SPI_MspInit+0x2f4>)
 800239a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800239e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023a6:	2301      	movs	r3, #1
 80023a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ac:	2302      	movs	r3, #2
 80023ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80023be:	2305      	movs	r3, #5
 80023c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80023c4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80023c8:	4619      	mov	r1, r3
 80023ca:	481f      	ldr	r0, [pc, #124]	; (8002448 <HAL_SPI_MspInit+0x30c>)
 80023cc:	f005 f96c 	bl	80076a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80023ea:	2305      	movs	r3, #5
 80023ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023f0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80023f4:	4619      	mov	r1, r3
 80023f6:	4815      	ldr	r0, [pc, #84]	; (800244c <HAL_SPI_MspInit+0x310>)
 80023f8:	f005 f956 	bl	80076a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002400:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002404:	2302      	movs	r3, #2
 8002406:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2300      	movs	r3, #0
 8002412:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002416:	2305      	movs	r3, #5
 8002418:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800241c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002420:	4619      	mov	r1, r3
 8002422:	480b      	ldr	r0, [pc, #44]	; (8002450 <HAL_SPI_MspInit+0x314>)
 8002424:	f005 f940 	bl	80076a8 <HAL_GPIO_Init>
}
 8002428:	e074      	b.n	8002514 <HAL_SPI_MspInit+0x3d8>
 800242a:	bf00      	nop
 800242c:	40013000 	.word	0x40013000
 8002430:	58024400 	.word	0x58024400
 8002434:	58021800 	.word	0x58021800
 8002438:	58020c00 	.word	0x58020c00
 800243c:	40003800 	.word	0x40003800
 8002440:	58022000 	.word	0x58022000
 8002444:	40015000 	.word	0x40015000
 8002448:	58022800 	.word	0x58022800
 800244c:	58021400 	.word	0x58021400
 8002450:	58022400 	.word	0x58022400
  else if(spiHandle->Instance==SPI6)
 8002454:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002458:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a2f      	ldr	r2, [pc, #188]	; (8002520 <HAL_SPI_MspInit+0x3e4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d156      	bne.n	8002514 <HAL_SPI_MspInit+0x3d8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8002466:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8002472:	2300      	movs	r3, #0
 8002474:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002478:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800247c:	4618      	mov	r0, r3
 800247e:	f007 fb01 	bl	8009a84 <HAL_RCCEx_PeriphCLKConfig>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_SPI_MspInit+0x350>
      Error_Handler();
 8002488:	f7ff fca0 	bl	8001dcc <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 800248c:	4b25      	ldr	r3, [pc, #148]	; (8002524 <HAL_SPI_MspInit+0x3e8>)
 800248e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002492:	4a24      	ldr	r2, [pc, #144]	; (8002524 <HAL_SPI_MspInit+0x3e8>)
 8002494:	f043 0320 	orr.w	r3, r3, #32
 8002498:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800249c:	4b21      	ldr	r3, [pc, #132]	; (8002524 <HAL_SPI_MspInit+0x3e8>)
 800249e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024a2:	f003 0220 	and.w	r2, r3, #32
 80024a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024aa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80024b8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024ba:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <HAL_SPI_MspInit+0x3e8>)
 80024bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c0:	4a18      	ldr	r2, [pc, #96]	; (8002524 <HAL_SPI_MspInit+0x3e8>)
 80024c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <HAL_SPI_MspInit+0x3e8>)
 80024cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d0:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80024d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80024e6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13;
 80024e8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80024ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8002502:	2305      	movs	r3, #5
 8002504:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002508:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800250c:	4619      	mov	r1, r3
 800250e:	4806      	ldr	r0, [pc, #24]	; (8002528 <HAL_SPI_MspInit+0x3ec>)
 8002510:	f005 f8ca 	bl	80076a8 <HAL_GPIO_Init>
}
 8002514:	bf00      	nop
 8002516:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	58001400 	.word	0x58001400
 8002524:	58024400 	.word	0x58024400
 8002528:	58021800 	.word	0x58021800

0800252c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_MspInit+0x30>)
 8002534:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002538:	4a08      	ldr	r2, [pc, #32]	; (800255c <HAL_MspInit+0x30>)
 800253a:	f043 0302 	orr.w	r3, r3, #2
 800253e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_MspInit+0x30>)
 8002544:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	58024400 	.word	0x58024400

08002560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002564:	e7fe      	b.n	8002564 <NMI_Handler+0x4>

08002566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <HardFault_Handler+0x4>

0800256c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <MemManage_Handler+0x4>

08002572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002576:	e7fe      	b.n	8002576 <BusFault_Handler+0x4>

08002578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800257c:	e7fe      	b.n	800257c <UsageFault_Handler+0x4>

0800257e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ac:	f001 fd8a 	bl	80040c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <DMA1_Stream2_IRQHandler+0x10>)
 80025ba:	f003 ff0f 	bl	80063dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	240001e8 	.word	0x240001e8

080025c8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <DMA1_Stream3_IRQHandler+0x10>)
 80025ce:	f003 ff05 	bl	80063dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	24000260 	.word	0x24000260

080025dc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <DMA1_Stream4_IRQHandler+0x10>)
 80025e2:	f003 fefb 	bl	80063dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	24000158 	.word	0x24000158

080025f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025f4:	4803      	ldr	r0, [pc, #12]	; (8002604 <ADC_IRQHandler+0x14>)
 80025f6:	f002 f93b 	bl	8004870 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80025fa:	4803      	ldr	r0, [pc, #12]	; (8002608 <ADC_IRQHandler+0x18>)
 80025fc:	f002 f938 	bl	8004870 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}
 8002604:	2400002c 	.word	0x2400002c
 8002608:	24000090 	.word	0x24000090

0800260c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <TIM1_UP_IRQHandler+0x10>)
 8002612:	f00a fb73 	bl	800ccfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	2400072c 	.word	0x2400072c

08002620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002624:	4b37      	ldr	r3, [pc, #220]	; (8002704 <SystemInit+0xe4>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262a:	4a36      	ldr	r2, [pc, #216]	; (8002704 <SystemInit+0xe4>)
 800262c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002634:	4b34      	ldr	r3, [pc, #208]	; (8002708 <SystemInit+0xe8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	2b06      	cmp	r3, #6
 800263e:	d807      	bhi.n	8002650 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002640:	4b31      	ldr	r3, [pc, #196]	; (8002708 <SystemInit+0xe8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 030f 	bic.w	r3, r3, #15
 8002648:	4a2f      	ldr	r2, [pc, #188]	; (8002708 <SystemInit+0xe8>)
 800264a:	f043 0307 	orr.w	r3, r3, #7
 800264e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002650:	4b2e      	ldr	r3, [pc, #184]	; (800270c <SystemInit+0xec>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a2d      	ldr	r2, [pc, #180]	; (800270c <SystemInit+0xec>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800265c:	4b2b      	ldr	r3, [pc, #172]	; (800270c <SystemInit+0xec>)
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002662:	4b2a      	ldr	r3, [pc, #168]	; (800270c <SystemInit+0xec>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	4929      	ldr	r1, [pc, #164]	; (800270c <SystemInit+0xec>)
 8002668:	4b29      	ldr	r3, [pc, #164]	; (8002710 <SystemInit+0xf0>)
 800266a:	4013      	ands	r3, r2
 800266c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800266e:	4b26      	ldr	r3, [pc, #152]	; (8002708 <SystemInit+0xe8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800267a:	4b23      	ldr	r3, [pc, #140]	; (8002708 <SystemInit+0xe8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 030f 	bic.w	r3, r3, #15
 8002682:	4a21      	ldr	r2, [pc, #132]	; (8002708 <SystemInit+0xe8>)
 8002684:	f043 0307 	orr.w	r3, r3, #7
 8002688:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800268a:	4b20      	ldr	r3, [pc, #128]	; (800270c <SystemInit+0xec>)
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002690:	4b1e      	ldr	r3, [pc, #120]	; (800270c <SystemInit+0xec>)
 8002692:	2200      	movs	r2, #0
 8002694:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002696:	4b1d      	ldr	r3, [pc, #116]	; (800270c <SystemInit+0xec>)
 8002698:	2200      	movs	r2, #0
 800269a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800269c:	4b1b      	ldr	r3, [pc, #108]	; (800270c <SystemInit+0xec>)
 800269e:	4a1d      	ldr	r2, [pc, #116]	; (8002714 <SystemInit+0xf4>)
 80026a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80026a2:	4b1a      	ldr	r3, [pc, #104]	; (800270c <SystemInit+0xec>)
 80026a4:	4a1c      	ldr	r2, [pc, #112]	; (8002718 <SystemInit+0xf8>)
 80026a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80026a8:	4b18      	ldr	r3, [pc, #96]	; (800270c <SystemInit+0xec>)
 80026aa:	4a1c      	ldr	r2, [pc, #112]	; (800271c <SystemInit+0xfc>)
 80026ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <SystemInit+0xec>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80026b4:	4b15      	ldr	r3, [pc, #84]	; (800270c <SystemInit+0xec>)
 80026b6:	4a19      	ldr	r2, [pc, #100]	; (800271c <SystemInit+0xfc>)
 80026b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <SystemInit+0xec>)
 80026bc:	2200      	movs	r2, #0
 80026be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <SystemInit+0xec>)
 80026c2:	4a16      	ldr	r2, [pc, #88]	; (800271c <SystemInit+0xfc>)
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80026c6:	4b11      	ldr	r3, [pc, #68]	; (800270c <SystemInit+0xec>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <SystemInit+0xec>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0e      	ldr	r2, [pc, #56]	; (800270c <SystemInit+0xec>)
 80026d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <SystemInit+0xec>)
 80026da:	2200      	movs	r2, #0
 80026dc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <SystemInit+0x100>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <SystemInit+0x104>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026ea:	d202      	bcs.n	80026f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80026ec:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <SystemInit+0x108>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <SystemInit+0x10c>)
 80026f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80026f8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00
 8002708:	52002000 	.word	0x52002000
 800270c:	58024400 	.word	0x58024400
 8002710:	eaf6ed7f 	.word	0xeaf6ed7f
 8002714:	02020200 	.word	0x02020200
 8002718:	01ff0000 	.word	0x01ff0000
 800271c:	01010280 	.word	0x01010280
 8002720:	5c001000 	.word	0x5c001000
 8002724:	ffff0000 	.word	0xffff0000
 8002728:	51008108 	.word	0x51008108
 800272c:	52004000 	.word	0x52004000

08002730 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002736:	f107 0310 	add.w	r3, r7, #16
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800274e:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <MX_TIM1_Init+0xa0>)
 8002750:	4a20      	ldr	r2, [pc, #128]	; (80027d4 <MX_TIM1_Init+0xa4>)
 8002752:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 600-1;
 8002754:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <MX_TIM1_Init+0xa0>)
 8002756:	f240 2257 	movw	r2, #599	; 0x257
 800275a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275c:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <MX_TIM1_Init+0xa0>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8002762:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <MX_TIM1_Init+0xa0>)
 8002764:	2209      	movs	r2, #9
 8002766:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002768:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <MX_TIM1_Init+0xa0>)
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800276e:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <MX_TIM1_Init+0xa0>)
 8002770:	2200      	movs	r2, #0
 8002772:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002774:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <MX_TIM1_Init+0xa0>)
 8002776:	2200      	movs	r2, #0
 8002778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800277a:	4815      	ldr	r0, [pc, #84]	; (80027d0 <MX_TIM1_Init+0xa0>)
 800277c:	f00a f913 	bl	800c9a6 <HAL_TIM_Base_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002786:	f7ff fb21 	bl	8001dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800278a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002790:	f107 0310 	add.w	r3, r7, #16
 8002794:	4619      	mov	r1, r3
 8002796:	480e      	ldr	r0, [pc, #56]	; (80027d0 <MX_TIM1_Init+0xa0>)
 8002798:	f00a fd80 	bl	800d29c <HAL_TIM_ConfigClockSource>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80027a2:	f7ff fb13 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80027a6:	2320      	movs	r3, #32
 80027a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	4619      	mov	r1, r3
 80027b6:	4806      	ldr	r0, [pc, #24]	; (80027d0 <MX_TIM1_Init+0xa0>)
 80027b8:	f00b fcfe 	bl	800e1b8 <HAL_TIMEx_MasterConfigSynchronization>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80027c2:	f7ff fb03 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80027c6:	bf00      	nop
 80027c8:	3720      	adds	r7, #32
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	2400072c 	.word	0x2400072c
 80027d4:	40010000 	.word	0x40010000

080027d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08e      	sub	sp, #56	; 0x38
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]
 80027e8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	609a      	str	r2, [r3, #8]
 80027f6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027f8:	463b      	mov	r3, r7
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	611a      	str	r2, [r3, #16]
 8002806:	615a      	str	r2, [r3, #20]
 8002808:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800280a:	4b36      	ldr	r3, [pc, #216]	; (80028e4 <MX_TIM2_Init+0x10c>)
 800280c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002810:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002812:	4b34      	ldr	r3, [pc, #208]	; (80028e4 <MX_TIM2_Init+0x10c>)
 8002814:	2200      	movs	r2, #0
 8002816:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002818:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <MX_TIM2_Init+0x10c>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800281e:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <MX_TIM2_Init+0x10c>)
 8002820:	f04f 32ff 	mov.w	r2, #4294967295
 8002824:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002826:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <MX_TIM2_Init+0x10c>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800282c:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <MX_TIM2_Init+0x10c>)
 800282e:	2200      	movs	r2, #0
 8002830:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002832:	482c      	ldr	r0, [pc, #176]	; (80028e4 <MX_TIM2_Init+0x10c>)
 8002834:	f00a f965 	bl	800cb02 <HAL_TIM_IC_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800283e:	f7ff fac5 	bl	8001dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002842:	4828      	ldr	r0, [pc, #160]	; (80028e4 <MX_TIM2_Init+0x10c>)
 8002844:	f00a f906 	bl	800ca54 <HAL_TIM_PWM_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800284e:	f7ff fabd 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800285a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800285e:	4619      	mov	r1, r3
 8002860:	4820      	ldr	r0, [pc, #128]	; (80028e4 <MX_TIM2_Init+0x10c>)
 8002862:	f00b fca9 	bl	800e1b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800286c:	f7ff faae 	bl	8001dcc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002870:	2300      	movs	r3, #0
 8002872:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002874:	2301      	movs	r3, #1
 8002876:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002880:	f107 031c 	add.w	r3, r7, #28
 8002884:	2200      	movs	r2, #0
 8002886:	4619      	mov	r1, r3
 8002888:	4816      	ldr	r0, [pc, #88]	; (80028e4 <MX_TIM2_Init+0x10c>)
 800288a:	f00a fb56 	bl	800cf3a <HAL_TIM_IC_ConfigChannel>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 8002894:	f7ff fa9a 	bl	8001dcc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002898:	f107 031c 	add.w	r3, r7, #28
 800289c:	2208      	movs	r2, #8
 800289e:	4619      	mov	r1, r3
 80028a0:	4810      	ldr	r0, [pc, #64]	; (80028e4 <MX_TIM2_Init+0x10c>)
 80028a2:	f00a fb4a 	bl	800cf3a <HAL_TIM_IC_ConfigChannel>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80028ac:	f7ff fa8e 	bl	8001dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028b0:	2360      	movs	r3, #96	; 0x60
 80028b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028c0:	463b      	mov	r3, r7
 80028c2:	220c      	movs	r2, #12
 80028c4:	4619      	mov	r1, r3
 80028c6:	4807      	ldr	r0, [pc, #28]	; (80028e4 <MX_TIM2_Init+0x10c>)
 80028c8:	f00a fbd4 	bl	800d074 <HAL_TIM_PWM_ConfigChannel>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 80028d2:	f7ff fa7b 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80028d6:	4803      	ldr	r0, [pc, #12]	; (80028e4 <MX_TIM2_Init+0x10c>)
 80028d8:	f000 fe14 	bl	8003504 <HAL_TIM_MspPostInit>

}
 80028dc:	bf00      	nop
 80028de:	3738      	adds	r7, #56	; 0x38
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	24000778 	.word	0x24000778

080028e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	; 0x28
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ee:	f107 031c 	add.w	r3, r7, #28
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028fa:	463b      	mov	r3, r7
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
 8002908:	615a      	str	r2, [r3, #20]
 800290a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800290c:	4b21      	ldr	r3, [pc, #132]	; (8002994 <MX_TIM3_Init+0xac>)
 800290e:	4a22      	ldr	r2, [pc, #136]	; (8002998 <MX_TIM3_Init+0xb0>)
 8002910:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002912:	4b20      	ldr	r3, [pc, #128]	; (8002994 <MX_TIM3_Init+0xac>)
 8002914:	2200      	movs	r2, #0
 8002916:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002918:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <MX_TIM3_Init+0xac>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800291e:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <MX_TIM3_Init+0xac>)
 8002920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002924:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002926:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <MX_TIM3_Init+0xac>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800292c:	4b19      	ldr	r3, [pc, #100]	; (8002994 <MX_TIM3_Init+0xac>)
 800292e:	2200      	movs	r2, #0
 8002930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002932:	4818      	ldr	r0, [pc, #96]	; (8002994 <MX_TIM3_Init+0xac>)
 8002934:	f00a f88e 	bl	800ca54 <HAL_TIM_PWM_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800293e:	f7ff fa45 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800294a:	f107 031c 	add.w	r3, r7, #28
 800294e:	4619      	mov	r1, r3
 8002950:	4810      	ldr	r0, [pc, #64]	; (8002994 <MX_TIM3_Init+0xac>)
 8002952:	f00b fc31 	bl	800e1b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800295c:	f7ff fa36 	bl	8001dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002960:	2360      	movs	r3, #96	; 0x60
 8002962:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002968:	2300      	movs	r3, #0
 800296a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002970:	463b      	mov	r3, r7
 8002972:	2200      	movs	r2, #0
 8002974:	4619      	mov	r1, r3
 8002976:	4807      	ldr	r0, [pc, #28]	; (8002994 <MX_TIM3_Init+0xac>)
 8002978:	f00a fb7c 	bl	800d074 <HAL_TIM_PWM_ConfigChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002982:	f7ff fa23 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002986:	4803      	ldr	r0, [pc, #12]	; (8002994 <MX_TIM3_Init+0xac>)
 8002988:	f000 fdbc 	bl	8003504 <HAL_TIM_MspPostInit>

}
 800298c:	bf00      	nop
 800298e:	3728      	adds	r7, #40	; 0x28
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	240007c4 	.word	0x240007c4
 8002998:	40000400 	.word	0x40000400

0800299c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b090      	sub	sp, #64	; 0x40
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029a2:	f107 031c 	add.w	r3, r7, #28
 80029a6:	2224      	movs	r2, #36	; 0x24
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f00d fd2e 	bl	801040c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b0:	f107 0310 	add.w	r3, r7, #16
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80029bc:	463b      	mov	r3, r7
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]
 80029c4:	609a      	str	r2, [r3, #8]
 80029c6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029c8:	4b2e      	ldr	r3, [pc, #184]	; (8002a84 <MX_TIM4_Init+0xe8>)
 80029ca:	4a2f      	ldr	r2, [pc, #188]	; (8002a88 <MX_TIM4_Init+0xec>)
 80029cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80029ce:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <MX_TIM4_Init+0xe8>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d4:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <MX_TIM4_Init+0xe8>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80029da:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <MX_TIM4_Init+0xe8>)
 80029dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e2:	4b28      	ldr	r3, [pc, #160]	; (8002a84 <MX_TIM4_Init+0xe8>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e8:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <MX_TIM4_Init+0xe8>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80029ee:	4825      	ldr	r0, [pc, #148]	; (8002a84 <MX_TIM4_Init+0xe8>)
 80029f0:	f00a f887 	bl	800cb02 <HAL_TIM_IC_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80029fa:	f7ff f9e7 	bl	8001dcc <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80029fe:	2301      	movs	r3, #1
 8002a00:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a02:	2300      	movs	r3, #0
 8002a04:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a06:	2301      	movs	r3, #1
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Filter = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a12:	2300      	movs	r3, #0
 8002a14:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a16:	2301      	movs	r3, #1
 8002a18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Filter = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002a22:	f107 031c 	add.w	r3, r7, #28
 8002a26:	4619      	mov	r1, r3
 8002a28:	4816      	ldr	r0, [pc, #88]	; (8002a84 <MX_TIM4_Init+0xe8>)
 8002a2a:	f00a f8c1 	bl	800cbb0 <HAL_TIM_Encoder_Init>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002a34:	f7ff f9ca 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a40:	f107 0310 	add.w	r3, r7, #16
 8002a44:	4619      	mov	r1, r3
 8002a46:	480f      	ldr	r0, [pc, #60]	; (8002a84 <MX_TIM4_Init+0xe8>)
 8002a48:	f00b fbb6 	bl	800e1b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM4_Init+0xba>
  {
    Error_Handler();
 8002a52:	f7ff f9bb 	bl	8001dcc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a56:	2300      	movs	r3, #0
 8002a58:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002a66:	463b      	mov	r3, r7
 8002a68:	2208      	movs	r2, #8
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4805      	ldr	r0, [pc, #20]	; (8002a84 <MX_TIM4_Init+0xe8>)
 8002a6e:	f00a fa64 	bl	800cf3a <HAL_TIM_IC_ConfigChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002a78:	f7ff f9a8 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a7c:	bf00      	nop
 8002a7e:	3740      	adds	r7, #64	; 0x40
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	24000810 	.word	0x24000810
 8002a88:	40000800 	.word	0x40000800

08002a8c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08c      	sub	sp, #48	; 0x30
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a92:	f107 030c 	add.w	r3, r7, #12
 8002a96:	2224      	movs	r2, #36	; 0x24
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f00d fcb6 	bl	801040c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa0:	463b      	mov	r3, r7
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	605a      	str	r2, [r3, #4]
 8002aa8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002aaa:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <MX_TIM5_Init+0xa4>)
 8002aac:	4a21      	ldr	r2, [pc, #132]	; (8002b34 <MX_TIM5_Init+0xa8>)
 8002aae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002ab0:	4b1f      	ldr	r3, [pc, #124]	; (8002b30 <MX_TIM5_Init+0xa4>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab6:	4b1e      	ldr	r3, [pc, #120]	; (8002b30 <MX_TIM5_Init+0xa4>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002abc:	4b1c      	ldr	r3, [pc, #112]	; (8002b30 <MX_TIM5_Init+0xa4>)
 8002abe:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <MX_TIM5_Init+0xa4>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aca:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <MX_TIM5_Init+0xa4>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002aec:	2300      	movs	r3, #0
 8002aee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002af4:	f107 030c 	add.w	r3, r7, #12
 8002af8:	4619      	mov	r1, r3
 8002afa:	480d      	ldr	r0, [pc, #52]	; (8002b30 <MX_TIM5_Init+0xa4>)
 8002afc:	f00a f858 	bl	800cbb0 <HAL_TIM_Encoder_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8002b06:	f7ff f961 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b12:	463b      	mov	r3, r7
 8002b14:	4619      	mov	r1, r3
 8002b16:	4806      	ldr	r0, [pc, #24]	; (8002b30 <MX_TIM5_Init+0xa4>)
 8002b18:	f00b fb4e 	bl	800e1b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002b22:	f7ff f953 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002b26:	bf00      	nop
 8002b28:	3730      	adds	r7, #48	; 0x30
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	2400085c 	.word	0x2400085c
 8002b34:	40000c00 	.word	0x40000c00

08002b38 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b48:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <MX_TIM6_Init+0x64>)
 8002b4a:	4a15      	ldr	r2, [pc, #84]	; (8002ba0 <MX_TIM6_Init+0x68>)
 8002b4c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002b4e:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <MX_TIM6_Init+0x64>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b54:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <MX_TIM6_Init+0x64>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <MX_TIM6_Init+0x64>)
 8002b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b60:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b62:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <MX_TIM6_Init+0x64>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b68:	480c      	ldr	r0, [pc, #48]	; (8002b9c <MX_TIM6_Init+0x64>)
 8002b6a:	f009 ff1c 	bl	800c9a6 <HAL_TIM_Base_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002b74:	f7ff f92a 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	4619      	mov	r1, r3
 8002b84:	4805      	ldr	r0, [pc, #20]	; (8002b9c <MX_TIM6_Init+0x64>)
 8002b86:	f00b fb17 	bl	800e1b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002b90:	f7ff f91c 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	240008a8 	.word	0x240008a8
 8002ba0:	40001000 	.word	0x40001000

08002ba4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002baa:	1d3b      	adds	r3, r7, #4
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002bb4:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <MX_TIM7_Init+0x64>)
 8002bb6:	4a15      	ldr	r2, [pc, #84]	; (8002c0c <MX_TIM7_Init+0x68>)
 8002bb8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002bba:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <MX_TIM7_Init+0x64>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <MX_TIM7_Init+0x64>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <MX_TIM7_Init+0x64>)
 8002bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bcc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <MX_TIM7_Init+0x64>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002bd4:	480c      	ldr	r0, [pc, #48]	; (8002c08 <MX_TIM7_Init+0x64>)
 8002bd6:	f009 fee6 	bl	800c9a6 <HAL_TIM_Base_Init>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002be0:	f7ff f8f4 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be4:	2300      	movs	r3, #0
 8002be6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4805      	ldr	r0, [pc, #20]	; (8002c08 <MX_TIM7_Init+0x64>)
 8002bf2:	f00b fae1 	bl	800e1b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002bfc:	f7ff f8e6 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	240008f4 	.word	0x240008f4
 8002c0c:	40001400 	.word	0x40001400

08002c10 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08c      	sub	sp, #48	; 0x30
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c16:	f107 030c 	add.w	r3, r7, #12
 8002c1a:	2224      	movs	r2, #36	; 0x24
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f00d fbf4 	bl	801040c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c24:	463b      	mov	r3, r7
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002c2e:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <MX_TIM8_Init+0xac>)
 8002c30:	4a23      	ldr	r2, [pc, #140]	; (8002cc0 <MX_TIM8_Init+0xb0>)
 8002c32:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002c34:	4b21      	ldr	r3, [pc, #132]	; (8002cbc <MX_TIM8_Init+0xac>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c3a:	4b20      	ldr	r3, [pc, #128]	; (8002cbc <MX_TIM8_Init+0xac>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002c40:	4b1e      	ldr	r3, [pc, #120]	; (8002cbc <MX_TIM8_Init+0xac>)
 8002c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c46:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c48:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <MX_TIM8_Init+0xac>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002c4e:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <MX_TIM8_Init+0xac>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <MX_TIM8_Init+0xac>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c62:	2301      	movs	r3, #1
 8002c64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c72:	2301      	movs	r3, #1
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002c7e:	f107 030c 	add.w	r3, r7, #12
 8002c82:	4619      	mov	r1, r3
 8002c84:	480d      	ldr	r0, [pc, #52]	; (8002cbc <MX_TIM8_Init+0xac>)
 8002c86:	f009 ff93 	bl	800cbb0 <HAL_TIM_Encoder_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002c90:	f7ff f89c 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c94:	2300      	movs	r3, #0
 8002c96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002ca0:	463b      	mov	r3, r7
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4805      	ldr	r0, [pc, #20]	; (8002cbc <MX_TIM8_Init+0xac>)
 8002ca6:	f00b fa87 	bl	800e1b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002cb0:	f7ff f88c 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002cb4:	bf00      	nop
 8002cb6:	3730      	adds	r7, #48	; 0x30
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	24000940 	.word	0x24000940
 8002cc0:	40010400 	.word	0x40010400

08002cc4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08c      	sub	sp, #48	; 0x30
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002cca:	f107 031c 	add.w	r3, r7, #28
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	60da      	str	r2, [r3, #12]
 8002cd8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002cda:	f107 030c 	add.w	r3, r7, #12
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce8:	463b      	mov	r3, r7
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002cf2:	4b33      	ldr	r3, [pc, #204]	; (8002dc0 <MX_TIM12_Init+0xfc>)
 8002cf4:	4a33      	ldr	r2, [pc, #204]	; (8002dc4 <MX_TIM12_Init+0x100>)
 8002cf6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002cf8:	4b31      	ldr	r3, [pc, #196]	; (8002dc0 <MX_TIM12_Init+0xfc>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cfe:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <MX_TIM12_Init+0xfc>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002d04:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <MX_TIM12_Init+0xfc>)
 8002d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d0a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d0c:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <MX_TIM12_Init+0xfc>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d12:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <MX_TIM12_Init+0xfc>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8002d18:	4829      	ldr	r0, [pc, #164]	; (8002dc0 <MX_TIM12_Init+0xfc>)
 8002d1a:	f009 fef2 	bl	800cb02 <HAL_TIM_IC_Init>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8002d24:	f7ff f852 	bl	8001dcc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002d28:	2304      	movs	r3, #4
 8002d2a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002d2c:	2350      	movs	r3, #80	; 0x50
 8002d2e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d30:	2300      	movs	r3, #0
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002d34:	2300      	movs	r3, #0
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8002d3c:	f107 031c 	add.w	r3, r7, #28
 8002d40:	4619      	mov	r1, r3
 8002d42:	481f      	ldr	r0, [pc, #124]	; (8002dc0 <MX_TIM12_Init+0xfc>)
 8002d44:	f00a fba2 	bl	800d48c <HAL_TIM_SlaveConfigSynchro>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_TIM12_Init+0x8e>
  {
    Error_Handler();
 8002d4e:	f7ff f83d 	bl	8001dcc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002d56:	2301      	movs	r3, #1
 8002d58:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002d62:	f107 030c 	add.w	r3, r7, #12
 8002d66:	2200      	movs	r2, #0
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4815      	ldr	r0, [pc, #84]	; (8002dc0 <MX_TIM12_Init+0xfc>)
 8002d6c:	f00a f8e5 	bl	800cf3a <HAL_TIM_IC_ConfigChannel>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_TIM12_Init+0xb6>
  {
    Error_Handler();
 8002d76:	f7ff f829 	bl	8001dcc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002d82:	f107 030c 	add.w	r3, r7, #12
 8002d86:	2204      	movs	r2, #4
 8002d88:	4619      	mov	r1, r3
 8002d8a:	480d      	ldr	r0, [pc, #52]	; (8002dc0 <MX_TIM12_Init+0xfc>)
 8002d8c:	f00a f8d5 	bl	800cf3a <HAL_TIM_IC_ConfigChannel>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM12_Init+0xd6>
  {
    Error_Handler();
 8002d96:	f7ff f819 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8002da2:	463b      	mov	r3, r7
 8002da4:	4619      	mov	r1, r3
 8002da6:	4806      	ldr	r0, [pc, #24]	; (8002dc0 <MX_TIM12_Init+0xfc>)
 8002da8:	f00b fa06 	bl	800e1b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_TIM12_Init+0xf2>
  {
    Error_Handler();
 8002db2:	f7ff f80b 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002db6:	bf00      	nop
 8002db8:	3730      	adds	r7, #48	; 0x30
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	2400098c 	.word	0x2400098c
 8002dc4:	40001800 	.word	0x40001800

08002dc8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <MX_TIM13_Init+0x40>)
 8002dce:	4a0f      	ldr	r2, [pc, #60]	; (8002e0c <MX_TIM13_Init+0x44>)
 8002dd0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <MX_TIM13_Init+0x40>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <MX_TIM13_Init+0x40>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <MX_TIM13_Init+0x40>)
 8002de0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002de4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <MX_TIM13_Init+0x40>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <MX_TIM13_Init+0x40>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002df2:	4805      	ldr	r0, [pc, #20]	; (8002e08 <MX_TIM13_Init+0x40>)
 8002df4:	f009 fdd7 	bl	800c9a6 <HAL_TIM_Base_Init>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002dfe:	f7fe ffe5 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	240009d8 	.word	0x240009d8
 8002e0c:	40001c00 	.word	0x40001c00

08002e10 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e16:	1d3b      	adds	r3, r7, #4
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	611a      	str	r2, [r3, #16]
 8002e24:	615a      	str	r2, [r3, #20]
 8002e26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002e28:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <MX_TIM14_Init+0x94>)
 8002e2a:	4a1f      	ldr	r2, [pc, #124]	; (8002ea8 <MX_TIM14_Init+0x98>)
 8002e2c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8002e2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <MX_TIM14_Init+0x94>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e34:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <MX_TIM14_Init+0x94>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002e3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <MX_TIM14_Init+0x94>)
 8002e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e40:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e42:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <MX_TIM14_Init+0x94>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e48:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <MX_TIM14_Init+0x94>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002e4e:	4815      	ldr	r0, [pc, #84]	; (8002ea4 <MX_TIM14_Init+0x94>)
 8002e50:	f009 fda9 	bl	800c9a6 <HAL_TIM_Base_Init>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8002e5a:	f7fe ffb7 	bl	8001dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002e5e:	4811      	ldr	r0, [pc, #68]	; (8002ea4 <MX_TIM14_Init+0x94>)
 8002e60:	f009 fdf8 	bl	800ca54 <HAL_TIM_PWM_Init>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8002e6a:	f7fe ffaf 	bl	8001dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e6e:	2360      	movs	r3, #96	; 0x60
 8002e70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	2200      	movs	r2, #0
 8002e82:	4619      	mov	r1, r3
 8002e84:	4807      	ldr	r0, [pc, #28]	; (8002ea4 <MX_TIM14_Init+0x94>)
 8002e86:	f00a f8f5 	bl	800d074 <HAL_TIM_PWM_ConfigChannel>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002e90:	f7fe ff9c 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002e94:	4803      	ldr	r0, [pc, #12]	; (8002ea4 <MX_TIM14_Init+0x94>)
 8002e96:	f000 fb35 	bl	8003504 <HAL_TIM_MspPostInit>

}
 8002e9a:	bf00      	nop
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	24000a24 	.word	0x24000a24
 8002ea8:	40002000 	.word	0x40002000

08002eac <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb2:	f107 0314 	add.w	r3, r7, #20
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002ebe:	1d3b      	adds	r3, r7, #4
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002eca:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <MX_TIM15_Init+0xa8>)
 8002ecc:	4a22      	ldr	r2, [pc, #136]	; (8002f58 <MX_TIM15_Init+0xac>)
 8002ece:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002ed0:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <MX_TIM15_Init+0xa8>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed6:	4b1f      	ldr	r3, [pc, #124]	; (8002f54 <MX_TIM15_Init+0xa8>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002edc:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <MX_TIM15_Init+0xa8>)
 8002ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ee2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <MX_TIM15_Init+0xa8>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002eea:	4b1a      	ldr	r3, [pc, #104]	; (8002f54 <MX_TIM15_Init+0xa8>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ef0:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <MX_TIM15_Init+0xa8>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8002ef6:	4817      	ldr	r0, [pc, #92]	; (8002f54 <MX_TIM15_Init+0xa8>)
 8002ef8:	f009 fe03 	bl	800cb02 <HAL_TIM_IC_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002f02:	f7fe ff63 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002f0e:	f107 0314 	add.w	r3, r7, #20
 8002f12:	4619      	mov	r1, r3
 8002f14:	480f      	ldr	r0, [pc, #60]	; (8002f54 <MX_TIM15_Init+0xa8>)
 8002f16:	f00b f94f 	bl	800e1b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002f20:	f7fe ff54 	bl	8001dcc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f24:	2300      	movs	r3, #0
 8002f26:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002f34:	1d3b      	adds	r3, r7, #4
 8002f36:	2204      	movs	r2, #4
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4806      	ldr	r0, [pc, #24]	; (8002f54 <MX_TIM15_Init+0xa8>)
 8002f3c:	f009 fffd 	bl	800cf3a <HAL_TIM_IC_ConfigChannel>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 8002f46:	f7fe ff41 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002f4a:	bf00      	nop
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	24000a70 	.word	0x24000a70
 8002f58:	40014000 	.word	0x40014000

08002f5c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002f60:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <MX_TIM16_Init+0x44>)
 8002f62:	4a10      	ldr	r2, [pc, #64]	; (8002fa4 <MX_TIM16_Init+0x48>)
 8002f64:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002f66:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <MX_TIM16_Init+0x44>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <MX_TIM16_Init+0x44>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <MX_TIM16_Init+0x44>)
 8002f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f78:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <MX_TIM16_Init+0x44>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002f80:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <MX_TIM16_Init+0x44>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <MX_TIM16_Init+0x44>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002f8c:	4804      	ldr	r0, [pc, #16]	; (8002fa0 <MX_TIM16_Init+0x44>)
 8002f8e:	f009 fd0a 	bl	800c9a6 <HAL_TIM_Base_Init>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002f98:	f7fe ff18 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002f9c:	bf00      	nop
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	24000abc 	.word	0x24000abc
 8002fa4:	40014400 	.word	0x40014400

08002fa8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <MX_TIM17_Init+0x44>)
 8002fae:	4a10      	ldr	r2, [pc, #64]	; (8002ff0 <MX_TIM17_Init+0x48>)
 8002fb0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <MX_TIM17_Init+0x44>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <MX_TIM17_Init+0x44>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <MX_TIM17_Init+0x44>)
 8002fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fc4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <MX_TIM17_Init+0x44>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <MX_TIM17_Init+0x44>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <MX_TIM17_Init+0x44>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002fd8:	4804      	ldr	r0, [pc, #16]	; (8002fec <MX_TIM17_Init+0x44>)
 8002fda:	f009 fce4 	bl	800c9a6 <HAL_TIM_Base_Init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002fe4:	f7fe fef2 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002fe8:	bf00      	nop
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	24000b08 	.word	0x24000b08
 8002ff0:	40014800 	.word	0x40014800

08002ff4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	; 0x28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a4d      	ldr	r2, [pc, #308]	; (8003138 <HAL_TIM_Base_MspInit+0x144>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d117      	bne.n	8003036 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003006:	4b4d      	ldr	r3, [pc, #308]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 8003008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800300c:	4a4b      	ldr	r2, [pc, #300]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003016:	4b49      	ldr	r3, [pc, #292]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 8003018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003024:	2200      	movs	r2, #0
 8003026:	2100      	movs	r1, #0
 8003028:	2019      	movs	r0, #25
 800302a:	f002 fce6 	bl	80059fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800302e:	2019      	movs	r0, #25
 8003030:	f002 fcfd 	bl	8005a2e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003034:	e07c      	b.n	8003130 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM6)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a41      	ldr	r2, [pc, #260]	; (8003140 <HAL_TIM_Base_MspInit+0x14c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10f      	bne.n	8003060 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003040:	4b3e      	ldr	r3, [pc, #248]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 8003042:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003046:	4a3d      	ldr	r2, [pc, #244]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 8003048:	f043 0310 	orr.w	r3, r3, #16
 800304c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003050:	4b3a      	ldr	r3, [pc, #232]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 8003052:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	623b      	str	r3, [r7, #32]
 800305c:	6a3b      	ldr	r3, [r7, #32]
}
 800305e:	e067      	b.n	8003130 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM7)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a37      	ldr	r2, [pc, #220]	; (8003144 <HAL_TIM_Base_MspInit+0x150>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d10f      	bne.n	800308a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800306a:	4b34      	ldr	r3, [pc, #208]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 800306c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003070:	4a32      	ldr	r2, [pc, #200]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 8003072:	f043 0320 	orr.w	r3, r3, #32
 8003076:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800307a:	4b30      	ldr	r3, [pc, #192]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 800307c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	69fb      	ldr	r3, [r7, #28]
}
 8003088:	e052      	b.n	8003130 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM13)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a2e      	ldr	r2, [pc, #184]	; (8003148 <HAL_TIM_Base_MspInit+0x154>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d10f      	bne.n	80030b4 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003094:	4b29      	ldr	r3, [pc, #164]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 8003096:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800309a:	4a28      	ldr	r2, [pc, #160]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 800309c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030a4:	4b25      	ldr	r3, [pc, #148]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 80030a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	69bb      	ldr	r3, [r7, #24]
}
 80030b2:	e03d      	b.n	8003130 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM14)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a24      	ldr	r2, [pc, #144]	; (800314c <HAL_TIM_Base_MspInit+0x158>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d10f      	bne.n	80030de <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80030be:	4b1f      	ldr	r3, [pc, #124]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 80030c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030c4:	4a1d      	ldr	r2, [pc, #116]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 80030c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030ce:	4b1b      	ldr	r3, [pc, #108]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 80030d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	697b      	ldr	r3, [r7, #20]
}
 80030dc:	e028      	b.n	8003130 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM16)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1b      	ldr	r2, [pc, #108]	; (8003150 <HAL_TIM_Base_MspInit+0x15c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10f      	bne.n	8003108 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80030e8:	4b14      	ldr	r3, [pc, #80]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 80030ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030ee:	4a13      	ldr	r2, [pc, #76]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 80030f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030f8:	4b10      	ldr	r3, [pc, #64]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 80030fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	693b      	ldr	r3, [r7, #16]
}
 8003106:	e013      	b.n	8003130 <HAL_TIM_Base_MspInit+0x13c>
  else if(tim_baseHandle->Instance==TIM17)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a11      	ldr	r2, [pc, #68]	; (8003154 <HAL_TIM_Base_MspInit+0x160>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d10e      	bne.n	8003130 <HAL_TIM_Base_MspInit+0x13c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 8003114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003118:	4a08      	ldr	r2, [pc, #32]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 800311a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800311e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_TIM_Base_MspInit+0x148>)
 8003124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	68fb      	ldr	r3, [r7, #12]
}
 8003130:	bf00      	nop
 8003132:	3728      	adds	r7, #40	; 0x28
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40010000 	.word	0x40010000
 800313c:	58024400 	.word	0x58024400
 8003140:	40001000 	.word	0x40001000
 8003144:	40001400 	.word	0x40001400
 8003148:	40001c00 	.word	0x40001c00
 800314c:	40002000 	.word	0x40002000
 8003150:	40014400 	.word	0x40014400
 8003154:	40014800 	.word	0x40014800

08003158 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b092      	sub	sp, #72	; 0x48
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003178:	d14e      	bne.n	8003218 <HAL_TIM_IC_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800317a:	4b87      	ldr	r3, [pc, #540]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 800317c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003180:	4a85      	ldr	r2, [pc, #532]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800318a:	4b83      	ldr	r3, [pc, #524]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 800318c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	633b      	str	r3, [r7, #48]	; 0x30
 8003196:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003198:	4b7f      	ldr	r3, [pc, #508]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 800319a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800319e:	4a7e      	ldr	r2, [pc, #504]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031a8:	4b7b      	ldr	r3, [pc, #492]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 80031aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b6:	4b78      	ldr	r3, [pc, #480]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 80031b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031bc:	4a76      	ldr	r2, [pc, #472]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 80031be:	f043 0302 	orr.w	r3, r3, #2
 80031c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031c6:	4b74      	ldr	r3, [pc, #464]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 80031c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031d4:	2301      	movs	r3, #1
 80031d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d8:	2302      	movs	r3, #2
 80031da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e0:	2300      	movs	r3, #0
 80031e2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031e4:	2301      	movs	r3, #1
 80031e6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031ec:	4619      	mov	r1, r3
 80031ee:	486b      	ldr	r0, [pc, #428]	; (800339c <HAL_TIM_IC_MspInit+0x244>)
 80031f0:	f004 fa5a 	bl	80076a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	2300      	movs	r3, #0
 8003204:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003206:	2301      	movs	r3, #1
 8003208:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800320e:	4619      	mov	r1, r3
 8003210:	4863      	ldr	r0, [pc, #396]	; (80033a0 <HAL_TIM_IC_MspInit+0x248>)
 8003212:	f004 fa49 	bl	80076a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8003216:	e0bb      	b.n	8003390 <HAL_TIM_IC_MspInit+0x238>
  else if(tim_icHandle->Instance==TIM4)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a61      	ldr	r2, [pc, #388]	; (80033a4 <HAL_TIM_IC_MspInit+0x24c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d14f      	bne.n	80032c2 <HAL_TIM_IC_MspInit+0x16a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003222:	4b5d      	ldr	r3, [pc, #372]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 8003224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003228:	4a5b      	ldr	r2, [pc, #364]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 800322a:	f043 0304 	orr.w	r3, r3, #4
 800322e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003232:	4b59      	ldr	r3, [pc, #356]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 8003234:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003240:	4b55      	ldr	r3, [pc, #340]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 8003242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003246:	4a54      	ldr	r2, [pc, #336]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 8003248:	f043 0302 	orr.w	r3, r3, #2
 800324c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003250:	4b51      	ldr	r3, [pc, #324]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 8003252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	623b      	str	r3, [r7, #32]
 800325c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800325e:	4b4e      	ldr	r3, [pc, #312]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 8003260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003264:	4a4c      	ldr	r2, [pc, #304]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 8003266:	f043 0308 	orr.w	r3, r3, #8
 800326a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800326e:	4b4a      	ldr	r3, [pc, #296]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 8003270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800327c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003280:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003282:	2302      	movs	r3, #2
 8003284:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003286:	2300      	movs	r3, #0
 8003288:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328a:	2300      	movs	r3, #0
 800328c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800328e:	2302      	movs	r3, #2
 8003290:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003292:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003296:	4619      	mov	r1, r3
 8003298:	4841      	ldr	r0, [pc, #260]	; (80033a0 <HAL_TIM_IC_MspInit+0x248>)
 800329a:	f004 fa05 	bl	80076a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800329e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80032a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a4:	2302      	movs	r3, #2
 80032a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ac:	2300      	movs	r3, #0
 80032ae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80032b0:	2302      	movs	r3, #2
 80032b2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032b8:	4619      	mov	r1, r3
 80032ba:	483b      	ldr	r0, [pc, #236]	; (80033a8 <HAL_TIM_IC_MspInit+0x250>)
 80032bc:	f004 f9f4 	bl	80076a8 <HAL_GPIO_Init>
}
 80032c0:	e066      	b.n	8003390 <HAL_TIM_IC_MspInit+0x238>
  else if(tim_icHandle->Instance==TIM12)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a39      	ldr	r2, [pc, #228]	; (80033ac <HAL_TIM_IC_MspInit+0x254>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d12e      	bne.n	800332a <HAL_TIM_IC_MspInit+0x1d2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80032cc:	4b32      	ldr	r3, [pc, #200]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 80032ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032d2:	4a31      	ldr	r2, [pc, #196]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 80032d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032dc:	4b2e      	ldr	r3, [pc, #184]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 80032de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e6:	61bb      	str	r3, [r7, #24]
 80032e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80032ea:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 80032ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f0:	4a29      	ldr	r2, [pc, #164]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 80032f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032fa:	4b27      	ldr	r3, [pc, #156]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 80032fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003308:	2340      	movs	r3, #64	; 0x40
 800330a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003314:	2300      	movs	r3, #0
 8003316:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8003318:	2302      	movs	r3, #2
 800331a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800331c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003320:	4619      	mov	r1, r3
 8003322:	4823      	ldr	r0, [pc, #140]	; (80033b0 <HAL_TIM_IC_MspInit+0x258>)
 8003324:	f004 f9c0 	bl	80076a8 <HAL_GPIO_Init>
}
 8003328:	e032      	b.n	8003390 <HAL_TIM_IC_MspInit+0x238>
  else if(tim_icHandle->Instance==TIM15)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a21      	ldr	r2, [pc, #132]	; (80033b4 <HAL_TIM_IC_MspInit+0x25c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d12d      	bne.n	8003390 <HAL_TIM_IC_MspInit+0x238>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003334:	4b18      	ldr	r3, [pc, #96]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 8003336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800333a:	4a17      	ldr	r2, [pc, #92]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003344:	4b14      	ldr	r3, [pc, #80]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 8003346:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800334a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003352:	4b11      	ldr	r3, [pc, #68]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 8003354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003358:	4a0f      	ldr	r2, [pc, #60]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 800335a:	f043 0310 	orr.w	r3, r3, #16
 800335e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <HAL_TIM_IC_MspInit+0x240>)
 8003364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003370:	2340      	movs	r3, #64	; 0x40
 8003372:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003374:	2302      	movs	r3, #2
 8003376:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003378:	2300      	movs	r3, #0
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337c:	2300      	movs	r3, #0
 800337e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003380:	2304      	movs	r3, #4
 8003382:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003384:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003388:	4619      	mov	r1, r3
 800338a:	480b      	ldr	r0, [pc, #44]	; (80033b8 <HAL_TIM_IC_MspInit+0x260>)
 800338c:	f004 f98c 	bl	80076a8 <HAL_GPIO_Init>
}
 8003390:	bf00      	nop
 8003392:	3748      	adds	r7, #72	; 0x48
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	58024400 	.word	0x58024400
 800339c:	58020000 	.word	0x58020000
 80033a0:	58020400 	.word	0x58020400
 80033a4:	40000800 	.word	0x40000800
 80033a8:	58020c00 	.word	0x58020c00
 80033ac:	40001800 	.word	0x40001800
 80033b0:	58021c00 	.word	0x58021c00
 80033b4:	40014000 	.word	0x40014000
 80033b8:	58021000 	.word	0x58021000

080033bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0b      	ldr	r2, [pc, #44]	; (80033f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d10e      	bne.n	80033ec <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_TIM_PWM_MspInit+0x40>)
 80033d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033d4:	4a09      	ldr	r2, [pc, #36]	; (80033fc <HAL_TIM_PWM_MspInit+0x40>)
 80033d6:	f043 0302 	orr.w	r3, r3, #2
 80033da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033de:	4b07      	ldr	r3, [pc, #28]	; (80033fc <HAL_TIM_PWM_MspInit+0x40>)
 80033e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80033ec:	bf00      	nop
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	40000400 	.word	0x40000400
 80033fc:	58024400 	.word	0x58024400

08003400 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08c      	sub	sp, #48	; 0x30
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 031c 	add.w	r3, r7, #28
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a34      	ldr	r2, [pc, #208]	; (80034f0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d12f      	bne.n	8003482 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003422:	4b34      	ldr	r3, [pc, #208]	; (80034f4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003424:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003428:	4a32      	ldr	r2, [pc, #200]	; (80034f4 <HAL_TIM_Encoder_MspInit+0xf4>)
 800342a:	f043 0308 	orr.w	r3, r3, #8
 800342e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003432:	4b30      	ldr	r3, [pc, #192]	; (80034f4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003434:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003440:	4b2c      	ldr	r3, [pc, #176]	; (80034f4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003446:	4a2b      	ldr	r2, [pc, #172]	; (80034f4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003450:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PH10     ------> TIM5_CH1
    PH11     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800345e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003464:	2302      	movs	r3, #2
 8003466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003468:	2300      	movs	r3, #0
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346c:	2300      	movs	r3, #0
 800346e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003470:	2302      	movs	r3, #2
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003474:	f107 031c 	add.w	r3, r7, #28
 8003478:	4619      	mov	r1, r3
 800347a:	481f      	ldr	r0, [pc, #124]	; (80034f8 <HAL_TIM_Encoder_MspInit+0xf8>)
 800347c:	f004 f914 	bl	80076a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003480:	e032      	b.n	80034e8 <HAL_TIM_Encoder_MspInit+0xe8>
  else if(tim_encoderHandle->Instance==TIM8)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a1d      	ldr	r2, [pc, #116]	; (80034fc <HAL_TIM_Encoder_MspInit+0xfc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d12d      	bne.n	80034e8 <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800348c:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <HAL_TIM_Encoder_MspInit+0xf4>)
 800348e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003492:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003494:	f043 0302 	orr.w	r3, r3, #2
 8003498:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800349c:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <HAL_TIM_Encoder_MspInit+0xf4>)
 800349e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <HAL_TIM_Encoder_MspInit+0xf4>)
 80034ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b0:	4a10      	ldr	r2, [pc, #64]	; (80034f4 <HAL_TIM_Encoder_MspInit+0xf4>)
 80034b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034ba:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <HAL_TIM_Encoder_MspInit+0xf4>)
 80034bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 80034c8:	2360      	movs	r3, #96	; 0x60
 80034ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034cc:	2302      	movs	r3, #2
 80034ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d4:	2300      	movs	r3, #0
 80034d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80034d8:	2303      	movs	r3, #3
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80034dc:	f107 031c 	add.w	r3, r7, #28
 80034e0:	4619      	mov	r1, r3
 80034e2:	4807      	ldr	r0, [pc, #28]	; (8003500 <HAL_TIM_Encoder_MspInit+0x100>)
 80034e4:	f004 f8e0 	bl	80076a8 <HAL_GPIO_Init>
}
 80034e8:	bf00      	nop
 80034ea:	3730      	adds	r7, #48	; 0x30
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40000c00 	.word	0x40000c00
 80034f4:	58024400 	.word	0x58024400
 80034f8:	58021c00 	.word	0x58021c00
 80034fc:	40010400 	.word	0x40010400
 8003500:	58022000 	.word	0x58022000

08003504 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800350c:	f107 0314 	add.w	r3, r7, #20
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	605a      	str	r2, [r3, #4]
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	60da      	str	r2, [r3, #12]
 800351a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003524:	d11f      	bne.n	8003566 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003526:	4b37      	ldr	r3, [pc, #220]	; (8003604 <HAL_TIM_MspPostInit+0x100>)
 8003528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800352c:	4a35      	ldr	r2, [pc, #212]	; (8003604 <HAL_TIM_MspPostInit+0x100>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003536:	4b33      	ldr	r3, [pc, #204]	; (8003604 <HAL_TIM_MspPostInit+0x100>)
 8003538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003544:	2308      	movs	r3, #8
 8003546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003548:	2302      	movs	r3, #2
 800354a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003550:	2300      	movs	r3, #0
 8003552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003554:	2301      	movs	r3, #1
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003558:	f107 0314 	add.w	r3, r7, #20
 800355c:	4619      	mov	r1, r3
 800355e:	482a      	ldr	r0, [pc, #168]	; (8003608 <HAL_TIM_MspPostInit+0x104>)
 8003560:	f004 f8a2 	bl	80076a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003564:	e049      	b.n	80035fa <HAL_TIM_MspPostInit+0xf6>
  else if(timHandle->Instance==TIM3)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a28      	ldr	r2, [pc, #160]	; (800360c <HAL_TIM_MspPostInit+0x108>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d11f      	bne.n	80035b0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003570:	4b24      	ldr	r3, [pc, #144]	; (8003604 <HAL_TIM_MspPostInit+0x100>)
 8003572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003576:	4a23      	ldr	r2, [pc, #140]	; (8003604 <HAL_TIM_MspPostInit+0x100>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003580:	4b20      	ldr	r3, [pc, #128]	; (8003604 <HAL_TIM_MspPostInit+0x100>)
 8003582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800358e:	2340      	movs	r3, #64	; 0x40
 8003590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003592:	2302      	movs	r3, #2
 8003594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359a:	2300      	movs	r3, #0
 800359c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800359e:	2302      	movs	r3, #2
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a2:	f107 0314 	add.w	r3, r7, #20
 80035a6:	4619      	mov	r1, r3
 80035a8:	4817      	ldr	r0, [pc, #92]	; (8003608 <HAL_TIM_MspPostInit+0x104>)
 80035aa:	f004 f87d 	bl	80076a8 <HAL_GPIO_Init>
}
 80035ae:	e024      	b.n	80035fa <HAL_TIM_MspPostInit+0xf6>
  else if(timHandle->Instance==TIM14)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a16      	ldr	r2, [pc, #88]	; (8003610 <HAL_TIM_MspPostInit+0x10c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d11f      	bne.n	80035fa <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_TIM_MspPostInit+0x100>)
 80035bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035c0:	4a10      	ldr	r2, [pc, #64]	; (8003604 <HAL_TIM_MspPostInit+0x100>)
 80035c2:	f043 0320 	orr.w	r3, r3, #32
 80035c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035ca:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <HAL_TIM_MspPostInit+0x100>)
 80035cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80035d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035de:	2302      	movs	r3, #2
 80035e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e6:	2300      	movs	r3, #0
 80035e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80035ea:	2309      	movs	r3, #9
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035ee:	f107 0314 	add.w	r3, r7, #20
 80035f2:	4619      	mov	r1, r3
 80035f4:	4807      	ldr	r0, [pc, #28]	; (8003614 <HAL_TIM_MspPostInit+0x110>)
 80035f6:	f004 f857 	bl	80076a8 <HAL_GPIO_Init>
}
 80035fa:	bf00      	nop
 80035fc:	3728      	adds	r7, #40	; 0x28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	58024400 	.word	0x58024400
 8003608:	58020000 	.word	0x58020000
 800360c:	40000400 	.word	0x40000400
 8003610:	40002000 	.word	0x40002000
 8003614:	58021400 	.word	0x58021400

08003618 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800361c:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <MX_LPUART1_UART_Init+0x90>)
 800361e:	4a23      	ldr	r2, [pc, #140]	; (80036ac <MX_LPUART1_UART_Init+0x94>)
 8003620:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8003622:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <MX_LPUART1_UART_Init+0x90>)
 8003624:	4a22      	ldr	r2, [pc, #136]	; (80036b0 <MX_LPUART1_UART_Init+0x98>)
 8003626:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003628:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <MX_LPUART1_UART_Init+0x90>)
 800362a:	2200      	movs	r2, #0
 800362c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800362e:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <MX_LPUART1_UART_Init+0x90>)
 8003630:	2200      	movs	r2, #0
 8003632:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003634:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <MX_LPUART1_UART_Init+0x90>)
 8003636:	2200      	movs	r2, #0
 8003638:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800363a:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <MX_LPUART1_UART_Init+0x90>)
 800363c:	220c      	movs	r2, #12
 800363e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <MX_LPUART1_UART_Init+0x90>)
 8003642:	2200      	movs	r2, #0
 8003644:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <MX_LPUART1_UART_Init+0x90>)
 8003648:	2200      	movs	r2, #0
 800364a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800364c:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <MX_LPUART1_UART_Init+0x90>)
 800364e:	2200      	movs	r2, #0
 8003650:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <MX_LPUART1_UART_Init+0x90>)
 8003654:	2200      	movs	r2, #0
 8003656:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8003658:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <MX_LPUART1_UART_Init+0x90>)
 800365a:	2200      	movs	r2, #0
 800365c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800365e:	4812      	ldr	r0, [pc, #72]	; (80036a8 <MX_LPUART1_UART_Init+0x90>)
 8003660:	f00a fe56 	bl	800e310 <HAL_UART_Init>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 800366a:	f7fe fbaf 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800366e:	2100      	movs	r1, #0
 8003670:	480d      	ldr	r0, [pc, #52]	; (80036a8 <MX_LPUART1_UART_Init+0x90>)
 8003672:	f00b fe58 	bl	800f326 <HAL_UARTEx_SetTxFifoThreshold>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 800367c:	f7fe fba6 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003680:	2100      	movs	r1, #0
 8003682:	4809      	ldr	r0, [pc, #36]	; (80036a8 <MX_LPUART1_UART_Init+0x90>)
 8003684:	f00b fe8d 	bl	800f3a2 <HAL_UARTEx_SetRxFifoThreshold>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800368e:	f7fe fb9d 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003692:	4805      	ldr	r0, [pc, #20]	; (80036a8 <MX_LPUART1_UART_Init+0x90>)
 8003694:	f00b fe0e 	bl	800f2b4 <HAL_UARTEx_DisableFifoMode>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800369e:	f7fe fb95 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	24000b54 	.word	0x24000b54
 80036ac:	58000c00 	.word	0x58000c00
 80036b0:	00033324 	.word	0x00033324

080036b4 <MX_UART4_Init>:
/* UART4 init function */
void MX_UART4_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80036b8:	4b22      	ldr	r3, [pc, #136]	; (8003744 <MX_UART4_Init+0x90>)
 80036ba:	4a23      	ldr	r2, [pc, #140]	; (8003748 <MX_UART4_Init+0x94>)
 80036bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80036be:	4b21      	ldr	r3, [pc, #132]	; (8003744 <MX_UART4_Init+0x90>)
 80036c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80036c6:	4b1f      	ldr	r3, [pc, #124]	; (8003744 <MX_UART4_Init+0x90>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80036cc:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <MX_UART4_Init+0x90>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80036d2:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <MX_UART4_Init+0x90>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80036d8:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <MX_UART4_Init+0x90>)
 80036da:	220c      	movs	r2, #12
 80036dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036de:	4b19      	ldr	r3, [pc, #100]	; (8003744 <MX_UART4_Init+0x90>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80036e4:	4b17      	ldr	r3, [pc, #92]	; (8003744 <MX_UART4_Init+0x90>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036ea:	4b16      	ldr	r3, [pc, #88]	; (8003744 <MX_UART4_Init+0x90>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036f0:	4b14      	ldr	r3, [pc, #80]	; (8003744 <MX_UART4_Init+0x90>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036f6:	4b13      	ldr	r3, [pc, #76]	; (8003744 <MX_UART4_Init+0x90>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80036fc:	4811      	ldr	r0, [pc, #68]	; (8003744 <MX_UART4_Init+0x90>)
 80036fe:	f00a fe07 	bl	800e310 <HAL_UART_Init>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003708:	f7fe fb60 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800370c:	2100      	movs	r1, #0
 800370e:	480d      	ldr	r0, [pc, #52]	; (8003744 <MX_UART4_Init+0x90>)
 8003710:	f00b fe09 	bl	800f326 <HAL_UARTEx_SetTxFifoThreshold>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800371a:	f7fe fb57 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800371e:	2100      	movs	r1, #0
 8003720:	4808      	ldr	r0, [pc, #32]	; (8003744 <MX_UART4_Init+0x90>)
 8003722:	f00b fe3e 	bl	800f3a2 <HAL_UARTEx_SetRxFifoThreshold>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800372c:	f7fe fb4e 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003730:	4804      	ldr	r0, [pc, #16]	; (8003744 <MX_UART4_Init+0x90>)
 8003732:	f00b fdbf 	bl	800f2b4 <HAL_UARTEx_DisableFifoMode>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800373c:	f7fe fb46 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003740:	bf00      	nop
 8003742:	bd80      	pop	{r7, pc}
 8003744:	24000be8 	.word	0x24000be8
 8003748:	40004c00 	.word	0x40004c00

0800374c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8003750:	4b22      	ldr	r3, [pc, #136]	; (80037dc <MX_UART7_Init+0x90>)
 8003752:	4a23      	ldr	r2, [pc, #140]	; (80037e0 <MX_UART7_Init+0x94>)
 8003754:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8003756:	4b21      	ldr	r3, [pc, #132]	; (80037dc <MX_UART7_Init+0x90>)
 8003758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800375c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800375e:	4b1f      	ldr	r3, [pc, #124]	; (80037dc <MX_UART7_Init+0x90>)
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003764:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <MX_UART7_Init+0x90>)
 8003766:	2200      	movs	r2, #0
 8003768:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800376a:	4b1c      	ldr	r3, [pc, #112]	; (80037dc <MX_UART7_Init+0x90>)
 800376c:	2200      	movs	r2, #0
 800376e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003770:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <MX_UART7_Init+0x90>)
 8003772:	220c      	movs	r2, #12
 8003774:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003776:	4b19      	ldr	r3, [pc, #100]	; (80037dc <MX_UART7_Init+0x90>)
 8003778:	2200      	movs	r2, #0
 800377a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800377c:	4b17      	ldr	r3, [pc, #92]	; (80037dc <MX_UART7_Init+0x90>)
 800377e:	2200      	movs	r2, #0
 8003780:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003782:	4b16      	ldr	r3, [pc, #88]	; (80037dc <MX_UART7_Init+0x90>)
 8003784:	2200      	movs	r2, #0
 8003786:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003788:	4b14      	ldr	r3, [pc, #80]	; (80037dc <MX_UART7_Init+0x90>)
 800378a:	2200      	movs	r2, #0
 800378c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800378e:	4b13      	ldr	r3, [pc, #76]	; (80037dc <MX_UART7_Init+0x90>)
 8003790:	2200      	movs	r2, #0
 8003792:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003794:	4811      	ldr	r0, [pc, #68]	; (80037dc <MX_UART7_Init+0x90>)
 8003796:	f00a fdbb 	bl	800e310 <HAL_UART_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80037a0:	f7fe fb14 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037a4:	2100      	movs	r1, #0
 80037a6:	480d      	ldr	r0, [pc, #52]	; (80037dc <MX_UART7_Init+0x90>)
 80037a8:	f00b fdbd 	bl	800f326 <HAL_UARTEx_SetTxFifoThreshold>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80037b2:	f7fe fb0b 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037b6:	2100      	movs	r1, #0
 80037b8:	4808      	ldr	r0, [pc, #32]	; (80037dc <MX_UART7_Init+0x90>)
 80037ba:	f00b fdf2 	bl	800f3a2 <HAL_UARTEx_SetRxFifoThreshold>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80037c4:	f7fe fb02 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80037c8:	4804      	ldr	r0, [pc, #16]	; (80037dc <MX_UART7_Init+0x90>)
 80037ca:	f00b fd73 	bl	800f2b4 <HAL_UARTEx_DisableFifoMode>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80037d4:	f7fe fafa 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80037d8:	bf00      	nop
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	24000c7c 	.word	0x24000c7c
 80037e0:	40007800 	.word	0x40007800

080037e4 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80037e8:	4b22      	ldr	r3, [pc, #136]	; (8003874 <MX_UART8_Init+0x90>)
 80037ea:	4a23      	ldr	r2, [pc, #140]	; (8003878 <MX_UART8_Init+0x94>)
 80037ec:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80037ee:	4b21      	ldr	r3, [pc, #132]	; (8003874 <MX_UART8_Init+0x90>)
 80037f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037f4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80037f6:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <MX_UART8_Init+0x90>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <MX_UART8_Init+0x90>)
 80037fe:	2200      	movs	r2, #0
 8003800:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8003802:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <MX_UART8_Init+0x90>)
 8003804:	2200      	movs	r2, #0
 8003806:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8003808:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <MX_UART8_Init+0x90>)
 800380a:	220c      	movs	r2, #12
 800380c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800380e:	4b19      	ldr	r3, [pc, #100]	; (8003874 <MX_UART8_Init+0x90>)
 8003810:	2200      	movs	r2, #0
 8003812:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003814:	4b17      	ldr	r3, [pc, #92]	; (8003874 <MX_UART8_Init+0x90>)
 8003816:	2200      	movs	r2, #0
 8003818:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800381a:	4b16      	ldr	r3, [pc, #88]	; (8003874 <MX_UART8_Init+0x90>)
 800381c:	2200      	movs	r2, #0
 800381e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003820:	4b14      	ldr	r3, [pc, #80]	; (8003874 <MX_UART8_Init+0x90>)
 8003822:	2200      	movs	r2, #0
 8003824:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003826:	4b13      	ldr	r3, [pc, #76]	; (8003874 <MX_UART8_Init+0x90>)
 8003828:	2200      	movs	r2, #0
 800382a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800382c:	4811      	ldr	r0, [pc, #68]	; (8003874 <MX_UART8_Init+0x90>)
 800382e:	f00a fd6f 	bl	800e310 <HAL_UART_Init>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8003838:	f7fe fac8 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800383c:	2100      	movs	r1, #0
 800383e:	480d      	ldr	r0, [pc, #52]	; (8003874 <MX_UART8_Init+0x90>)
 8003840:	f00b fd71 	bl	800f326 <HAL_UARTEx_SetTxFifoThreshold>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800384a:	f7fe fabf 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800384e:	2100      	movs	r1, #0
 8003850:	4808      	ldr	r0, [pc, #32]	; (8003874 <MX_UART8_Init+0x90>)
 8003852:	f00b fda6 	bl	800f3a2 <HAL_UARTEx_SetRxFifoThreshold>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800385c:	f7fe fab6 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8003860:	4804      	ldr	r0, [pc, #16]	; (8003874 <MX_UART8_Init+0x90>)
 8003862:	f00b fd27 	bl	800f2b4 <HAL_UARTEx_DisableFifoMode>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800386c:	f7fe faae 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8003870:	bf00      	nop
 8003872:	bd80      	pop	{r7, pc}
 8003874:	24000d10 	.word	0x24000d10
 8003878:	40007c00 	.word	0x40007c00

0800387c <MX_USART1_Init>:
/* USART1 init function */
void MX_USART1_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8003880:	4b22      	ldr	r3, [pc, #136]	; (800390c <MX_USART1_Init+0x90>)
 8003882:	4a23      	ldr	r2, [pc, #140]	; (8003910 <MX_USART1_Init+0x94>)
 8003884:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8003886:	4b21      	ldr	r3, [pc, #132]	; (800390c <MX_USART1_Init+0x90>)
 8003888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800388c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800388e:	4b1f      	ldr	r3, [pc, #124]	; (800390c <MX_USART1_Init+0x90>)
 8003890:	2200      	movs	r2, #0
 8003892:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8003894:	4b1d      	ldr	r3, [pc, #116]	; (800390c <MX_USART1_Init+0x90>)
 8003896:	2200      	movs	r2, #0
 8003898:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800389a:	4b1c      	ldr	r3, [pc, #112]	; (800390c <MX_USART1_Init+0x90>)
 800389c:	2200      	movs	r2, #0
 800389e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80038a0:	4b1a      	ldr	r3, [pc, #104]	; (800390c <MX_USART1_Init+0x90>)
 80038a2:	220c      	movs	r2, #12
 80038a4:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80038a6:	4b19      	ldr	r3, [pc, #100]	; (800390c <MX_USART1_Init+0x90>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80038ac:	4b17      	ldr	r3, [pc, #92]	; (800390c <MX_USART1_Init+0x90>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80038b2:	4b16      	ldr	r3, [pc, #88]	; (800390c <MX_USART1_Init+0x90>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 80038b8:	4b14      	ldr	r3, [pc, #80]	; (800390c <MX_USART1_Init+0x90>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 80038be:	4b13      	ldr	r3, [pc, #76]	; (800390c <MX_USART1_Init+0x90>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 80038c4:	4811      	ldr	r0, [pc, #68]	; (800390c <MX_USART1_Init+0x90>)
 80038c6:	f00b fdf9 	bl	800f4bc <HAL_USART_Init>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 80038d0:	f7fe fa7c 	bl	8001dcc <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038d4:	2100      	movs	r1, #0
 80038d6:	480d      	ldr	r0, [pc, #52]	; (800390c <MX_USART1_Init+0x90>)
 80038d8:	f00c fc0c 	bl	80100f4 <HAL_USARTEx_SetTxFifoThreshold>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 80038e2:	f7fe fa73 	bl	8001dcc <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038e6:	2100      	movs	r1, #0
 80038e8:	4808      	ldr	r0, [pc, #32]	; (800390c <MX_USART1_Init+0x90>)
 80038ea:	f00c fc41 	bl	8010170 <HAL_USARTEx_SetRxFifoThreshold>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 80038f4:	f7fe fa6a 	bl	8001dcc <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 80038f8:	4804      	ldr	r0, [pc, #16]	; (800390c <MX_USART1_Init+0x90>)
 80038fa:	f00c fbc2 	bl	8010082 <HAL_USARTEx_DisableFifoMode>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 8003904:	f7fe fa62 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003908:	bf00      	nop
 800390a:	bd80      	pop	{r7, pc}
 800390c:	24000da4 	.word	0x24000da4
 8003910:	40011000 	.word	0x40011000

08003914 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003918:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <MX_USART2_UART_Init+0x90>)
 800391a:	4a23      	ldr	r2, [pc, #140]	; (80039a8 <MX_USART2_UART_Init+0x94>)
 800391c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800391e:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <MX_USART2_UART_Init+0x90>)
 8003920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003924:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003926:	4b1f      	ldr	r3, [pc, #124]	; (80039a4 <MX_USART2_UART_Init+0x90>)
 8003928:	2200      	movs	r2, #0
 800392a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800392c:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <MX_USART2_UART_Init+0x90>)
 800392e:	2200      	movs	r2, #0
 8003930:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003932:	4b1c      	ldr	r3, [pc, #112]	; (80039a4 <MX_USART2_UART_Init+0x90>)
 8003934:	2200      	movs	r2, #0
 8003936:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003938:	4b1a      	ldr	r3, [pc, #104]	; (80039a4 <MX_USART2_UART_Init+0x90>)
 800393a:	220c      	movs	r2, #12
 800393c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800393e:	4b19      	ldr	r3, [pc, #100]	; (80039a4 <MX_USART2_UART_Init+0x90>)
 8003940:	2200      	movs	r2, #0
 8003942:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003944:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <MX_USART2_UART_Init+0x90>)
 8003946:	2200      	movs	r2, #0
 8003948:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800394a:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <MX_USART2_UART_Init+0x90>)
 800394c:	2200      	movs	r2, #0
 800394e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003950:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <MX_USART2_UART_Init+0x90>)
 8003952:	2200      	movs	r2, #0
 8003954:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003956:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <MX_USART2_UART_Init+0x90>)
 8003958:	2200      	movs	r2, #0
 800395a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800395c:	4811      	ldr	r0, [pc, #68]	; (80039a4 <MX_USART2_UART_Init+0x90>)
 800395e:	f00a fcd7 	bl	800e310 <HAL_UART_Init>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003968:	f7fe fa30 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800396c:	2100      	movs	r1, #0
 800396e:	480d      	ldr	r0, [pc, #52]	; (80039a4 <MX_USART2_UART_Init+0x90>)
 8003970:	f00b fcd9 	bl	800f326 <HAL_UARTEx_SetTxFifoThreshold>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800397a:	f7fe fa27 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800397e:	2100      	movs	r1, #0
 8003980:	4808      	ldr	r0, [pc, #32]	; (80039a4 <MX_USART2_UART_Init+0x90>)
 8003982:	f00b fd0e 	bl	800f3a2 <HAL_UARTEx_SetRxFifoThreshold>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800398c:	f7fe fa1e 	bl	8001dcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003990:	4804      	ldr	r0, [pc, #16]	; (80039a4 <MX_USART2_UART_Init+0x90>)
 8003992:	f00b fc8f 	bl	800f2b4 <HAL_UARTEx_DisableFifoMode>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800399c:	f7fe fa16 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039a0:	bf00      	nop
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	24000e04 	.word	0x24000e04
 80039a8:	40004400 	.word	0x40004400

080039ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b0c6      	sub	sp, #280	; 0x118
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80039b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80039ba:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039bc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	609a      	str	r2, [r3, #8]
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039d0:	22c0      	movs	r2, #192	; 0xc0
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f00c fd19 	bl	801040c <memset>
  if(uartHandle->Instance==LPUART1)
 80039da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80039de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a9a      	ldr	r2, [pc, #616]	; (8003c50 <HAL_UART_MspInit+0x2a4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d16b      	bne.n	8003ac4 <HAL_UART_MspInit+0x118>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80039ec:	f04f 0204 	mov.w	r2, #4
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 80039f8:	2300      	movs	r3, #0
 80039fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a02:	4618      	mov	r0, r3
 8003a04:	f006 f83e 	bl	8009a84 <HAL_RCCEx_PeriphCLKConfig>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8003a0e:	f7fe f9dd 	bl	8001dcc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003a12:	4b90      	ldr	r3, [pc, #576]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a18:	4a8e      	ldr	r2, [pc, #568]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003a1a:	f043 0308 	orr.w	r3, r3, #8
 8003a1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a22:	4b8c      	ldr	r3, [pc, #560]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a30:	4b88      	ldr	r3, [pc, #544]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a36:	4a87      	ldr	r2, [pc, #540]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003a38:	f043 0302 	orr.w	r3, r3, #2
 8003a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a40:	4b84      	ldr	r3, [pc, #528]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4e:	4b81      	ldr	r3, [pc, #516]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a54:	4a7f      	ldr	r2, [pc, #508]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a5e:	4b7d      	ldr	r3, [pc, #500]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	637b      	str	r3, [r7, #52]	; 0x34
 8003a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**LPUART1 GPIO Configuration
    PB7     ------> LPUART1_RX
    PA9     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a72:	2302      	movs	r3, #2
 8003a74:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 8003a84:	2308      	movs	r3, #8
 8003a86:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a8a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4871      	ldr	r0, [pc, #452]	; (8003c58 <HAL_UART_MspInit+0x2ac>)
 8003a92:	f003 fe09 	bl	80076a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003aba:	4619      	mov	r1, r3
 8003abc:	4867      	ldr	r0, [pc, #412]	; (8003c5c <HAL_UART_MspInit+0x2b0>)
 8003abe:	f003 fdf3 	bl	80076a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003ac2:	e1b9      	b.n	8003e38 <HAL_UART_MspInit+0x48c>
  else if(uartHandle->Instance==UART4)
 8003ac4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ac8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a63      	ldr	r2, [pc, #396]	; (8003c60 <HAL_UART_MspInit+0x2b4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d16c      	bne.n	8003bb0 <HAL_UART_MspInit+0x204>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003ad6:	f04f 0202 	mov.w	r2, #2
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ae8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003aec:	4618      	mov	r0, r3
 8003aee:	f005 ffc9 	bl	8009a84 <HAL_RCCEx_PeriphCLKConfig>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <HAL_UART_MspInit+0x150>
      Error_Handler();
 8003af8:	f7fe f968 	bl	8001dcc <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8003afc:	4b55      	ldr	r3, [pc, #340]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003afe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b02:	4a54      	ldr	r2, [pc, #336]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003b04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b0c:	4b51      	ldr	r3, [pc, #324]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003b0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b16:	633b      	str	r3, [r7, #48]	; 0x30
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b1a:	4b4e      	ldr	r3, [pc, #312]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b20:	4a4c      	ldr	r2, [pc, #304]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b2a:	4b4a      	ldr	r3, [pc, #296]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b38:	4b46      	ldr	r3, [pc, #280]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b3e:	4a45      	ldr	r2, [pc, #276]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003b40:	f043 0302 	orr.w	r3, r3, #2
 8003b44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b48:	4b42      	ldr	r3, [pc, #264]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003b56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003b70:	2308      	movs	r3, #8
 8003b72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003b76:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4839      	ldr	r0, [pc, #228]	; (8003c64 <HAL_UART_MspInit+0x2b8>)
 8003b7e:	f003 fd93 	bl	80076a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ba2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	482b      	ldr	r0, [pc, #172]	; (8003c58 <HAL_UART_MspInit+0x2ac>)
 8003baa:	f003 fd7d 	bl	80076a8 <HAL_GPIO_Init>
}
 8003bae:	e143      	b.n	8003e38 <HAL_UART_MspInit+0x48c>
  else if(uartHandle->Instance==UART7)
 8003bb0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003bb4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a2a      	ldr	r2, [pc, #168]	; (8003c68 <HAL_UART_MspInit+0x2bc>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d156      	bne.n	8003c70 <HAL_UART_MspInit+0x2c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003bc2:	f04f 0202 	mov.w	r2, #2
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f005 ff53 	bl	8009a84 <HAL_RCCEx_PeriphCLKConfig>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_UART_MspInit+0x23c>
      Error_Handler();
 8003be4:	f7fe f8f2 	bl	8001dcc <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003be8:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003bea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bee:	4a19      	ldr	r2, [pc, #100]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003bf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bf4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003bf8:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003bfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bfe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c06:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c0c:	4a11      	ldr	r2, [pc, #68]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003c0e:	f043 0320 	orr.w	r3, r3, #32
 8003c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c16:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <HAL_UART_MspInit+0x2a8>)
 8003c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	623b      	str	r3, [r7, #32]
 8003c22:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c24:	23c0      	movs	r3, #192	; 0xc0
 8003c26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003c3c:	2307      	movs	r3, #7
 8003c3e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c42:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003c46:	4619      	mov	r1, r3
 8003c48:	4808      	ldr	r0, [pc, #32]	; (8003c6c <HAL_UART_MspInit+0x2c0>)
 8003c4a:	f003 fd2d 	bl	80076a8 <HAL_GPIO_Init>
}
 8003c4e:	e0f3      	b.n	8003e38 <HAL_UART_MspInit+0x48c>
 8003c50:	58000c00 	.word	0x58000c00
 8003c54:	58024400 	.word	0x58024400
 8003c58:	58020400 	.word	0x58020400
 8003c5c:	58020000 	.word	0x58020000
 8003c60:	40004c00 	.word	0x40004c00
 8003c64:	58021c00 	.word	0x58021c00
 8003c68:	40007800 	.word	0x40007800
 8003c6c:	58021400 	.word	0x58021400
  else if(uartHandle->Instance==UART8)
 8003c70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003c74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a71      	ldr	r2, [pc, #452]	; (8003e44 <HAL_UART_MspInit+0x498>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d17b      	bne.n	8003d7a <HAL_UART_MspInit+0x3ce>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8003c82:	f04f 0202 	mov.w	r2, #2
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f005 fef3 	bl	8009a84 <HAL_RCCEx_PeriphCLKConfig>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_UART_MspInit+0x2fc>
      Error_Handler();
 8003ca4:	f7fe f892 	bl	8001dcc <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8003ca8:	4b67      	ldr	r3, [pc, #412]	; (8003e48 <HAL_UART_MspInit+0x49c>)
 8003caa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cae:	4a66      	ldr	r2, [pc, #408]	; (8003e48 <HAL_UART_MspInit+0x49c>)
 8003cb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cb4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cb8:	4b63      	ldr	r3, [pc, #396]	; (8003e48 <HAL_UART_MspInit+0x49c>)
 8003cba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cc2:	61fb      	str	r3, [r7, #28]
 8003cc4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cc6:	4b60      	ldr	r3, [pc, #384]	; (8003e48 <HAL_UART_MspInit+0x49c>)
 8003cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ccc:	4a5e      	ldr	r2, [pc, #376]	; (8003e48 <HAL_UART_MspInit+0x49c>)
 8003cce:	f043 0310 	orr.w	r3, r3, #16
 8003cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003cd6:	4b5c      	ldr	r3, [pc, #368]	; (8003e48 <HAL_UART_MspInit+0x49c>)
 8003cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cdc:	f003 0210 	and.w	r2, r3, #16
 8003ce0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ce4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003cee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003cf2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003cf4:	4b54      	ldr	r3, [pc, #336]	; (8003e48 <HAL_UART_MspInit+0x49c>)
 8003cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cfa:	4a53      	ldr	r2, [pc, #332]	; (8003e48 <HAL_UART_MspInit+0x49c>)
 8003cfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d04:	4b50      	ldr	r3, [pc, #320]	; (8003e48 <HAL_UART_MspInit+0x49c>)
 8003d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d0a:	f403 7200 	and.w	r2, r3, #512	; 0x200
 8003d0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d20:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d22:	2301      	movs	r3, #1
 8003d24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d34:	2300      	movs	r3, #0
 8003d36:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d40:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003d44:	4619      	mov	r1, r3
 8003d46:	4841      	ldr	r0, [pc, #260]	; (8003e4c <HAL_UART_MspInit+0x4a0>)
 8003d48:	f003 fcae 	bl	80076a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d54:	2302      	movs	r3, #2
 8003d56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d60:	2300      	movs	r3, #0
 8003d62:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003d66:	2308      	movs	r3, #8
 8003d68:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003d6c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003d70:	4619      	mov	r1, r3
 8003d72:	4837      	ldr	r0, [pc, #220]	; (8003e50 <HAL_UART_MspInit+0x4a4>)
 8003d74:	f003 fc98 	bl	80076a8 <HAL_GPIO_Init>
}
 8003d78:	e05e      	b.n	8003e38 <HAL_UART_MspInit+0x48c>
  else if(uartHandle->Instance==USART2)
 8003d7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003d7e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a33      	ldr	r2, [pc, #204]	; (8003e54 <HAL_UART_MspInit+0x4a8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d155      	bne.n	8003e38 <HAL_UART_MspInit+0x48c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003d8c:	f04f 0202 	mov.w	r2, #2
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003da2:	4618      	mov	r0, r3
 8003da4:	f005 fe6e 	bl	8009a84 <HAL_RCCEx_PeriphCLKConfig>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_UART_MspInit+0x406>
      Error_Handler();
 8003dae:	f7fe f80d 	bl	8001dcc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003db2:	4b25      	ldr	r3, [pc, #148]	; (8003e48 <HAL_UART_MspInit+0x49c>)
 8003db4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003db8:	4a23      	ldr	r2, [pc, #140]	; (8003e48 <HAL_UART_MspInit+0x49c>)
 8003dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003dc2:	4b21      	ldr	r3, [pc, #132]	; (8003e48 <HAL_UART_MspInit+0x49c>)
 8003dc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003dc8:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8003dcc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dde:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003de0:	4b19      	ldr	r3, [pc, #100]	; (8003e48 <HAL_UART_MspInit+0x49c>)
 8003de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003de6:	4a18      	ldr	r2, [pc, #96]	; (8003e48 <HAL_UART_MspInit+0x49c>)
 8003de8:	f043 0308 	orr.w	r3, r3, #8
 8003dec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003df0:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <HAL_UART_MspInit+0x49c>)
 8003df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003df6:	f003 0208 	and.w	r2, r3, #8
 8003dfa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003dfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e0c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003e0e:	2360      	movs	r3, #96	; 0x60
 8003e10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e14:	2302      	movs	r3, #2
 8003e16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e20:	2300      	movs	r3, #0
 8003e22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e26:	2307      	movs	r3, #7
 8003e28:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e2c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003e30:	4619      	mov	r1, r3
 8003e32:	4809      	ldr	r0, [pc, #36]	; (8003e58 <HAL_UART_MspInit+0x4ac>)
 8003e34:	f003 fc38 	bl	80076a8 <HAL_GPIO_Init>
}
 8003e38:	bf00      	nop
 8003e3a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40007c00 	.word	0x40007c00
 8003e48:	58024400 	.word	0x58024400
 8003e4c:	58021000 	.word	0x58021000
 8003e50:	58022400 	.word	0x58022400
 8003e54:	40004400 	.word	0x40004400
 8003e58:	58020c00 	.word	0x58020c00

08003e5c <HAL_USART_MspInit>:

void HAL_USART_MspInit(USART_HandleTypeDef* usartHandle)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b0bc      	sub	sp, #240	; 0xf0
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e64:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	605a      	str	r2, [r3, #4]
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	60da      	str	r2, [r3, #12]
 8003e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e74:	f107 0318 	add.w	r3, r7, #24
 8003e78:	22c0      	movs	r2, #192	; 0xc0
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f00c fac5 	bl	801040c <memset>
  if(usartHandle->Instance==USART1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a39      	ldr	r2, [pc, #228]	; (8003f6c <HAL_USART_MspInit+0x110>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d16b      	bne.n	8003f64 <HAL_USART_MspInit+0x108>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e8c:	f04f 0201 	mov.w	r2, #1
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e9e:	f107 0318 	add.w	r3, r7, #24
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f005 fdee 	bl	8009a84 <HAL_RCCEx_PeriphCLKConfig>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8003eae:	f7fd ff8d 	bl	8001dcc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003eb2:	4b2f      	ldr	r3, [pc, #188]	; (8003f70 <HAL_USART_MspInit+0x114>)
 8003eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003eb8:	4a2d      	ldr	r2, [pc, #180]	; (8003f70 <HAL_USART_MspInit+0x114>)
 8003eba:	f043 0310 	orr.w	r3, r3, #16
 8003ebe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003ec2:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <HAL_USART_MspInit+0x114>)
 8003ec4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ed0:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <HAL_USART_MspInit+0x114>)
 8003ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ed6:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <HAL_USART_MspInit+0x114>)
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ee0:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <HAL_USART_MspInit+0x114>)
 8003ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_USART_MspInit+0x114>)
 8003ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ef4:	4a1e      	ldr	r2, [pc, #120]	; (8003f70 <HAL_USART_MspInit+0x114>)
 8003ef6:	f043 0302 	orr.w	r3, r3, #2
 8003efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003efe:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <HAL_USART_MspInit+0x114>)
 8003f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f14:	2302      	movs	r3, #2
 8003f16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f20:	2300      	movs	r3, #0
 8003f22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f26:	2307      	movs	r3, #7
 8003f28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003f30:	4619      	mov	r1, r3
 8003f32:	4810      	ldr	r0, [pc, #64]	; (8003f74 <HAL_USART_MspInit+0x118>)
 8003f34:	f003 fbb8 	bl	80076a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8003f38:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003f3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f40:	2302      	movs	r3, #2
 8003f42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003f52:	2304      	movs	r3, #4
 8003f54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4806      	ldr	r0, [pc, #24]	; (8003f78 <HAL_USART_MspInit+0x11c>)
 8003f60:	f003 fba2 	bl	80076a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003f64:	bf00      	nop
 8003f66:	37f0      	adds	r7, #240	; 0xf0
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40011000 	.word	0x40011000
 8003f70:	58024400 	.word	0x58024400
 8003f74:	58020000 	.word	0x58020000
 8003f78:	58020400 	.word	0x58020400

08003f7c <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
	...

08003f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f90:	f7fe fb46 	bl	8002620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f94:	480c      	ldr	r0, [pc, #48]	; (8003fc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f96:	490d      	ldr	r1, [pc, #52]	; (8003fcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f98:	4a0d      	ldr	r2, [pc, #52]	; (8003fd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f9c:	e002      	b.n	8003fa4 <LoopCopyDataInit>

08003f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fa2:	3304      	adds	r3, #4

08003fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fa8:	d3f9      	bcc.n	8003f9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003faa:	4a0a      	ldr	r2, [pc, #40]	; (8003fd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fac:	4c0a      	ldr	r4, [pc, #40]	; (8003fd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fb0:	e001      	b.n	8003fb6 <LoopFillZerobss>

08003fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fb4:	3204      	adds	r2, #4

08003fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fb8:	d3fb      	bcc.n	8003fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fba:	f00c fa2f 	bl	801041c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fbe:	f7fd fd99 	bl	8001af4 <main>
  bx  lr
 8003fc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003fc4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003fc8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003fcc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8003fd0:	080104dc 	.word	0x080104dc
  ldr r2, =_sbss
 8003fd4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8003fd8:	24000e9c 	.word	0x24000e9c

08003fdc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fdc:	e7fe      	b.n	8003fdc <ADC3_IRQHandler>
	...

08003fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fe6:	2003      	movs	r0, #3
 8003fe8:	f001 fcfc 	bl	80059e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fec:	f005 fb74 	bl	80096d8 <HAL_RCC_GetSysClockFreq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b15      	ldr	r3, [pc, #84]	; (8004048 <HAL_Init+0x68>)
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	4913      	ldr	r1, [pc, #76]	; (800404c <HAL_Init+0x6c>)
 8003ffe:	5ccb      	ldrb	r3, [r1, r3]
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	fa22 f303 	lsr.w	r3, r2, r3
 8004008:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800400a:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <HAL_Init+0x68>)
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	4a0e      	ldr	r2, [pc, #56]	; (800404c <HAL_Init+0x6c>)
 8004014:	5cd3      	ldrb	r3, [r2, r3]
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	fa22 f303 	lsr.w	r3, r2, r3
 8004020:	4a0b      	ldr	r2, [pc, #44]	; (8004050 <HAL_Init+0x70>)
 8004022:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004024:	4a0b      	ldr	r2, [pc, #44]	; (8004054 <HAL_Init+0x74>)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800402a:	2000      	movs	r0, #0
 800402c:	f000 f814 	bl	8004058 <HAL_InitTick>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e002      	b.n	8004040 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800403a:	f7fe fa77 	bl	800252c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	58024400 	.word	0x58024400
 800404c:	0801047c 	.word	0x0801047c
 8004050:	24000004 	.word	0x24000004
 8004054:	24000000 	.word	0x24000000

08004058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004060:	4b15      	ldr	r3, [pc, #84]	; (80040b8 <HAL_InitTick+0x60>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e021      	b.n	80040b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800406c:	4b13      	ldr	r3, [pc, #76]	; (80040bc <HAL_InitTick+0x64>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4b11      	ldr	r3, [pc, #68]	; (80040b8 <HAL_InitTick+0x60>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	4619      	mov	r1, r3
 8004076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800407a:	fbb3 f3f1 	udiv	r3, r3, r1
 800407e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004082:	4618      	mov	r0, r3
 8004084:	f001 fce1 	bl	8005a4a <HAL_SYSTICK_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e00e      	b.n	80040b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b0f      	cmp	r3, #15
 8004096:	d80a      	bhi.n	80040ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004098:	2200      	movs	r2, #0
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	f04f 30ff 	mov.w	r0, #4294967295
 80040a0:	f001 fcab 	bl	80059fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040a4:	4a06      	ldr	r2, [pc, #24]	; (80040c0 <HAL_InitTick+0x68>)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	2400000c 	.word	0x2400000c
 80040bc:	24000000 	.word	0x24000000
 80040c0:	24000008 	.word	0x24000008

080040c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <HAL_IncTick+0x20>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <HAL_IncTick+0x24>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4413      	add	r3, r2
 80040d4:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <HAL_IncTick+0x24>)
 80040d6:	6013      	str	r3, [r2, #0]
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	2400000c 	.word	0x2400000c
 80040e8:	24000e98 	.word	0x24000e98

080040ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return uwTick;
 80040f0:	4b03      	ldr	r3, [pc, #12]	; (8004100 <HAL_GetTick+0x14>)
 80040f2:	681b      	ldr	r3, [r3, #0]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	24000e98 	.word	0x24000e98

08004104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800410c:	f7ff ffee 	bl	80040ec <HAL_GetTick>
 8004110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411c:	d005      	beq.n	800412a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800411e:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <HAL_Delay+0x44>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4413      	add	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800412a:	bf00      	nop
 800412c:	f7ff ffde 	bl	80040ec <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	429a      	cmp	r2, r3
 800413a:	d8f7      	bhi.n	800412c <HAL_Delay+0x28>
  {
  }
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	2400000c 	.word	0x2400000c

0800414c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004150:	4b03      	ldr	r3, [pc, #12]	; (8004160 <HAL_GetREVID+0x14>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	0c1b      	lsrs	r3, r3, #16
}
 8004156:	4618      	mov	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	5c001000 	.word	0x5c001000

08004164 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800416e:	4b07      	ldr	r3, [pc, #28]	; (800418c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	43db      	mvns	r3, r3
 8004176:	401a      	ands	r2, r3
 8004178:	4904      	ldr	r1, [pc, #16]	; (800418c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	4313      	orrs	r3, r2
 800417e:	604b      	str	r3, [r1, #4]
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	58000400 	.word	0x58000400

08004190 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	609a      	str	r2, [r3, #8]
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	609a      	str	r2, [r3, #8]
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3360      	adds	r3, #96	; 0x60
 800420a:	461a      	mov	r2, r3
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	430b      	orrs	r3, r1
 8004226:	431a      	orrs	r2, r3
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800422c:	bf00      	nop
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f003 031f 	and.w	r3, r3, #31
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	fa01 f303 	lsl.w	r3, r1, r3
 8004258:	431a      	orrs	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	611a      	str	r2, [r3, #16]
}
 800425e:	bf00      	nop
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800426a:	b480      	push	{r7}
 800426c:	b087      	sub	sp, #28
 800426e:	af00      	add	r7, sp, #0
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	3360      	adds	r3, #96	; 0x60
 800427a:	461a      	mov	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	431a      	orrs	r2, r3
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	601a      	str	r2, [r3, #0]
  }
}
 8004294:	bf00      	nop
 8004296:	371c      	adds	r7, #28
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80042b4:	2301      	movs	r3, #1
 80042b6:	e000      	b.n	80042ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b087      	sub	sp, #28
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3330      	adds	r3, #48	; 0x30
 80042d6:	461a      	mov	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	0a1b      	lsrs	r3, r3, #8
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	4413      	add	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f003 031f 	and.w	r3, r3, #31
 80042f0:	211f      	movs	r1, #31
 80042f2:	fa01 f303 	lsl.w	r3, r1, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	401a      	ands	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	0e9b      	lsrs	r3, r3, #26
 80042fe:	f003 011f 	and.w	r1, r3, #31
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f003 031f 	and.w	r3, r3, #31
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	431a      	orrs	r2, r3
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3314      	adds	r3, #20
 8004354:	461a      	mov	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	0e5b      	lsrs	r3, r3, #25
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	4413      	add	r3, r2
 8004362:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	0d1b      	lsrs	r3, r3, #20
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	2107      	movs	r1, #7
 8004372:	fa01 f303 	lsl.w	r3, r1, r3
 8004376:	43db      	mvns	r3, r3
 8004378:	401a      	ands	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	0d1b      	lsrs	r3, r3, #20
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	fa01 f303 	lsl.w	r3, r1, r3
 8004388:	431a      	orrs	r2, r3
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043b4:	43db      	mvns	r3, r3
 80043b6:	401a      	ands	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f003 0318 	and.w	r3, r3, #24
 80043be:	4908      	ldr	r1, [pc, #32]	; (80043e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80043c0:	40d9      	lsrs	r1, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	400b      	ands	r3, r1
 80043c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043ca:	431a      	orrs	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80043d2:	bf00      	nop
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	000fffff 	.word	0x000fffff

080043e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 031f 	and.w	r3, r3, #31
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	4b04      	ldr	r3, [pc, #16]	; (800443c <LL_ADC_DisableDeepPowerDown+0x20>)
 800442a:	4013      	ands	r3, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6093      	str	r3, [r2, #8]
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	5fffffc0 	.word	0x5fffffc0

08004440 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004454:	d101      	bne.n	800445a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <LL_ADC_EnableInternalRegulator+0x24>)
 8004476:	4013      	ands	r3, r2
 8004478:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	6fffffc0 	.word	0x6fffffc0

08004490 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044a4:	d101      	bne.n	80044aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <LL_ADC_IsEnabled+0x18>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <LL_ADC_IsEnabled+0x1a>
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d101      	bne.n	80044f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b08      	cmp	r3, #8
 8004516:	d101      	bne.n	800451c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
	...

0800452c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800452c:	b590      	push	{r4, r7, lr}
 800452e:	b089      	sub	sp, #36	; 0x24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004538:	2300      	movs	r3, #0
 800453a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e18f      	b.n	8004866 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004550:	2b00      	cmp	r3, #0
 8004552:	d109      	bne.n	8004568 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7fc f983 	bl	8000860 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff ff67 	bl	8004440 <LL_ADC_IsDeepPowerDownEnabled>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff ff4d 	bl	800441c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff ff82 	bl	8004490 <LL_ADC_IsInternalRegulatorEnabled>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d114      	bne.n	80045bc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff ff66 	bl	8004468 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800459c:	4b87      	ldr	r3, [pc, #540]	; (80047bc <HAL_ADC_Init+0x290>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	099b      	lsrs	r3, r3, #6
 80045a2:	4a87      	ldr	r2, [pc, #540]	; (80047c0 <HAL_ADC_Init+0x294>)
 80045a4:	fba2 2303 	umull	r2, r3, r2, r3
 80045a8:	099b      	lsrs	r3, r3, #6
 80045aa:	3301      	adds	r3, #1
 80045ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045ae:	e002      	b.n	80045b6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f9      	bne.n	80045b0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff ff65 	bl	8004490 <LL_ADC_IsInternalRegulatorEnabled>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10d      	bne.n	80045e8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d0:	f043 0210 	orr.w	r2, r3, #16
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045dc:	f043 0201 	orr.w	r2, r3, #1
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff ff76 	bl	80044de <LL_ADC_REG_IsConversionOngoing>
 80045f2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f040 8129 	bne.w	8004854 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	f040 8125 	bne.w	8004854 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004612:	f043 0202 	orr.w	r2, r3, #2
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff ff4a 	bl	80044b8 <LL_ADC_IsEnabled>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d136      	bne.n	8004698 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a65      	ldr	r2, [pc, #404]	; (80047c4 <HAL_ADC_Init+0x298>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d004      	beq.n	800463e <HAL_ADC_Init+0x112>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a63      	ldr	r2, [pc, #396]	; (80047c8 <HAL_ADC_Init+0x29c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d10e      	bne.n	800465c <HAL_ADC_Init+0x130>
 800463e:	4861      	ldr	r0, [pc, #388]	; (80047c4 <HAL_ADC_Init+0x298>)
 8004640:	f7ff ff3a 	bl	80044b8 <LL_ADC_IsEnabled>
 8004644:	4604      	mov	r4, r0
 8004646:	4860      	ldr	r0, [pc, #384]	; (80047c8 <HAL_ADC_Init+0x29c>)
 8004648:	f7ff ff36 	bl	80044b8 <LL_ADC_IsEnabled>
 800464c:	4603      	mov	r3, r0
 800464e:	4323      	orrs	r3, r4
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	e008      	b.n	800466e <HAL_ADC_Init+0x142>
 800465c:	485b      	ldr	r0, [pc, #364]	; (80047cc <HAL_ADC_Init+0x2a0>)
 800465e:	f7ff ff2b 	bl	80044b8 <LL_ADC_IsEnabled>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d012      	beq.n	8004698 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a53      	ldr	r2, [pc, #332]	; (80047c4 <HAL_ADC_Init+0x298>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d004      	beq.n	8004686 <HAL_ADC_Init+0x15a>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a51      	ldr	r2, [pc, #324]	; (80047c8 <HAL_ADC_Init+0x29c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d101      	bne.n	800468a <HAL_ADC_Init+0x15e>
 8004686:	4a52      	ldr	r2, [pc, #328]	; (80047d0 <HAL_ADC_Init+0x2a4>)
 8004688:	e000      	b.n	800468c <HAL_ADC_Init+0x160>
 800468a:	4a52      	ldr	r2, [pc, #328]	; (80047d4 <HAL_ADC_Init+0x2a8>)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	4619      	mov	r1, r3
 8004692:	4610      	mov	r0, r2
 8004694:	f7ff fd7c 	bl	8004190 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004698:	f7ff fd58 	bl	800414c <HAL_GetREVID>
 800469c:	4603      	mov	r3, r0
 800469e:	f241 0203 	movw	r2, #4099	; 0x1003
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d914      	bls.n	80046d0 <HAL_ADC_Init+0x1a4>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b10      	cmp	r3, #16
 80046ac:	d110      	bne.n	80046d0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	7d5b      	ldrb	r3, [r3, #21]
 80046b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	7f1b      	ldrb	r3, [r3, #28]
 80046c4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046c6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046c8:	f043 030c 	orr.w	r3, r3, #12
 80046cc:	61bb      	str	r3, [r7, #24]
 80046ce:	e00d      	b.n	80046ec <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	7d5b      	ldrb	r3, [r3, #21]
 80046d4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046da:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046e0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	7f1b      	ldrb	r3, [r3, #28]
 80046e6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	7f1b      	ldrb	r3, [r3, #28]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d106      	bne.n	8004702 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	045b      	lsls	r3, r3, #17
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4313      	orrs	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	2b00      	cmp	r3, #0
 8004708:	d009      	beq.n	800471e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4313      	orrs	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	4b2c      	ldr	r3, [pc, #176]	; (80047d8 <HAL_ADC_Init+0x2ac>)
 8004726:	4013      	ands	r3, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	69b9      	ldr	r1, [r7, #24]
 800472e:	430b      	orrs	r3, r1
 8004730:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fed1 	bl	80044de <LL_ADC_REG_IsConversionOngoing>
 800473c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff fede 	bl	8004504 <LL_ADC_INJ_IsConversionOngoing>
 8004748:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d15f      	bne.n	8004810 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d15c      	bne.n	8004810 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	7d1b      	ldrb	r3, [r3, #20]
 800475a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004760:	4313      	orrs	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	4b1c      	ldr	r3, [pc, #112]	; (80047dc <HAL_ADC_Init+0x2b0>)
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	69b9      	ldr	r1, [r7, #24]
 8004774:	430b      	orrs	r3, r1
 8004776:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800477e:	2b01      	cmp	r3, #1
 8004780:	d130      	bne.n	80047e4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <HAL_ADC_Init+0x2b4>)
 8004790:	4013      	ands	r3, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004796:	3a01      	subs	r2, #1
 8004798:	0411      	lsls	r1, r2, #16
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800479e:	4311      	orrs	r1, r2
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047a4:	4311      	orrs	r1, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047aa:	430a      	orrs	r2, r1
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	611a      	str	r2, [r3, #16]
 80047b8:	e01c      	b.n	80047f4 <HAL_ADC_Init+0x2c8>
 80047ba:	bf00      	nop
 80047bc:	24000000 	.word	0x24000000
 80047c0:	053e2d63 	.word	0x053e2d63
 80047c4:	40022000 	.word	0x40022000
 80047c8:	40022100 	.word	0x40022100
 80047cc:	58026000 	.word	0x58026000
 80047d0:	40022300 	.word	0x40022300
 80047d4:	58026300 	.word	0x58026300
 80047d8:	fff0c003 	.word	0xfff0c003
 80047dc:	ffffbffc 	.word	0xffffbffc
 80047e0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0201 	bic.w	r2, r2, #1
 80047f2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fdd8 	bl	80053c0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d10c      	bne.n	8004832 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	f023 010f 	bic.w	r1, r3, #15
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	1e5a      	subs	r2, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	631a      	str	r2, [r3, #48]	; 0x30
 8004830:	e007      	b.n	8004842 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 020f 	bic.w	r2, r2, #15
 8004840:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004846:	f023 0303 	bic.w	r3, r3, #3
 800484a:	f043 0201 	orr.w	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	655a      	str	r2, [r3, #84]	; 0x54
 8004852:	e007      	b.n	8004864 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	f043 0210 	orr.w	r2, r3, #16
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004864:	7ffb      	ldrb	r3, [r7, #31]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3724      	adds	r7, #36	; 0x24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd90      	pop	{r4, r7, pc}
 800486e:	bf00      	nop

08004870 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	; 0x28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004878:	2300      	movs	r3, #0
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a87      	ldr	r2, [pc, #540]	; (8004ab0 <HAL_ADC_IRQHandler+0x240>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d004      	beq.n	80048a0 <HAL_ADC_IRQHandler+0x30>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a86      	ldr	r2, [pc, #536]	; (8004ab4 <HAL_ADC_IRQHandler+0x244>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d101      	bne.n	80048a4 <HAL_ADC_IRQHandler+0x34>
 80048a0:	4b85      	ldr	r3, [pc, #532]	; (8004ab8 <HAL_ADC_IRQHandler+0x248>)
 80048a2:	e000      	b.n	80048a6 <HAL_ADC_IRQHandler+0x36>
 80048a4:	4b85      	ldr	r3, [pc, #532]	; (8004abc <HAL_ADC_IRQHandler+0x24c>)
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fd9c 	bl	80043e4 <LL_ADC_GetMultimode>
 80048ac:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d017      	beq.n	80048e8 <HAL_ADC_IRQHandler+0x78>
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d012      	beq.n	80048e8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f003 0310 	and.w	r3, r3, #16
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d105      	bne.n	80048da <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 feca 	bl	8005674 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2202      	movs	r2, #2
 80048e6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d004      	beq.n	80048fc <HAL_ADC_IRQHandler+0x8c>
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10a      	bne.n	8004912 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 8083 	beq.w	8004a0e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d07d      	beq.n	8004a0e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	2b00      	cmp	r3, #0
 800491c:	d105      	bne.n	800492a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004922:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff fcb6 	bl	80042a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d062      	beq.n	8004a00 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a5d      	ldr	r2, [pc, #372]	; (8004ab4 <HAL_ADC_IRQHandler+0x244>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d002      	beq.n	800494a <HAL_ADC_IRQHandler+0xda>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	e000      	b.n	800494c <HAL_ADC_IRQHandler+0xdc>
 800494a:	4b59      	ldr	r3, [pc, #356]	; (8004ab0 <HAL_ADC_IRQHandler+0x240>)
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6812      	ldr	r2, [r2, #0]
 8004950:	4293      	cmp	r3, r2
 8004952:	d008      	beq.n	8004966 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b05      	cmp	r3, #5
 800495e:	d002      	beq.n	8004966 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2b09      	cmp	r3, #9
 8004964:	d104      	bne.n	8004970 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	623b      	str	r3, [r7, #32]
 800496e:	e00c      	b.n	800498a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a4f      	ldr	r2, [pc, #316]	; (8004ab4 <HAL_ADC_IRQHandler+0x244>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d002      	beq.n	8004980 <HAL_ADC_IRQHandler+0x110>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	e000      	b.n	8004982 <HAL_ADC_IRQHandler+0x112>
 8004980:	4b4b      	ldr	r3, [pc, #300]	; (8004ab0 <HAL_ADC_IRQHandler+0x240>)
 8004982:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d135      	bne.n	8004a00 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d12e      	bne.n	8004a00 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fd99 	bl	80044de <LL_ADC_REG_IsConversionOngoing>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d11a      	bne.n	80049e8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 020c 	bic.w	r2, r2, #12
 80049c0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d112      	bne.n	8004a00 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049de:	f043 0201 	orr.w	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	655a      	str	r2, [r3, #84]	; 0x54
 80049e6:	e00b      	b.n	8004a00 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ec:	f043 0210 	orr.w	r2, r3, #16
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f8:	f043 0201 	orr.w	r2, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f96f 	bl	8004ce4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	220c      	movs	r2, #12
 8004a0c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d004      	beq.n	8004a22 <HAL_ADC_IRQHandler+0x1b2>
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10b      	bne.n	8004a3a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 80a0 	beq.w	8004b6e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 809a 	beq.w	8004b6e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3e:	f003 0310 	and.w	r3, r3, #16
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d105      	bne.n	8004a52 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff fc61 	bl	800431e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004a5c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff fc1c 	bl	80042a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004a68:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a11      	ldr	r2, [pc, #68]	; (8004ab4 <HAL_ADC_IRQHandler+0x244>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d002      	beq.n	8004a7a <HAL_ADC_IRQHandler+0x20a>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	e000      	b.n	8004a7c <HAL_ADC_IRQHandler+0x20c>
 8004a7a:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <HAL_ADC_IRQHandler+0x240>)
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d008      	beq.n	8004a96 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d005      	beq.n	8004a96 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b06      	cmp	r3, #6
 8004a8e:	d002      	beq.n	8004a96 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2b07      	cmp	r3, #7
 8004a94:	d104      	bne.n	8004aa0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	623b      	str	r3, [r7, #32]
 8004a9e:	e014      	b.n	8004aca <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a03      	ldr	r2, [pc, #12]	; (8004ab4 <HAL_ADC_IRQHandler+0x244>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_ADC_IRQHandler+0x250>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	e008      	b.n	8004ac2 <HAL_ADC_IRQHandler+0x252>
 8004ab0:	40022000 	.word	0x40022000
 8004ab4:	40022100 	.word	0x40022100
 8004ab8:	40022300 	.word	0x40022300
 8004abc:	58026300 	.word	0x58026300
 8004ac0:	4b84      	ldr	r3, [pc, #528]	; (8004cd4 <HAL_ADC_IRQHandler+0x464>)
 8004ac2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d047      	beq.n	8004b60 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <HAL_ADC_IRQHandler+0x27a>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d03f      	beq.n	8004b60 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d13a      	bne.n	8004b60 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b40      	cmp	r3, #64	; 0x40
 8004af6:	d133      	bne.n	8004b60 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d12e      	bne.n	8004b60 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff fcfc 	bl	8004504 <LL_ADC_INJ_IsConversionOngoing>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d11a      	bne.n	8004b48 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b20:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d112      	bne.n	8004b60 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	f043 0201 	orr.w	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	655a      	str	r2, [r3, #84]	; 0x54
 8004b46:	e00b      	b.n	8004b60 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4c:	f043 0210 	orr.w	r2, r3, #16
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b58:	f043 0201 	orr.w	r2, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fd5f 	bl	8005624 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2260      	movs	r2, #96	; 0x60
 8004b6c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d011      	beq.n	8004b9c <HAL_ADC_IRQHandler+0x32c>
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00c      	beq.n	8004b9c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f8b2 	bl	8004cf8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2280      	movs	r2, #128	; 0x80
 8004b9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d012      	beq.n	8004bcc <HAL_ADC_IRQHandler+0x35c>
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00d      	beq.n	8004bcc <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fd45 	bl	800564c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d012      	beq.n	8004bfc <HAL_ADC_IRQHandler+0x38c>
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00d      	beq.n	8004bfc <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fd37 	bl	8005660 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bfa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f003 0310 	and.w	r3, r3, #16
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d043      	beq.n	8004c8e <HAL_ADC_IRQHandler+0x41e>
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	f003 0310 	and.w	r3, r3, #16
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d03e      	beq.n	8004c8e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d102      	bne.n	8004c1e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1c:	e021      	b.n	8004c62 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d015      	beq.n	8004c50 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a2a      	ldr	r2, [pc, #168]	; (8004cd4 <HAL_ADC_IRQHandler+0x464>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d004      	beq.n	8004c38 <HAL_ADC_IRQHandler+0x3c8>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a29      	ldr	r2, [pc, #164]	; (8004cd8 <HAL_ADC_IRQHandler+0x468>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d101      	bne.n	8004c3c <HAL_ADC_IRQHandler+0x3cc>
 8004c38:	4b28      	ldr	r3, [pc, #160]	; (8004cdc <HAL_ADC_IRQHandler+0x46c>)
 8004c3a:	e000      	b.n	8004c3e <HAL_ADC_IRQHandler+0x3ce>
 8004c3c:	4b28      	ldr	r3, [pc, #160]	; (8004ce0 <HAL_ADC_IRQHandler+0x470>)
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff fbde 	bl	8004400 <LL_ADC_GetMultiDMATransfer>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00b      	beq.n	8004c62 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4e:	e008      	b.n	8004c62 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d10e      	bne.n	8004c86 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c78:	f043 0202 	orr.w	r2, r3, #2
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f843 	bl	8004d0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2210      	movs	r2, #16
 8004c8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d018      	beq.n	8004cca <HAL_ADC_IRQHandler+0x45a>
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d013      	beq.n	8004cca <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	f043 0208 	orr.w	r2, r3, #8
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cc2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fcb7 	bl	8005638 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004cca:	bf00      	nop
 8004ccc:	3728      	adds	r7, #40	; 0x28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40022000 	.word	0x40022000
 8004cd8:	40022100 	.word	0x40022100
 8004cdc:	40022300 	.word	0x40022300
 8004ce0:	58026300 	.word	0x58026300

08004ce4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004d20:	b590      	push	{r4, r7, lr}
 8004d22:	b0a1      	sub	sp, #132	; 0x84
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4a9d      	ldr	r2, [pc, #628]	; (8004fb0 <HAL_ADC_ConfigChannel+0x290>)
 8004d3a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_ADC_ConfigChannel+0x2a>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e321      	b.n	800538e <HAL_ADC_ConfigChannel+0x66e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff fbc1 	bl	80044de <LL_ADC_REG_IsConversionOngoing>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f040 8306 	bne.w	8005370 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d108      	bne.n	8004d82 <HAL_ADC_ConfigChannel+0x62>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	0e9b      	lsrs	r3, r3, #26
 8004d76:	f003 031f 	and.w	r3, r3, #31
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	e016      	b.n	8004db0 <HAL_ADC_ConfigChannel+0x90>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d8a:	fa93 f3a3 	rbit	r3, r3
 8004d8e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d92:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004d94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004d9a:	2320      	movs	r3, #32
 8004d9c:	e003      	b.n	8004da6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004d9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004da0:	fab3 f383 	clz	r3, r3
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	f003 031f 	and.w	r3, r3, #31
 8004daa:	2201      	movs	r2, #1
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	69d1      	ldr	r1, [r2, #28]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6812      	ldr	r2, [r2, #0]
 8004dba:	430b      	orrs	r3, r1
 8004dbc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6859      	ldr	r1, [r3, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f7ff fa7b 	bl	80042c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff fb82 	bl	80044de <LL_ADC_REG_IsConversionOngoing>
 8004dda:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7ff fb8f 	bl	8004504 <LL_ADC_INJ_IsConversionOngoing>
 8004de6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f040 80b3 	bne.w	8004f56 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f040 80af 	bne.w	8004f56 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	6819      	ldr	r1, [r3, #0]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	461a      	mov	r2, r3
 8004e06:	f7ff fa9d 	bl	8004344 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004e0a:	4b6a      	ldr	r3, [pc, #424]	; (8004fb4 <HAL_ADC_ConfigChannel+0x294>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e16:	d10b      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0x110>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	695a      	ldr	r2, [r3, #20]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	089b      	lsrs	r3, r3, #2
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	e01d      	b.n	8004e6c <HAL_ADC_ConfigChannel+0x14c>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10b      	bne.n	8004e56 <HAL_ADC_ConfigChannel+0x136>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695a      	ldr	r2, [r3, #20]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	089b      	lsrs	r3, r3, #2
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	e00a      	b.n	8004e6c <HAL_ADC_ConfigChannel+0x14c>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	089b      	lsrs	r3, r3, #2
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d027      	beq.n	8004ec6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	6919      	ldr	r1, [r3, #16]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e84:	f7ff f9b8 	bl	80041f8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	6919      	ldr	r1, [r3, #16]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	7e5b      	ldrb	r3, [r3, #25]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d102      	bne.n	8004e9e <HAL_ADC_ConfigChannel+0x17e>
 8004e98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e9c:	e000      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x180>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	f7ff f9e2 	bl	800426a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6919      	ldr	r1, [r3, #16]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	7e1b      	ldrb	r3, [r3, #24]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d102      	bne.n	8004ebc <HAL_ADC_ConfigChannel+0x19c>
 8004eb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004eba:	e000      	b.n	8004ebe <HAL_ADC_ConfigChannel+0x19e>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f7ff f9ba 	bl	8004238 <LL_ADC_SetDataRightShift>
 8004ec4:	e047      	b.n	8004f56 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ecc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	069b      	lsls	r3, r3, #26
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d107      	bne.n	8004eea <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ee8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ef0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	069b      	lsls	r3, r3, #26
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d107      	bne.n	8004f0e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f0c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	069b      	lsls	r3, r3, #26
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d107      	bne.n	8004f32 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f30:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	069b      	lsls	r3, r3, #26
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d107      	bne.n	8004f56 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f54:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff faac 	bl	80044b8 <LL_ADC_IsEnabled>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f040 820d 	bne.w	8005382 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6818      	ldr	r0, [r3, #0]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	6819      	ldr	r1, [r3, #0]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	461a      	mov	r2, r3
 8004f76:	f7ff fa11 	bl	800439c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	4a0c      	ldr	r2, [pc, #48]	; (8004fb0 <HAL_ADC_ConfigChannel+0x290>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	f040 8133 	bne.w	80051ec <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d110      	bne.n	8004fb8 <HAL_ADC_ConfigChannel+0x298>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	0e9b      	lsrs	r3, r3, #26
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	2b09      	cmp	r3, #9
 8004fa4:	bf94      	ite	ls
 8004fa6:	2301      	movls	r3, #1
 8004fa8:	2300      	movhi	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	e01e      	b.n	8004fec <HAL_ADC_ConfigChannel+0x2cc>
 8004fae:	bf00      	nop
 8004fb0:	47ff0000 	.word	0x47ff0000
 8004fb4:	5c001000 	.word	0x5c001000
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fc0:	fa93 f3a3 	rbit	r3, r3
 8004fc4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004fd0:	2320      	movs	r3, #32
 8004fd2:	e003      	b.n	8004fdc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd6:	fab3 f383 	clz	r3, r3
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	3301      	adds	r3, #1
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	2b09      	cmp	r3, #9
 8004fe4:	bf94      	ite	ls
 8004fe6:	2301      	movls	r3, #1
 8004fe8:	2300      	movhi	r3, #0
 8004fea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d079      	beq.n	80050e4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d107      	bne.n	800500c <HAL_ADC_ConfigChannel+0x2ec>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	0e9b      	lsrs	r3, r3, #26
 8005002:	3301      	adds	r3, #1
 8005004:	069b      	lsls	r3, r3, #26
 8005006:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800500a:	e015      	b.n	8005038 <HAL_ADC_ConfigChannel+0x318>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005014:	fa93 f3a3 	rbit	r3, r3
 8005018:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800501a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800501c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800501e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005024:	2320      	movs	r3, #32
 8005026:	e003      	b.n	8005030 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800502a:	fab3 f383 	clz	r3, r3
 800502e:	b2db      	uxtb	r3, r3
 8005030:	3301      	adds	r3, #1
 8005032:	069b      	lsls	r3, r3, #26
 8005034:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005040:	2b00      	cmp	r3, #0
 8005042:	d109      	bne.n	8005058 <HAL_ADC_ConfigChannel+0x338>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	0e9b      	lsrs	r3, r3, #26
 800504a:	3301      	adds	r3, #1
 800504c:	f003 031f 	and.w	r3, r3, #31
 8005050:	2101      	movs	r1, #1
 8005052:	fa01 f303 	lsl.w	r3, r1, r3
 8005056:	e017      	b.n	8005088 <HAL_ADC_ConfigChannel+0x368>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005060:	fa93 f3a3 	rbit	r3, r3
 8005064:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005068:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800506a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005070:	2320      	movs	r3, #32
 8005072:	e003      	b.n	800507c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005076:	fab3 f383 	clz	r3, r3
 800507a:	b2db      	uxtb	r3, r3
 800507c:	3301      	adds	r3, #1
 800507e:	f003 031f 	and.w	r3, r3, #31
 8005082:	2101      	movs	r1, #1
 8005084:	fa01 f303 	lsl.w	r3, r1, r3
 8005088:	ea42 0103 	orr.w	r1, r2, r3
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10a      	bne.n	80050ae <HAL_ADC_ConfigChannel+0x38e>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	0e9b      	lsrs	r3, r3, #26
 800509e:	3301      	adds	r3, #1
 80050a0:	f003 021f 	and.w	r2, r3, #31
 80050a4:	4613      	mov	r3, r2
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	4413      	add	r3, r2
 80050aa:	051b      	lsls	r3, r3, #20
 80050ac:	e018      	b.n	80050e0 <HAL_ADC_ConfigChannel+0x3c0>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b6:	fa93 f3a3 	rbit	r3, r3
 80050ba:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80050c6:	2320      	movs	r3, #32
 80050c8:	e003      	b.n	80050d2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80050ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050cc:	fab3 f383 	clz	r3, r3
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	3301      	adds	r3, #1
 80050d4:	f003 021f 	and.w	r2, r3, #31
 80050d8:	4613      	mov	r3, r2
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	4413      	add	r3, r2
 80050de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050e0:	430b      	orrs	r3, r1
 80050e2:	e07e      	b.n	80051e2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d107      	bne.n	8005100 <HAL_ADC_ConfigChannel+0x3e0>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	0e9b      	lsrs	r3, r3, #26
 80050f6:	3301      	adds	r3, #1
 80050f8:	069b      	lsls	r3, r3, #26
 80050fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050fe:	e015      	b.n	800512c <HAL_ADC_ConfigChannel+0x40c>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005108:	fa93 f3a3 	rbit	r3, r3
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005118:	2320      	movs	r3, #32
 800511a:	e003      	b.n	8005124 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	fab3 f383 	clz	r3, r3
 8005122:	b2db      	uxtb	r3, r3
 8005124:	3301      	adds	r3, #1
 8005126:	069b      	lsls	r3, r3, #26
 8005128:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005134:	2b00      	cmp	r3, #0
 8005136:	d109      	bne.n	800514c <HAL_ADC_ConfigChannel+0x42c>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	0e9b      	lsrs	r3, r3, #26
 800513e:	3301      	adds	r3, #1
 8005140:	f003 031f 	and.w	r3, r3, #31
 8005144:	2101      	movs	r1, #1
 8005146:	fa01 f303 	lsl.w	r3, r1, r3
 800514a:	e017      	b.n	800517c <HAL_ADC_ConfigChannel+0x45c>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	fa93 f3a3 	rbit	r3, r3
 8005158:	61bb      	str	r3, [r7, #24]
  return result;
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8005164:	2320      	movs	r3, #32
 8005166:	e003      	b.n	8005170 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	fab3 f383 	clz	r3, r3
 800516e:	b2db      	uxtb	r3, r3
 8005170:	3301      	adds	r3, #1
 8005172:	f003 031f 	and.w	r3, r3, #31
 8005176:	2101      	movs	r1, #1
 8005178:	fa01 f303 	lsl.w	r3, r1, r3
 800517c:	ea42 0103 	orr.w	r1, r2, r3
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10d      	bne.n	80051a8 <HAL_ADC_ConfigChannel+0x488>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	0e9b      	lsrs	r3, r3, #26
 8005192:	3301      	adds	r3, #1
 8005194:	f003 021f 	and.w	r2, r3, #31
 8005198:	4613      	mov	r3, r2
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	4413      	add	r3, r2
 800519e:	3b1e      	subs	r3, #30
 80051a0:	051b      	lsls	r3, r3, #20
 80051a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80051a6:	e01b      	b.n	80051e0 <HAL_ADC_ConfigChannel+0x4c0>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	fa93 f3a3 	rbit	r3, r3
 80051b4:	60fb      	str	r3, [r7, #12]
  return result;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80051c0:	2320      	movs	r3, #32
 80051c2:	e003      	b.n	80051cc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	fab3 f383 	clz	r3, r3
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	3301      	adds	r3, #1
 80051ce:	f003 021f 	and.w	r2, r3, #31
 80051d2:	4613      	mov	r3, r2
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	4413      	add	r3, r2
 80051d8:	3b1e      	subs	r3, #30
 80051da:	051b      	lsls	r3, r3, #20
 80051dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051e0:	430b      	orrs	r3, r1
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	6892      	ldr	r2, [r2, #8]
 80051e6:	4619      	mov	r1, r3
 80051e8:	f7ff f8ac 	bl	8004344 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f280 80c6 	bge.w	8005382 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a67      	ldr	r2, [pc, #412]	; (8005398 <HAL_ADC_ConfigChannel+0x678>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d004      	beq.n	800520a <HAL_ADC_ConfigChannel+0x4ea>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a65      	ldr	r2, [pc, #404]	; (800539c <HAL_ADC_ConfigChannel+0x67c>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d101      	bne.n	800520e <HAL_ADC_ConfigChannel+0x4ee>
 800520a:	4b65      	ldr	r3, [pc, #404]	; (80053a0 <HAL_ADC_ConfigChannel+0x680>)
 800520c:	e000      	b.n	8005210 <HAL_ADC_ConfigChannel+0x4f0>
 800520e:	4b65      	ldr	r3, [pc, #404]	; (80053a4 <HAL_ADC_ConfigChannel+0x684>)
 8005210:	4618      	mov	r0, r3
 8005212:	f7fe ffe3 	bl	80041dc <LL_ADC_GetCommonPathInternalCh>
 8005216:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a5e      	ldr	r2, [pc, #376]	; (8005398 <HAL_ADC_ConfigChannel+0x678>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d004      	beq.n	800522c <HAL_ADC_ConfigChannel+0x50c>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a5d      	ldr	r2, [pc, #372]	; (800539c <HAL_ADC_ConfigChannel+0x67c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d10e      	bne.n	800524a <HAL_ADC_ConfigChannel+0x52a>
 800522c:	485a      	ldr	r0, [pc, #360]	; (8005398 <HAL_ADC_ConfigChannel+0x678>)
 800522e:	f7ff f943 	bl	80044b8 <LL_ADC_IsEnabled>
 8005232:	4604      	mov	r4, r0
 8005234:	4859      	ldr	r0, [pc, #356]	; (800539c <HAL_ADC_ConfigChannel+0x67c>)
 8005236:	f7ff f93f 	bl	80044b8 <LL_ADC_IsEnabled>
 800523a:	4603      	mov	r3, r0
 800523c:	4323      	orrs	r3, r4
 800523e:	2b00      	cmp	r3, #0
 8005240:	bf0c      	ite	eq
 8005242:	2301      	moveq	r3, #1
 8005244:	2300      	movne	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	e008      	b.n	800525c <HAL_ADC_ConfigChannel+0x53c>
 800524a:	4857      	ldr	r0, [pc, #348]	; (80053a8 <HAL_ADC_ConfigChannel+0x688>)
 800524c:	f7ff f934 	bl	80044b8 <LL_ADC_IsEnabled>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	bf0c      	ite	eq
 8005256:	2301      	moveq	r3, #1
 8005258:	2300      	movne	r3, #0
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d07d      	beq.n	800535c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a51      	ldr	r2, [pc, #324]	; (80053ac <HAL_ADC_ConfigChannel+0x68c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d130      	bne.n	80052cc <HAL_ADC_ConfigChannel+0x5ac>
 800526a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d12b      	bne.n	80052cc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a4b      	ldr	r2, [pc, #300]	; (80053a8 <HAL_ADC_ConfigChannel+0x688>)
 800527a:	4293      	cmp	r3, r2
 800527c:	f040 8081 	bne.w	8005382 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a44      	ldr	r2, [pc, #272]	; (8005398 <HAL_ADC_ConfigChannel+0x678>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d004      	beq.n	8005294 <HAL_ADC_ConfigChannel+0x574>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a43      	ldr	r2, [pc, #268]	; (800539c <HAL_ADC_ConfigChannel+0x67c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d101      	bne.n	8005298 <HAL_ADC_ConfigChannel+0x578>
 8005294:	4a42      	ldr	r2, [pc, #264]	; (80053a0 <HAL_ADC_ConfigChannel+0x680>)
 8005296:	e000      	b.n	800529a <HAL_ADC_ConfigChannel+0x57a>
 8005298:	4a42      	ldr	r2, [pc, #264]	; (80053a4 <HAL_ADC_ConfigChannel+0x684>)
 800529a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052a0:	4619      	mov	r1, r3
 80052a2:	4610      	mov	r0, r2
 80052a4:	f7fe ff87 	bl	80041b6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052a8:	4b41      	ldr	r3, [pc, #260]	; (80053b0 <HAL_ADC_ConfigChannel+0x690>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	099b      	lsrs	r3, r3, #6
 80052ae:	4a41      	ldr	r2, [pc, #260]	; (80053b4 <HAL_ADC_ConfigChannel+0x694>)
 80052b0:	fba2 2303 	umull	r2, r3, r2, r3
 80052b4:	099b      	lsrs	r3, r3, #6
 80052b6:	3301      	adds	r3, #1
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80052bc:	e002      	b.n	80052c4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f9      	bne.n	80052be <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052ca:	e05a      	b.n	8005382 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a39      	ldr	r2, [pc, #228]	; (80053b8 <HAL_ADC_ConfigChannel+0x698>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d11e      	bne.n	8005314 <HAL_ADC_ConfigChannel+0x5f4>
 80052d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d119      	bne.n	8005314 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a30      	ldr	r2, [pc, #192]	; (80053a8 <HAL_ADC_ConfigChannel+0x688>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d14b      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a2a      	ldr	r2, [pc, #168]	; (8005398 <HAL_ADC_ConfigChannel+0x678>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d004      	beq.n	80052fe <HAL_ADC_ConfigChannel+0x5de>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a28      	ldr	r2, [pc, #160]	; (800539c <HAL_ADC_ConfigChannel+0x67c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d101      	bne.n	8005302 <HAL_ADC_ConfigChannel+0x5e2>
 80052fe:	4a28      	ldr	r2, [pc, #160]	; (80053a0 <HAL_ADC_ConfigChannel+0x680>)
 8005300:	e000      	b.n	8005304 <HAL_ADC_ConfigChannel+0x5e4>
 8005302:	4a28      	ldr	r2, [pc, #160]	; (80053a4 <HAL_ADC_ConfigChannel+0x684>)
 8005304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800530a:	4619      	mov	r1, r3
 800530c:	4610      	mov	r0, r2
 800530e:	f7fe ff52 	bl	80041b6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005312:	e036      	b.n	8005382 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a28      	ldr	r2, [pc, #160]	; (80053bc <HAL_ADC_ConfigChannel+0x69c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d131      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x662>
 800531e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005320:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d12c      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1e      	ldr	r2, [pc, #120]	; (80053a8 <HAL_ADC_ConfigChannel+0x688>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d127      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a18      	ldr	r2, [pc, #96]	; (8005398 <HAL_ADC_ConfigChannel+0x678>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d004      	beq.n	8005346 <HAL_ADC_ConfigChannel+0x626>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a16      	ldr	r2, [pc, #88]	; (800539c <HAL_ADC_ConfigChannel+0x67c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d101      	bne.n	800534a <HAL_ADC_ConfigChannel+0x62a>
 8005346:	4a16      	ldr	r2, [pc, #88]	; (80053a0 <HAL_ADC_ConfigChannel+0x680>)
 8005348:	e000      	b.n	800534c <HAL_ADC_ConfigChannel+0x62c>
 800534a:	4a16      	ldr	r2, [pc, #88]	; (80053a4 <HAL_ADC_ConfigChannel+0x684>)
 800534c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005352:	4619      	mov	r1, r3
 8005354:	4610      	mov	r0, r2
 8005356:	f7fe ff2e 	bl	80041b6 <LL_ADC_SetCommonPathInternalCh>
 800535a:	e012      	b.n	8005382 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005360:	f043 0220 	orr.w	r2, r3, #32
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800536e:	e008      	b.n	8005382 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005374:	f043 0220 	orr.w	r2, r3, #32
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800538a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800538e:	4618      	mov	r0, r3
 8005390:	3784      	adds	r7, #132	; 0x84
 8005392:	46bd      	mov	sp, r7
 8005394:	bd90      	pop	{r4, r7, pc}
 8005396:	bf00      	nop
 8005398:	40022000 	.word	0x40022000
 800539c:	40022100 	.word	0x40022100
 80053a0:	40022300 	.word	0x40022300
 80053a4:	58026300 	.word	0x58026300
 80053a8:	58026000 	.word	0x58026000
 80053ac:	cb840000 	.word	0xcb840000
 80053b0:	24000000 	.word	0x24000000
 80053b4:	053e2d63 	.word	0x053e2d63
 80053b8:	c7520000 	.word	0xc7520000
 80053bc:	cfb80000 	.word	0xcfb80000

080053c0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a7a      	ldr	r2, [pc, #488]	; (80055b8 <ADC_ConfigureBoostMode+0x1f8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d004      	beq.n	80053dc <ADC_ConfigureBoostMode+0x1c>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a79      	ldr	r2, [pc, #484]	; (80055bc <ADC_ConfigureBoostMode+0x1fc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d109      	bne.n	80053f0 <ADC_ConfigureBoostMode+0x30>
 80053dc:	4b78      	ldr	r3, [pc, #480]	; (80055c0 <ADC_ConfigureBoostMode+0x200>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	bf14      	ite	ne
 80053e8:	2301      	movne	r3, #1
 80053ea:	2300      	moveq	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	e008      	b.n	8005402 <ADC_ConfigureBoostMode+0x42>
 80053f0:	4b74      	ldr	r3, [pc, #464]	; (80055c4 <ADC_ConfigureBoostMode+0x204>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bf14      	ite	ne
 80053fc:	2301      	movne	r3, #1
 80053fe:	2300      	moveq	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d01c      	beq.n	8005440 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005406:	f004 fae1 	bl	80099cc <HAL_RCC_GetHCLKFreq>
 800540a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005414:	d010      	beq.n	8005438 <ADC_ConfigureBoostMode+0x78>
 8005416:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800541a:	d873      	bhi.n	8005504 <ADC_ConfigureBoostMode+0x144>
 800541c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005420:	d002      	beq.n	8005428 <ADC_ConfigureBoostMode+0x68>
 8005422:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005426:	d16d      	bne.n	8005504 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	0c1b      	lsrs	r3, r3, #16
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	fbb2 f3f3 	udiv	r3, r2, r3
 8005434:	60fb      	str	r3, [r7, #12]
        break;
 8005436:	e068      	b.n	800550a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	089b      	lsrs	r3, r3, #2
 800543c:	60fb      	str	r3, [r7, #12]
        break;
 800543e:	e064      	b.n	800550a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005440:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005444:	f04f 0100 	mov.w	r1, #0
 8005448:	f005 fd26 	bl	800ae98 <HAL_RCCEx_GetPeriphCLKFreq>
 800544c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005456:	d051      	beq.n	80054fc <ADC_ConfigureBoostMode+0x13c>
 8005458:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800545c:	d854      	bhi.n	8005508 <ADC_ConfigureBoostMode+0x148>
 800545e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005462:	d047      	beq.n	80054f4 <ADC_ConfigureBoostMode+0x134>
 8005464:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005468:	d84e      	bhi.n	8005508 <ADC_ConfigureBoostMode+0x148>
 800546a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800546e:	d03d      	beq.n	80054ec <ADC_ConfigureBoostMode+0x12c>
 8005470:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005474:	d848      	bhi.n	8005508 <ADC_ConfigureBoostMode+0x148>
 8005476:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800547a:	d033      	beq.n	80054e4 <ADC_ConfigureBoostMode+0x124>
 800547c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005480:	d842      	bhi.n	8005508 <ADC_ConfigureBoostMode+0x148>
 8005482:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005486:	d029      	beq.n	80054dc <ADC_ConfigureBoostMode+0x11c>
 8005488:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800548c:	d83c      	bhi.n	8005508 <ADC_ConfigureBoostMode+0x148>
 800548e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005492:	d01a      	beq.n	80054ca <ADC_ConfigureBoostMode+0x10a>
 8005494:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005498:	d836      	bhi.n	8005508 <ADC_ConfigureBoostMode+0x148>
 800549a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800549e:	d014      	beq.n	80054ca <ADC_ConfigureBoostMode+0x10a>
 80054a0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80054a4:	d830      	bhi.n	8005508 <ADC_ConfigureBoostMode+0x148>
 80054a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054aa:	d00e      	beq.n	80054ca <ADC_ConfigureBoostMode+0x10a>
 80054ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054b0:	d82a      	bhi.n	8005508 <ADC_ConfigureBoostMode+0x148>
 80054b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054b6:	d008      	beq.n	80054ca <ADC_ConfigureBoostMode+0x10a>
 80054b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054bc:	d824      	bhi.n	8005508 <ADC_ConfigureBoostMode+0x148>
 80054be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054c2:	d002      	beq.n	80054ca <ADC_ConfigureBoostMode+0x10a>
 80054c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054c8:	d11e      	bne.n	8005508 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	0c9b      	lsrs	r3, r3, #18
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d8:	60fb      	str	r3, [r7, #12]
        break;
 80054da:	e016      	b.n	800550a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	091b      	lsrs	r3, r3, #4
 80054e0:	60fb      	str	r3, [r7, #12]
        break;
 80054e2:	e012      	b.n	800550a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	095b      	lsrs	r3, r3, #5
 80054e8:	60fb      	str	r3, [r7, #12]
        break;
 80054ea:	e00e      	b.n	800550a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	099b      	lsrs	r3, r3, #6
 80054f0:	60fb      	str	r3, [r7, #12]
        break;
 80054f2:	e00a      	b.n	800550a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	09db      	lsrs	r3, r3, #7
 80054f8:	60fb      	str	r3, [r7, #12]
        break;
 80054fa:	e006      	b.n	800550a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	0a1b      	lsrs	r3, r3, #8
 8005500:	60fb      	str	r3, [r7, #12]
        break;
 8005502:	e002      	b.n	800550a <ADC_ConfigureBoostMode+0x14a>
        break;
 8005504:	bf00      	nop
 8005506:	e000      	b.n	800550a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005508:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800550a:	f7fe fe1f 	bl	800414c <HAL_GetREVID>
 800550e:	4603      	mov	r3, r0
 8005510:	f241 0203 	movw	r2, #4099	; 0x1003
 8005514:	4293      	cmp	r3, r2
 8005516:	d815      	bhi.n	8005544 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4a2b      	ldr	r2, [pc, #172]	; (80055c8 <ADC_ConfigureBoostMode+0x208>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d908      	bls.n	8005532 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800552e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005530:	e03e      	b.n	80055b0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005540:	609a      	str	r2, [r3, #8]
}
 8005542:	e035      	b.n	80055b0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	085b      	lsrs	r3, r3, #1
 8005548:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4a1f      	ldr	r2, [pc, #124]	; (80055cc <ADC_ConfigureBoostMode+0x20c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d808      	bhi.n	8005564 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005560:	609a      	str	r2, [r3, #8]
}
 8005562:	e025      	b.n	80055b0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4a1a      	ldr	r2, [pc, #104]	; (80055d0 <ADC_ConfigureBoostMode+0x210>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d80a      	bhi.n	8005582 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800557e:	609a      	str	r2, [r3, #8]
}
 8005580:	e016      	b.n	80055b0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4a13      	ldr	r2, [pc, #76]	; (80055d4 <ADC_ConfigureBoostMode+0x214>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d80a      	bhi.n	80055a0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800559c:	609a      	str	r2, [r3, #8]
}
 800559e:	e007      	b.n	80055b0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80055ae:	609a      	str	r2, [r3, #8]
}
 80055b0:	bf00      	nop
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40022000 	.word	0x40022000
 80055bc:	40022100 	.word	0x40022100
 80055c0:	40022300 	.word	0x40022300
 80055c4:	58026300 	.word	0x58026300
 80055c8:	01312d00 	.word	0x01312d00
 80055cc:	005f5e10 	.word	0x005f5e10
 80055d0:	00bebc20 	.word	0x00bebc20
 80055d4:	017d7840 	.word	0x017d7840

080055d8 <LL_ADC_IsEnabled>:
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <LL_ADC_IsEnabled+0x18>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <LL_ADC_IsEnabled+0x1a>
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <LL_ADC_REG_IsConversionOngoing>:
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b04      	cmp	r3, #4
 8005610:	d101      	bne.n	8005616 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005688:	b590      	push	{r4, r7, lr}
 800568a:	b09f      	sub	sp, #124	; 0x7c
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e0be      	b.n	8005824 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80056ae:	2300      	movs	r3, #0
 80056b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80056b2:	2300      	movs	r3, #0
 80056b4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a5c      	ldr	r2, [pc, #368]	; (800582c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d102      	bne.n	80056c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80056c0:	4b5b      	ldr	r3, [pc, #364]	; (8005830 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80056c2:	60bb      	str	r3, [r7, #8]
 80056c4:	e001      	b.n	80056ca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80056c6:	2300      	movs	r3, #0
 80056c8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10b      	bne.n	80056e8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d4:	f043 0220 	orr.w	r2, r3, #32
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e09d      	b.n	8005824 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff ff87 	bl	80055fe <LL_ADC_REG_IsConversionOngoing>
 80056f0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff ff81 	bl	80055fe <LL_ADC_REG_IsConversionOngoing>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d17f      	bne.n	8005802 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005704:	2b00      	cmp	r3, #0
 8005706:	d17c      	bne.n	8005802 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a47      	ldr	r2, [pc, #284]	; (800582c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d004      	beq.n	800571c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a46      	ldr	r2, [pc, #280]	; (8005830 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d101      	bne.n	8005720 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800571c:	4b45      	ldr	r3, [pc, #276]	; (8005834 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800571e:	e000      	b.n	8005722 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005720:	4b45      	ldr	r3, [pc, #276]	; (8005838 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005722:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d039      	beq.n	80057a0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800572c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	431a      	orrs	r2, r3
 800573a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a3a      	ldr	r2, [pc, #232]	; (800582c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d004      	beq.n	8005752 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a38      	ldr	r2, [pc, #224]	; (8005830 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d10e      	bne.n	8005770 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005752:	4836      	ldr	r0, [pc, #216]	; (800582c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005754:	f7ff ff40 	bl	80055d8 <LL_ADC_IsEnabled>
 8005758:	4604      	mov	r4, r0
 800575a:	4835      	ldr	r0, [pc, #212]	; (8005830 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800575c:	f7ff ff3c 	bl	80055d8 <LL_ADC_IsEnabled>
 8005760:	4603      	mov	r3, r0
 8005762:	4323      	orrs	r3, r4
 8005764:	2b00      	cmp	r3, #0
 8005766:	bf0c      	ite	eq
 8005768:	2301      	moveq	r3, #1
 800576a:	2300      	movne	r3, #0
 800576c:	b2db      	uxtb	r3, r3
 800576e:	e008      	b.n	8005782 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005770:	4832      	ldr	r0, [pc, #200]	; (800583c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005772:	f7ff ff31 	bl	80055d8 <LL_ADC_IsEnabled>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	bf0c      	ite	eq
 800577c:	2301      	moveq	r3, #1
 800577e:	2300      	movne	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d047      	beq.n	8005816 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005788:	689a      	ldr	r2, [r3, #8]
 800578a:	4b2d      	ldr	r3, [pc, #180]	; (8005840 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800578c:	4013      	ands	r3, r2
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	6811      	ldr	r1, [r2, #0]
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	6892      	ldr	r2, [r2, #8]
 8005796:	430a      	orrs	r2, r1
 8005798:	431a      	orrs	r2, r3
 800579a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800579e:	e03a      	b.n	8005816 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80057a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057aa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1e      	ldr	r2, [pc, #120]	; (800582c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d004      	beq.n	80057c0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1d      	ldr	r2, [pc, #116]	; (8005830 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d10e      	bne.n	80057de <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80057c0:	481a      	ldr	r0, [pc, #104]	; (800582c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80057c2:	f7ff ff09 	bl	80055d8 <LL_ADC_IsEnabled>
 80057c6:	4604      	mov	r4, r0
 80057c8:	4819      	ldr	r0, [pc, #100]	; (8005830 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80057ca:	f7ff ff05 	bl	80055d8 <LL_ADC_IsEnabled>
 80057ce:	4603      	mov	r3, r0
 80057d0:	4323      	orrs	r3, r4
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	bf0c      	ite	eq
 80057d6:	2301      	moveq	r3, #1
 80057d8:	2300      	movne	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	e008      	b.n	80057f0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80057de:	4817      	ldr	r0, [pc, #92]	; (800583c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80057e0:	f7ff fefa 	bl	80055d8 <LL_ADC_IsEnabled>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	bf0c      	ite	eq
 80057ea:	2301      	moveq	r3, #1
 80057ec:	2300      	movne	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d010      	beq.n	8005816 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80057f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	4b11      	ldr	r3, [pc, #68]	; (8005840 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80057fa:	4013      	ands	r3, r2
 80057fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057fe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005800:	e009      	b.n	8005816 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005806:	f043 0220 	orr.w	r2, r3, #32
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005814:	e000      	b.n	8005818 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005816:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005820:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005824:	4618      	mov	r0, r3
 8005826:	377c      	adds	r7, #124	; 0x7c
 8005828:	46bd      	mov	sp, r7
 800582a:	bd90      	pop	{r4, r7, pc}
 800582c:	40022000 	.word	0x40022000
 8005830:	40022100 	.word	0x40022100
 8005834:	40022300 	.word	0x40022300
 8005838:	58026300 	.word	0x58026300
 800583c:	58026000 	.word	0x58026000
 8005840:	fffff0e0 	.word	0xfffff0e0

08005844 <__NVIC_SetPriorityGrouping>:
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005854:	4b0b      	ldr	r3, [pc, #44]	; (8005884 <__NVIC_SetPriorityGrouping+0x40>)
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005860:	4013      	ands	r3, r2
 8005862:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800586c:	4b06      	ldr	r3, [pc, #24]	; (8005888 <__NVIC_SetPriorityGrouping+0x44>)
 800586e:	4313      	orrs	r3, r2
 8005870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005872:	4a04      	ldr	r2, [pc, #16]	; (8005884 <__NVIC_SetPriorityGrouping+0x40>)
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	60d3      	str	r3, [r2, #12]
}
 8005878:	bf00      	nop
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	e000ed00 	.word	0xe000ed00
 8005888:	05fa0000 	.word	0x05fa0000

0800588c <__NVIC_GetPriorityGrouping>:
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005890:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	0a1b      	lsrs	r3, r3, #8
 8005896:	f003 0307 	and.w	r3, r3, #7
}
 800589a:	4618      	mov	r0, r3
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	e000ed00 	.word	0xe000ed00

080058a8 <__NVIC_EnableIRQ>:
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80058b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	db0b      	blt.n	80058d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058ba:	88fb      	ldrh	r3, [r7, #6]
 80058bc:	f003 021f 	and.w	r2, r3, #31
 80058c0:	4907      	ldr	r1, [pc, #28]	; (80058e0 <__NVIC_EnableIRQ+0x38>)
 80058c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058c6:	095b      	lsrs	r3, r3, #5
 80058c8:	2001      	movs	r0, #1
 80058ca:	fa00 f202 	lsl.w	r2, r0, r2
 80058ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	e000e100 	.word	0xe000e100

080058e4 <__NVIC_SetPriority>:
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	4603      	mov	r3, r0
 80058ec:	6039      	str	r1, [r7, #0]
 80058ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80058f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	db0a      	blt.n	800590e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	490c      	ldr	r1, [pc, #48]	; (8005930 <__NVIC_SetPriority+0x4c>)
 80058fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005902:	0112      	lsls	r2, r2, #4
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	440b      	add	r3, r1
 8005908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800590c:	e00a      	b.n	8005924 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	b2da      	uxtb	r2, r3
 8005912:	4908      	ldr	r1, [pc, #32]	; (8005934 <__NVIC_SetPriority+0x50>)
 8005914:	88fb      	ldrh	r3, [r7, #6]
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	3b04      	subs	r3, #4
 800591c:	0112      	lsls	r2, r2, #4
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	440b      	add	r3, r1
 8005922:	761a      	strb	r2, [r3, #24]
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	e000e100 	.word	0xe000e100
 8005934:	e000ed00 	.word	0xe000ed00

08005938 <NVIC_EncodePriority>:
{
 8005938:	b480      	push	{r7}
 800593a:	b089      	sub	sp, #36	; 0x24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f1c3 0307 	rsb	r3, r3, #7
 8005952:	2b04      	cmp	r3, #4
 8005954:	bf28      	it	cs
 8005956:	2304      	movcs	r3, #4
 8005958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	3304      	adds	r3, #4
 800595e:	2b06      	cmp	r3, #6
 8005960:	d902      	bls.n	8005968 <NVIC_EncodePriority+0x30>
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	3b03      	subs	r3, #3
 8005966:	e000      	b.n	800596a <NVIC_EncodePriority+0x32>
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800596c:	f04f 32ff 	mov.w	r2, #4294967295
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	fa02 f303 	lsl.w	r3, r2, r3
 8005976:	43da      	mvns	r2, r3
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	401a      	ands	r2, r3
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005980:	f04f 31ff 	mov.w	r1, #4294967295
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	fa01 f303 	lsl.w	r3, r1, r3
 800598a:	43d9      	mvns	r1, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005990:	4313      	orrs	r3, r2
}
 8005992:	4618      	mov	r0, r3
 8005994:	3724      	adds	r7, #36	; 0x24
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
	...

080059a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059b0:	d301      	bcc.n	80059b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059b2:	2301      	movs	r3, #1
 80059b4:	e00f      	b.n	80059d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059b6:	4a0a      	ldr	r2, [pc, #40]	; (80059e0 <SysTick_Config+0x40>)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059be:	210f      	movs	r1, #15
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	f7ff ff8e 	bl	80058e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059c8:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <SysTick_Config+0x40>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059ce:	4b04      	ldr	r3, [pc, #16]	; (80059e0 <SysTick_Config+0x40>)
 80059d0:	2207      	movs	r2, #7
 80059d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	e000e010 	.word	0xe000e010

080059e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff ff29 	bl	8005844 <__NVIC_SetPriorityGrouping>
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b086      	sub	sp, #24
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	4603      	mov	r3, r0
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	607a      	str	r2, [r7, #4]
 8005a06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a08:	f7ff ff40 	bl	800588c <__NVIC_GetPriorityGrouping>
 8005a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	68b9      	ldr	r1, [r7, #8]
 8005a12:	6978      	ldr	r0, [r7, #20]
 8005a14:	f7ff ff90 	bl	8005938 <NVIC_EncodePriority>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a1e:	4611      	mov	r1, r2
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff ff5f 	bl	80058e4 <__NVIC_SetPriority>
}
 8005a26:	bf00      	nop
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b082      	sub	sp, #8
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	4603      	mov	r3, r0
 8005a36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff ff33 	bl	80058a8 <__NVIC_EnableIRQ>
}
 8005a42:	bf00      	nop
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b082      	sub	sp, #8
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff ffa4 	bl	80059a0 <SysTick_Config>
 8005a58:	4603      	mov	r3, r0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b082      	sub	sp, #8
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e014      	b.n	8005a9e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	791b      	ldrb	r3, [r3, #4]
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d105      	bne.n	8005a8a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7fb f8c7 	bl	8000c18 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	795b      	ldrb	r3, [r3, #5]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_DAC_ConfigChannel+0x18>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e12a      	b.n	8005d16 <HAL_DAC_ConfigChannel+0x26e>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2202      	movs	r2, #2
 8005aca:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	f040 8081 	bne.w	8005bd8 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005ad6:	f7fe fb09 	bl	80040ec <HAL_GetTick>
 8005ada:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d140      	bne.n	8005b64 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005ae2:	e018      	b.n	8005b16 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005ae4:	f7fe fb02 	bl	80040ec <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d911      	bls.n	8005b16 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005af8:	4b89      	ldr	r3, [pc, #548]	; (8005d20 <HAL_DAC_ConfigChannel+0x278>)
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f043 0208 	orr.w	r2, r3, #8
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2203      	movs	r2, #3
 8005b10:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e0ff      	b.n	8005d16 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b1c:	4b80      	ldr	r3, [pc, #512]	; (8005d20 <HAL_DAC_ConfigChannel+0x278>)
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1df      	bne.n	8005ae4 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8005b24:	2001      	movs	r0, #1
 8005b26:	f7fe faed 	bl	8004104 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	6992      	ldr	r2, [r2, #24]
 8005b32:	641a      	str	r2, [r3, #64]	; 0x40
 8005b34:	e023      	b.n	8005b7e <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005b36:	f7fe fad9 	bl	80040ec <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d90f      	bls.n	8005b64 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	da0a      	bge.n	8005b64 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f043 0208 	orr.w	r2, r3, #8
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2203      	movs	r2, #3
 8005b5e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e0d8      	b.n	8005d16 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	dbe3      	blt.n	8005b36 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8005b6e:	2001      	movs	r0, #1
 8005b70:	f7fe fac8 	bl	8004104 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	6992      	ldr	r2, [r2, #24]
 8005b7c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f003 0310 	and.w	r3, r3, #16
 8005b8a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b92:	43db      	mvns	r3, r3
 8005b94:	ea02 0103 	and.w	r1, r2, r3
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	69da      	ldr	r2, [r3, #28]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f003 0310 	and.w	r3, r3, #16
 8005ba2:	409a      	lsls	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	21ff      	movs	r1, #255	; 0xff
 8005bba:	fa01 f303 	lsl.w	r3, r1, r3
 8005bbe:	43db      	mvns	r3, r3
 8005bc0:	ea02 0103 	and.w	r1, r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	6a1a      	ldr	r2, [r3, #32]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f003 0310 	and.w	r3, r3, #16
 8005bce:	409a      	lsls	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d11d      	bne.n	8005c1c <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	221f      	movs	r2, #31
 8005bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f003 0310 	and.w	r3, r3, #16
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c22:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f003 0310 	and.w	r3, r3, #16
 8005c2a:	2207      	movs	r2, #7
 8005c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c30:	43db      	mvns	r3, r3
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4013      	ands	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d102      	bne.n	8005c46 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]
 8005c44:	e00f      	b.n	8005c66 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d102      	bne.n	8005c54 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	61fb      	str	r3, [r7, #28]
 8005c52:	e008      	b.n	8005c66 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d102      	bne.n	8005c62 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	61fb      	str	r3, [r7, #28]
 8005c60:	e001      	b.n	8005c66 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f003 0310 	and.w	r3, r3, #16
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6819      	ldr	r1, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f003 0310 	and.w	r3, r3, #16
 8005c9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	43da      	mvns	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	400a      	ands	r2, r1
 8005cac:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f003 0310 	and.w	r3, r3, #16
 8005cbc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f003 0310 	and.w	r3, r3, #16
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	fa02 f303 	lsl.w	r3, r2, r3
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6819      	ldr	r1, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f003 0310 	and.w	r3, r3, #16
 8005cf8:	22c0      	movs	r2, #192	; 0xc0
 8005cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfe:	43da      	mvns	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	400a      	ands	r2, r1
 8005d06:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3720      	adds	r7, #32
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	20008000 	.word	0x20008000

08005d24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005d2c:	f7fe f9de 	bl	80040ec <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e316      	b.n	800636a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a66      	ldr	r2, [pc, #408]	; (8005edc <HAL_DMA_Init+0x1b8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d04a      	beq.n	8005ddc <HAL_DMA_Init+0xb8>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a65      	ldr	r2, [pc, #404]	; (8005ee0 <HAL_DMA_Init+0x1bc>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d045      	beq.n	8005ddc <HAL_DMA_Init+0xb8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a63      	ldr	r2, [pc, #396]	; (8005ee4 <HAL_DMA_Init+0x1c0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d040      	beq.n	8005ddc <HAL_DMA_Init+0xb8>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a62      	ldr	r2, [pc, #392]	; (8005ee8 <HAL_DMA_Init+0x1c4>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d03b      	beq.n	8005ddc <HAL_DMA_Init+0xb8>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a60      	ldr	r2, [pc, #384]	; (8005eec <HAL_DMA_Init+0x1c8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d036      	beq.n	8005ddc <HAL_DMA_Init+0xb8>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a5f      	ldr	r2, [pc, #380]	; (8005ef0 <HAL_DMA_Init+0x1cc>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d031      	beq.n	8005ddc <HAL_DMA_Init+0xb8>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a5d      	ldr	r2, [pc, #372]	; (8005ef4 <HAL_DMA_Init+0x1d0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d02c      	beq.n	8005ddc <HAL_DMA_Init+0xb8>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a5c      	ldr	r2, [pc, #368]	; (8005ef8 <HAL_DMA_Init+0x1d4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d027      	beq.n	8005ddc <HAL_DMA_Init+0xb8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a5a      	ldr	r2, [pc, #360]	; (8005efc <HAL_DMA_Init+0x1d8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d022      	beq.n	8005ddc <HAL_DMA_Init+0xb8>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a59      	ldr	r2, [pc, #356]	; (8005f00 <HAL_DMA_Init+0x1dc>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d01d      	beq.n	8005ddc <HAL_DMA_Init+0xb8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a57      	ldr	r2, [pc, #348]	; (8005f04 <HAL_DMA_Init+0x1e0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d018      	beq.n	8005ddc <HAL_DMA_Init+0xb8>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a56      	ldr	r2, [pc, #344]	; (8005f08 <HAL_DMA_Init+0x1e4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d013      	beq.n	8005ddc <HAL_DMA_Init+0xb8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a54      	ldr	r2, [pc, #336]	; (8005f0c <HAL_DMA_Init+0x1e8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00e      	beq.n	8005ddc <HAL_DMA_Init+0xb8>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a53      	ldr	r2, [pc, #332]	; (8005f10 <HAL_DMA_Init+0x1ec>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d009      	beq.n	8005ddc <HAL_DMA_Init+0xb8>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a51      	ldr	r2, [pc, #324]	; (8005f14 <HAL_DMA_Init+0x1f0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <HAL_DMA_Init+0xb8>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a50      	ldr	r2, [pc, #320]	; (8005f18 <HAL_DMA_Init+0x1f4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d101      	bne.n	8005de0 <HAL_DMA_Init+0xbc>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <HAL_DMA_Init+0xbe>
 8005de0:	2300      	movs	r3, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 813b 	beq.w	800605e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a37      	ldr	r2, [pc, #220]	; (8005edc <HAL_DMA_Init+0x1b8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d04a      	beq.n	8005e98 <HAL_DMA_Init+0x174>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a36      	ldr	r2, [pc, #216]	; (8005ee0 <HAL_DMA_Init+0x1bc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d045      	beq.n	8005e98 <HAL_DMA_Init+0x174>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a34      	ldr	r2, [pc, #208]	; (8005ee4 <HAL_DMA_Init+0x1c0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d040      	beq.n	8005e98 <HAL_DMA_Init+0x174>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a33      	ldr	r2, [pc, #204]	; (8005ee8 <HAL_DMA_Init+0x1c4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d03b      	beq.n	8005e98 <HAL_DMA_Init+0x174>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a31      	ldr	r2, [pc, #196]	; (8005eec <HAL_DMA_Init+0x1c8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d036      	beq.n	8005e98 <HAL_DMA_Init+0x174>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a30      	ldr	r2, [pc, #192]	; (8005ef0 <HAL_DMA_Init+0x1cc>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d031      	beq.n	8005e98 <HAL_DMA_Init+0x174>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a2e      	ldr	r2, [pc, #184]	; (8005ef4 <HAL_DMA_Init+0x1d0>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d02c      	beq.n	8005e98 <HAL_DMA_Init+0x174>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a2d      	ldr	r2, [pc, #180]	; (8005ef8 <HAL_DMA_Init+0x1d4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d027      	beq.n	8005e98 <HAL_DMA_Init+0x174>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a2b      	ldr	r2, [pc, #172]	; (8005efc <HAL_DMA_Init+0x1d8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d022      	beq.n	8005e98 <HAL_DMA_Init+0x174>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a2a      	ldr	r2, [pc, #168]	; (8005f00 <HAL_DMA_Init+0x1dc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d01d      	beq.n	8005e98 <HAL_DMA_Init+0x174>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a28      	ldr	r2, [pc, #160]	; (8005f04 <HAL_DMA_Init+0x1e0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d018      	beq.n	8005e98 <HAL_DMA_Init+0x174>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a27      	ldr	r2, [pc, #156]	; (8005f08 <HAL_DMA_Init+0x1e4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d013      	beq.n	8005e98 <HAL_DMA_Init+0x174>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a25      	ldr	r2, [pc, #148]	; (8005f0c <HAL_DMA_Init+0x1e8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00e      	beq.n	8005e98 <HAL_DMA_Init+0x174>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a24      	ldr	r2, [pc, #144]	; (8005f10 <HAL_DMA_Init+0x1ec>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d009      	beq.n	8005e98 <HAL_DMA_Init+0x174>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a22      	ldr	r2, [pc, #136]	; (8005f14 <HAL_DMA_Init+0x1f0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d004      	beq.n	8005e98 <HAL_DMA_Init+0x174>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a21      	ldr	r2, [pc, #132]	; (8005f18 <HAL_DMA_Init+0x1f4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d108      	bne.n	8005eaa <HAL_DMA_Init+0x186>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0201 	bic.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	e007      	b.n	8005eba <HAL_DMA_Init+0x196>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0201 	bic.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005eba:	e02f      	b.n	8005f1c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ebc:	f7fe f916 	bl	80040ec <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b05      	cmp	r3, #5
 8005ec8:	d928      	bls.n	8005f1c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2203      	movs	r2, #3
 8005ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e246      	b.n	800636a <HAL_DMA_Init+0x646>
 8005edc:	40020010 	.word	0x40020010
 8005ee0:	40020028 	.word	0x40020028
 8005ee4:	40020040 	.word	0x40020040
 8005ee8:	40020058 	.word	0x40020058
 8005eec:	40020070 	.word	0x40020070
 8005ef0:	40020088 	.word	0x40020088
 8005ef4:	400200a0 	.word	0x400200a0
 8005ef8:	400200b8 	.word	0x400200b8
 8005efc:	40020410 	.word	0x40020410
 8005f00:	40020428 	.word	0x40020428
 8005f04:	40020440 	.word	0x40020440
 8005f08:	40020458 	.word	0x40020458
 8005f0c:	40020470 	.word	0x40020470
 8005f10:	40020488 	.word	0x40020488
 8005f14:	400204a0 	.word	0x400204a0
 8005f18:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1c8      	bne.n	8005ebc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	4b83      	ldr	r3, [pc, #524]	; (8006144 <HAL_DMA_Init+0x420>)
 8005f36:	4013      	ands	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005f42:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f5a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d107      	bne.n	8005f80 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005f80:	4b71      	ldr	r3, [pc, #452]	; (8006148 <HAL_DMA_Init+0x424>)
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	4b71      	ldr	r3, [pc, #452]	; (800614c <HAL_DMA_Init+0x428>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f8c:	d328      	bcc.n	8005fe0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	2b28      	cmp	r3, #40	; 0x28
 8005f94:	d903      	bls.n	8005f9e <HAL_DMA_Init+0x27a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f9c:	d917      	bls.n	8005fce <HAL_DMA_Init+0x2aa>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2b3e      	cmp	r3, #62	; 0x3e
 8005fa4:	d903      	bls.n	8005fae <HAL_DMA_Init+0x28a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b42      	cmp	r3, #66	; 0x42
 8005fac:	d90f      	bls.n	8005fce <HAL_DMA_Init+0x2aa>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b46      	cmp	r3, #70	; 0x46
 8005fb4:	d903      	bls.n	8005fbe <HAL_DMA_Init+0x29a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2b48      	cmp	r3, #72	; 0x48
 8005fbc:	d907      	bls.n	8005fce <HAL_DMA_Init+0x2aa>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b4e      	cmp	r3, #78	; 0x4e
 8005fc4:	d905      	bls.n	8005fd2 <HAL_DMA_Init+0x2ae>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2b52      	cmp	r3, #82	; 0x52
 8005fcc:	d801      	bhi.n	8005fd2 <HAL_DMA_Init+0x2ae>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e000      	b.n	8005fd4 <HAL_DMA_Init+0x2b0>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fde:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f023 0307 	bic.w	r3, r3, #7
 8005ff6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	2b04      	cmp	r3, #4
 8006008:	d117      	bne.n	800603a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00e      	beq.n	800603a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f001 f9b9 	bl	8007394 <DMA_CheckFifoParam>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d008      	beq.n	800603a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2240      	movs	r2, #64	; 0x40
 800602c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e197      	b.n	800636a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f001 f8f4 	bl	8007230 <DMA_CalcBaseAndBitshift>
 8006048:	4603      	mov	r3, r0
 800604a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006050:	f003 031f 	and.w	r3, r3, #31
 8006054:	223f      	movs	r2, #63	; 0x3f
 8006056:	409a      	lsls	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	609a      	str	r2, [r3, #8]
 800605c:	e0cd      	b.n	80061fa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a3b      	ldr	r2, [pc, #236]	; (8006150 <HAL_DMA_Init+0x42c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d022      	beq.n	80060ae <HAL_DMA_Init+0x38a>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a39      	ldr	r2, [pc, #228]	; (8006154 <HAL_DMA_Init+0x430>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d01d      	beq.n	80060ae <HAL_DMA_Init+0x38a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a38      	ldr	r2, [pc, #224]	; (8006158 <HAL_DMA_Init+0x434>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d018      	beq.n	80060ae <HAL_DMA_Init+0x38a>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a36      	ldr	r2, [pc, #216]	; (800615c <HAL_DMA_Init+0x438>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d013      	beq.n	80060ae <HAL_DMA_Init+0x38a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a35      	ldr	r2, [pc, #212]	; (8006160 <HAL_DMA_Init+0x43c>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00e      	beq.n	80060ae <HAL_DMA_Init+0x38a>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a33      	ldr	r2, [pc, #204]	; (8006164 <HAL_DMA_Init+0x440>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d009      	beq.n	80060ae <HAL_DMA_Init+0x38a>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a32      	ldr	r2, [pc, #200]	; (8006168 <HAL_DMA_Init+0x444>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d004      	beq.n	80060ae <HAL_DMA_Init+0x38a>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a30      	ldr	r2, [pc, #192]	; (800616c <HAL_DMA_Init+0x448>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d101      	bne.n	80060b2 <HAL_DMA_Init+0x38e>
 80060ae:	2301      	movs	r3, #1
 80060b0:	e000      	b.n	80060b4 <HAL_DMA_Init+0x390>
 80060b2:	2300      	movs	r3, #0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8097 	beq.w	80061e8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a24      	ldr	r2, [pc, #144]	; (8006150 <HAL_DMA_Init+0x42c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d021      	beq.n	8006108 <HAL_DMA_Init+0x3e4>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a22      	ldr	r2, [pc, #136]	; (8006154 <HAL_DMA_Init+0x430>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d01c      	beq.n	8006108 <HAL_DMA_Init+0x3e4>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a21      	ldr	r2, [pc, #132]	; (8006158 <HAL_DMA_Init+0x434>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d017      	beq.n	8006108 <HAL_DMA_Init+0x3e4>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a1f      	ldr	r2, [pc, #124]	; (800615c <HAL_DMA_Init+0x438>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d012      	beq.n	8006108 <HAL_DMA_Init+0x3e4>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1e      	ldr	r2, [pc, #120]	; (8006160 <HAL_DMA_Init+0x43c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00d      	beq.n	8006108 <HAL_DMA_Init+0x3e4>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a1c      	ldr	r2, [pc, #112]	; (8006164 <HAL_DMA_Init+0x440>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d008      	beq.n	8006108 <HAL_DMA_Init+0x3e4>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a1b      	ldr	r2, [pc, #108]	; (8006168 <HAL_DMA_Init+0x444>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d003      	beq.n	8006108 <HAL_DMA_Init+0x3e4>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a19      	ldr	r2, [pc, #100]	; (800616c <HAL_DMA_Init+0x448>)
 8006106:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4b13      	ldr	r3, [pc, #76]	; (8006170 <HAL_DMA_Init+0x44c>)
 8006124:	4013      	ands	r3, r2
 8006126:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2b40      	cmp	r3, #64	; 0x40
 800612e:	d021      	beq.n	8006174 <HAL_DMA_Init+0x450>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	2b80      	cmp	r3, #128	; 0x80
 8006136:	d102      	bne.n	800613e <HAL_DMA_Init+0x41a>
 8006138:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800613c:	e01b      	b.n	8006176 <HAL_DMA_Init+0x452>
 800613e:	2300      	movs	r3, #0
 8006140:	e019      	b.n	8006176 <HAL_DMA_Init+0x452>
 8006142:	bf00      	nop
 8006144:	fe10803f 	.word	0xfe10803f
 8006148:	5c001000 	.word	0x5c001000
 800614c:	ffff0000 	.word	0xffff0000
 8006150:	58025408 	.word	0x58025408
 8006154:	5802541c 	.word	0x5802541c
 8006158:	58025430 	.word	0x58025430
 800615c:	58025444 	.word	0x58025444
 8006160:	58025458 	.word	0x58025458
 8006164:	5802546c 	.word	0x5802546c
 8006168:	58025480 	.word	0x58025480
 800616c:	58025494 	.word	0x58025494
 8006170:	fffe000f 	.word	0xfffe000f
 8006174:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	68d2      	ldr	r2, [r2, #12]
 800617a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800617c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006184:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800618c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006194:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800619c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80061a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	4b6e      	ldr	r3, [pc, #440]	; (8006374 <HAL_DMA_Init+0x650>)
 80061bc:	4413      	add	r3, r2
 80061be:	4a6e      	ldr	r2, [pc, #440]	; (8006378 <HAL_DMA_Init+0x654>)
 80061c0:	fba2 2303 	umull	r2, r3, r2, r3
 80061c4:	091b      	lsrs	r3, r3, #4
 80061c6:	009a      	lsls	r2, r3, #2
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f001 f82f 	bl	8007230 <DMA_CalcBaseAndBitshift>
 80061d2:	4603      	mov	r3, r0
 80061d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061da:	f003 031f 	and.w	r3, r3, #31
 80061de:	2201      	movs	r2, #1
 80061e0:	409a      	lsls	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	605a      	str	r2, [r3, #4]
 80061e6:	e008      	b.n	80061fa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2240      	movs	r2, #64	; 0x40
 80061ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2203      	movs	r2, #3
 80061f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e0b7      	b.n	800636a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a5f      	ldr	r2, [pc, #380]	; (800637c <HAL_DMA_Init+0x658>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d072      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a5d      	ldr	r2, [pc, #372]	; (8006380 <HAL_DMA_Init+0x65c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d06d      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a5c      	ldr	r2, [pc, #368]	; (8006384 <HAL_DMA_Init+0x660>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d068      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a5a      	ldr	r2, [pc, #360]	; (8006388 <HAL_DMA_Init+0x664>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d063      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a59      	ldr	r2, [pc, #356]	; (800638c <HAL_DMA_Init+0x668>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d05e      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a57      	ldr	r2, [pc, #348]	; (8006390 <HAL_DMA_Init+0x66c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d059      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a56      	ldr	r2, [pc, #344]	; (8006394 <HAL_DMA_Init+0x670>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d054      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a54      	ldr	r2, [pc, #336]	; (8006398 <HAL_DMA_Init+0x674>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d04f      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a53      	ldr	r2, [pc, #332]	; (800639c <HAL_DMA_Init+0x678>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d04a      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a51      	ldr	r2, [pc, #324]	; (80063a0 <HAL_DMA_Init+0x67c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d045      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a50      	ldr	r2, [pc, #320]	; (80063a4 <HAL_DMA_Init+0x680>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d040      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a4e      	ldr	r2, [pc, #312]	; (80063a8 <HAL_DMA_Init+0x684>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d03b      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a4d      	ldr	r2, [pc, #308]	; (80063ac <HAL_DMA_Init+0x688>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d036      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a4b      	ldr	r2, [pc, #300]	; (80063b0 <HAL_DMA_Init+0x68c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d031      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a4a      	ldr	r2, [pc, #296]	; (80063b4 <HAL_DMA_Init+0x690>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d02c      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a48      	ldr	r2, [pc, #288]	; (80063b8 <HAL_DMA_Init+0x694>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d027      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a47      	ldr	r2, [pc, #284]	; (80063bc <HAL_DMA_Init+0x698>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d022      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a45      	ldr	r2, [pc, #276]	; (80063c0 <HAL_DMA_Init+0x69c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d01d      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a44      	ldr	r2, [pc, #272]	; (80063c4 <HAL_DMA_Init+0x6a0>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d018      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a42      	ldr	r2, [pc, #264]	; (80063c8 <HAL_DMA_Init+0x6a4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d013      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a41      	ldr	r2, [pc, #260]	; (80063cc <HAL_DMA_Init+0x6a8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00e      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a3f      	ldr	r2, [pc, #252]	; (80063d0 <HAL_DMA_Init+0x6ac>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d009      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a3e      	ldr	r2, [pc, #248]	; (80063d4 <HAL_DMA_Init+0x6b0>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d004      	beq.n	80062ea <HAL_DMA_Init+0x5c6>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a3c      	ldr	r2, [pc, #240]	; (80063d8 <HAL_DMA_Init+0x6b4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d101      	bne.n	80062ee <HAL_DMA_Init+0x5ca>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e000      	b.n	80062f0 <HAL_DMA_Init+0x5cc>
 80062ee:	2300      	movs	r3, #0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d032      	beq.n	800635a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f001 f8c9 	bl	800748c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b80      	cmp	r3, #128	; 0x80
 8006300:	d102      	bne.n	8006308 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800631c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d010      	beq.n	8006348 <HAL_DMA_Init+0x624>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b08      	cmp	r3, #8
 800632c:	d80c      	bhi.n	8006348 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f001 f946 	bl	80075c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006344:	605a      	str	r2, [r3, #4]
 8006346:	e008      	b.n	800635a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	a7fdabf8 	.word	0xa7fdabf8
 8006378:	cccccccd 	.word	0xcccccccd
 800637c:	40020010 	.word	0x40020010
 8006380:	40020028 	.word	0x40020028
 8006384:	40020040 	.word	0x40020040
 8006388:	40020058 	.word	0x40020058
 800638c:	40020070 	.word	0x40020070
 8006390:	40020088 	.word	0x40020088
 8006394:	400200a0 	.word	0x400200a0
 8006398:	400200b8 	.word	0x400200b8
 800639c:	40020410 	.word	0x40020410
 80063a0:	40020428 	.word	0x40020428
 80063a4:	40020440 	.word	0x40020440
 80063a8:	40020458 	.word	0x40020458
 80063ac:	40020470 	.word	0x40020470
 80063b0:	40020488 	.word	0x40020488
 80063b4:	400204a0 	.word	0x400204a0
 80063b8:	400204b8 	.word	0x400204b8
 80063bc:	58025408 	.word	0x58025408
 80063c0:	5802541c 	.word	0x5802541c
 80063c4:	58025430 	.word	0x58025430
 80063c8:	58025444 	.word	0x58025444
 80063cc:	58025458 	.word	0x58025458
 80063d0:	5802546c 	.word	0x5802546c
 80063d4:	58025480 	.word	0x58025480
 80063d8:	58025494 	.word	0x58025494

080063dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	; 0x28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063e8:	4b67      	ldr	r3, [pc, #412]	; (8006588 <HAL_DMA_IRQHandler+0x1ac>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a67      	ldr	r2, [pc, #412]	; (800658c <HAL_DMA_IRQHandler+0x1b0>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	0a9b      	lsrs	r3, r3, #10
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006400:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a5f      	ldr	r2, [pc, #380]	; (8006590 <HAL_DMA_IRQHandler+0x1b4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d04a      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a5d      	ldr	r2, [pc, #372]	; (8006594 <HAL_DMA_IRQHandler+0x1b8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d045      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a5c      	ldr	r2, [pc, #368]	; (8006598 <HAL_DMA_IRQHandler+0x1bc>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d040      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a5a      	ldr	r2, [pc, #360]	; (800659c <HAL_DMA_IRQHandler+0x1c0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d03b      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a59      	ldr	r2, [pc, #356]	; (80065a0 <HAL_DMA_IRQHandler+0x1c4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d036      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a57      	ldr	r2, [pc, #348]	; (80065a4 <HAL_DMA_IRQHandler+0x1c8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d031      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a56      	ldr	r2, [pc, #344]	; (80065a8 <HAL_DMA_IRQHandler+0x1cc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d02c      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a54      	ldr	r2, [pc, #336]	; (80065ac <HAL_DMA_IRQHandler+0x1d0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d027      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a53      	ldr	r2, [pc, #332]	; (80065b0 <HAL_DMA_IRQHandler+0x1d4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d022      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a51      	ldr	r2, [pc, #324]	; (80065b4 <HAL_DMA_IRQHandler+0x1d8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d01d      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a50      	ldr	r2, [pc, #320]	; (80065b8 <HAL_DMA_IRQHandler+0x1dc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d018      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a4e      	ldr	r2, [pc, #312]	; (80065bc <HAL_DMA_IRQHandler+0x1e0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a4d      	ldr	r2, [pc, #308]	; (80065c0 <HAL_DMA_IRQHandler+0x1e4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00e      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a4b      	ldr	r2, [pc, #300]	; (80065c4 <HAL_DMA_IRQHandler+0x1e8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d009      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a4a      	ldr	r2, [pc, #296]	; (80065c8 <HAL_DMA_IRQHandler+0x1ec>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d004      	beq.n	80064ae <HAL_DMA_IRQHandler+0xd2>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a48      	ldr	r2, [pc, #288]	; (80065cc <HAL_DMA_IRQHandler+0x1f0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d101      	bne.n	80064b2 <HAL_DMA_IRQHandler+0xd6>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <HAL_DMA_IRQHandler+0xd8>
 80064b2:	2300      	movs	r3, #0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 842b 	beq.w	8006d10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2208      	movs	r2, #8
 80064c4:	409a      	lsls	r2, r3
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	4013      	ands	r3, r2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 80a2 	beq.w	8006614 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a2e      	ldr	r2, [pc, #184]	; (8006590 <HAL_DMA_IRQHandler+0x1b4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d04a      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a2d      	ldr	r2, [pc, #180]	; (8006594 <HAL_DMA_IRQHandler+0x1b8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d045      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a2b      	ldr	r2, [pc, #172]	; (8006598 <HAL_DMA_IRQHandler+0x1bc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d040      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a2a      	ldr	r2, [pc, #168]	; (800659c <HAL_DMA_IRQHandler+0x1c0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d03b      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a28      	ldr	r2, [pc, #160]	; (80065a0 <HAL_DMA_IRQHandler+0x1c4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d036      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a27      	ldr	r2, [pc, #156]	; (80065a4 <HAL_DMA_IRQHandler+0x1c8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d031      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a25      	ldr	r2, [pc, #148]	; (80065a8 <HAL_DMA_IRQHandler+0x1cc>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d02c      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a24      	ldr	r2, [pc, #144]	; (80065ac <HAL_DMA_IRQHandler+0x1d0>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d027      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a22      	ldr	r2, [pc, #136]	; (80065b0 <HAL_DMA_IRQHandler+0x1d4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d022      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a21      	ldr	r2, [pc, #132]	; (80065b4 <HAL_DMA_IRQHandler+0x1d8>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d01d      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a1f      	ldr	r2, [pc, #124]	; (80065b8 <HAL_DMA_IRQHandler+0x1dc>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d018      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a1e      	ldr	r2, [pc, #120]	; (80065bc <HAL_DMA_IRQHandler+0x1e0>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d013      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a1c      	ldr	r2, [pc, #112]	; (80065c0 <HAL_DMA_IRQHandler+0x1e4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00e      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a1b      	ldr	r2, [pc, #108]	; (80065c4 <HAL_DMA_IRQHandler+0x1e8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d009      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a19      	ldr	r2, [pc, #100]	; (80065c8 <HAL_DMA_IRQHandler+0x1ec>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d004      	beq.n	8006570 <HAL_DMA_IRQHandler+0x194>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a18      	ldr	r2, [pc, #96]	; (80065cc <HAL_DMA_IRQHandler+0x1f0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d12f      	bne.n	80065d0 <HAL_DMA_IRQHandler+0x1f4>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0304 	and.w	r3, r3, #4
 800657a:	2b00      	cmp	r3, #0
 800657c:	bf14      	ite	ne
 800657e:	2301      	movne	r3, #1
 8006580:	2300      	moveq	r3, #0
 8006582:	b2db      	uxtb	r3, r3
 8006584:	e02e      	b.n	80065e4 <HAL_DMA_IRQHandler+0x208>
 8006586:	bf00      	nop
 8006588:	24000000 	.word	0x24000000
 800658c:	1b4e81b5 	.word	0x1b4e81b5
 8006590:	40020010 	.word	0x40020010
 8006594:	40020028 	.word	0x40020028
 8006598:	40020040 	.word	0x40020040
 800659c:	40020058 	.word	0x40020058
 80065a0:	40020070 	.word	0x40020070
 80065a4:	40020088 	.word	0x40020088
 80065a8:	400200a0 	.word	0x400200a0
 80065ac:	400200b8 	.word	0x400200b8
 80065b0:	40020410 	.word	0x40020410
 80065b4:	40020428 	.word	0x40020428
 80065b8:	40020440 	.word	0x40020440
 80065bc:	40020458 	.word	0x40020458
 80065c0:	40020470 	.word	0x40020470
 80065c4:	40020488 	.word	0x40020488
 80065c8:	400204a0 	.word	0x400204a0
 80065cc:	400204b8 	.word	0x400204b8
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bf14      	ite	ne
 80065de:	2301      	movne	r3, #1
 80065e0:	2300      	moveq	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d015      	beq.n	8006614 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0204 	bic.w	r2, r2, #4
 80065f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fc:	f003 031f 	and.w	r3, r3, #31
 8006600:	2208      	movs	r2, #8
 8006602:	409a      	lsls	r2, r3
 8006604:	6a3b      	ldr	r3, [r7, #32]
 8006606:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660c:	f043 0201 	orr.w	r2, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006618:	f003 031f 	and.w	r3, r3, #31
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	fa22 f303 	lsr.w	r3, r2, r3
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d06e      	beq.n	8006708 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a69      	ldr	r2, [pc, #420]	; (80067d4 <HAL_DMA_IRQHandler+0x3f8>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d04a      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a67      	ldr	r2, [pc, #412]	; (80067d8 <HAL_DMA_IRQHandler+0x3fc>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d045      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a66      	ldr	r2, [pc, #408]	; (80067dc <HAL_DMA_IRQHandler+0x400>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d040      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a64      	ldr	r2, [pc, #400]	; (80067e0 <HAL_DMA_IRQHandler+0x404>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d03b      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a63      	ldr	r2, [pc, #396]	; (80067e4 <HAL_DMA_IRQHandler+0x408>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d036      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a61      	ldr	r2, [pc, #388]	; (80067e8 <HAL_DMA_IRQHandler+0x40c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d031      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a60      	ldr	r2, [pc, #384]	; (80067ec <HAL_DMA_IRQHandler+0x410>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d02c      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a5e      	ldr	r2, [pc, #376]	; (80067f0 <HAL_DMA_IRQHandler+0x414>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d027      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a5d      	ldr	r2, [pc, #372]	; (80067f4 <HAL_DMA_IRQHandler+0x418>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d022      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a5b      	ldr	r2, [pc, #364]	; (80067f8 <HAL_DMA_IRQHandler+0x41c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d01d      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a5a      	ldr	r2, [pc, #360]	; (80067fc <HAL_DMA_IRQHandler+0x420>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d018      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a58      	ldr	r2, [pc, #352]	; (8006800 <HAL_DMA_IRQHandler+0x424>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d013      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a57      	ldr	r2, [pc, #348]	; (8006804 <HAL_DMA_IRQHandler+0x428>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d00e      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a55      	ldr	r2, [pc, #340]	; (8006808 <HAL_DMA_IRQHandler+0x42c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d009      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a54      	ldr	r2, [pc, #336]	; (800680c <HAL_DMA_IRQHandler+0x430>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d004      	beq.n	80066ca <HAL_DMA_IRQHandler+0x2ee>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a52      	ldr	r2, [pc, #328]	; (8006810 <HAL_DMA_IRQHandler+0x434>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d10a      	bne.n	80066e0 <HAL_DMA_IRQHandler+0x304>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	bf14      	ite	ne
 80066d8:	2301      	movne	r3, #1
 80066da:	2300      	moveq	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	e003      	b.n	80066e8 <HAL_DMA_IRQHandler+0x30c>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2300      	movs	r3, #0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00d      	beq.n	8006708 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f0:	f003 031f 	and.w	r3, r3, #31
 80066f4:	2201      	movs	r2, #1
 80066f6:	409a      	lsls	r2, r3
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006700:	f043 0202 	orr.w	r2, r3, #2
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800670c:	f003 031f 	and.w	r3, r3, #31
 8006710:	2204      	movs	r2, #4
 8006712:	409a      	lsls	r2, r3
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	4013      	ands	r3, r2
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 808f 	beq.w	800683c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a2c      	ldr	r2, [pc, #176]	; (80067d4 <HAL_DMA_IRQHandler+0x3f8>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d04a      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a2a      	ldr	r2, [pc, #168]	; (80067d8 <HAL_DMA_IRQHandler+0x3fc>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d045      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a29      	ldr	r2, [pc, #164]	; (80067dc <HAL_DMA_IRQHandler+0x400>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d040      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a27      	ldr	r2, [pc, #156]	; (80067e0 <HAL_DMA_IRQHandler+0x404>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d03b      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a26      	ldr	r2, [pc, #152]	; (80067e4 <HAL_DMA_IRQHandler+0x408>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d036      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a24      	ldr	r2, [pc, #144]	; (80067e8 <HAL_DMA_IRQHandler+0x40c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d031      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a23      	ldr	r2, [pc, #140]	; (80067ec <HAL_DMA_IRQHandler+0x410>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d02c      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a21      	ldr	r2, [pc, #132]	; (80067f0 <HAL_DMA_IRQHandler+0x414>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d027      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a20      	ldr	r2, [pc, #128]	; (80067f4 <HAL_DMA_IRQHandler+0x418>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d022      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a1e      	ldr	r2, [pc, #120]	; (80067f8 <HAL_DMA_IRQHandler+0x41c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d01d      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a1d      	ldr	r2, [pc, #116]	; (80067fc <HAL_DMA_IRQHandler+0x420>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d018      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1b      	ldr	r2, [pc, #108]	; (8006800 <HAL_DMA_IRQHandler+0x424>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d013      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a1a      	ldr	r2, [pc, #104]	; (8006804 <HAL_DMA_IRQHandler+0x428>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00e      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a18      	ldr	r2, [pc, #96]	; (8006808 <HAL_DMA_IRQHandler+0x42c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d009      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a17      	ldr	r2, [pc, #92]	; (800680c <HAL_DMA_IRQHandler+0x430>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d004      	beq.n	80067be <HAL_DMA_IRQHandler+0x3e2>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a15      	ldr	r2, [pc, #84]	; (8006810 <HAL_DMA_IRQHandler+0x434>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d12a      	bne.n	8006814 <HAL_DMA_IRQHandler+0x438>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	bf14      	ite	ne
 80067cc:	2301      	movne	r3, #1
 80067ce:	2300      	moveq	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	e023      	b.n	800681c <HAL_DMA_IRQHandler+0x440>
 80067d4:	40020010 	.word	0x40020010
 80067d8:	40020028 	.word	0x40020028
 80067dc:	40020040 	.word	0x40020040
 80067e0:	40020058 	.word	0x40020058
 80067e4:	40020070 	.word	0x40020070
 80067e8:	40020088 	.word	0x40020088
 80067ec:	400200a0 	.word	0x400200a0
 80067f0:	400200b8 	.word	0x400200b8
 80067f4:	40020410 	.word	0x40020410
 80067f8:	40020428 	.word	0x40020428
 80067fc:	40020440 	.word	0x40020440
 8006800:	40020458 	.word	0x40020458
 8006804:	40020470 	.word	0x40020470
 8006808:	40020488 	.word	0x40020488
 800680c:	400204a0 	.word	0x400204a0
 8006810:	400204b8 	.word	0x400204b8
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2300      	movs	r3, #0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00d      	beq.n	800683c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006824:	f003 031f 	and.w	r3, r3, #31
 8006828:	2204      	movs	r2, #4
 800682a:	409a      	lsls	r2, r3
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006834:	f043 0204 	orr.w	r2, r3, #4
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006840:	f003 031f 	and.w	r3, r3, #31
 8006844:	2210      	movs	r2, #16
 8006846:	409a      	lsls	r2, r3
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 80a6 	beq.w	800699e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a85      	ldr	r2, [pc, #532]	; (8006a6c <HAL_DMA_IRQHandler+0x690>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d04a      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a83      	ldr	r2, [pc, #524]	; (8006a70 <HAL_DMA_IRQHandler+0x694>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d045      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a82      	ldr	r2, [pc, #520]	; (8006a74 <HAL_DMA_IRQHandler+0x698>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d040      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a80      	ldr	r2, [pc, #512]	; (8006a78 <HAL_DMA_IRQHandler+0x69c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d03b      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a7f      	ldr	r2, [pc, #508]	; (8006a7c <HAL_DMA_IRQHandler+0x6a0>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d036      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a7d      	ldr	r2, [pc, #500]	; (8006a80 <HAL_DMA_IRQHandler+0x6a4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d031      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a7c      	ldr	r2, [pc, #496]	; (8006a84 <HAL_DMA_IRQHandler+0x6a8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d02c      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a7a      	ldr	r2, [pc, #488]	; (8006a88 <HAL_DMA_IRQHandler+0x6ac>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d027      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a79      	ldr	r2, [pc, #484]	; (8006a8c <HAL_DMA_IRQHandler+0x6b0>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d022      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a77      	ldr	r2, [pc, #476]	; (8006a90 <HAL_DMA_IRQHandler+0x6b4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d01d      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a76      	ldr	r2, [pc, #472]	; (8006a94 <HAL_DMA_IRQHandler+0x6b8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d018      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a74      	ldr	r2, [pc, #464]	; (8006a98 <HAL_DMA_IRQHandler+0x6bc>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d013      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a73      	ldr	r2, [pc, #460]	; (8006a9c <HAL_DMA_IRQHandler+0x6c0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d00e      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a71      	ldr	r2, [pc, #452]	; (8006aa0 <HAL_DMA_IRQHandler+0x6c4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d009      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a70      	ldr	r2, [pc, #448]	; (8006aa4 <HAL_DMA_IRQHandler+0x6c8>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d004      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x516>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a6e      	ldr	r2, [pc, #440]	; (8006aa8 <HAL_DMA_IRQHandler+0x6cc>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d10a      	bne.n	8006908 <HAL_DMA_IRQHandler+0x52c>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	bf14      	ite	ne
 8006900:	2301      	movne	r3, #1
 8006902:	2300      	moveq	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	e009      	b.n	800691c <HAL_DMA_IRQHandler+0x540>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0304 	and.w	r3, r3, #4
 8006912:	2b00      	cmp	r3, #0
 8006914:	bf14      	ite	ne
 8006916:	2301      	movne	r3, #1
 8006918:	2300      	moveq	r3, #0
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d03e      	beq.n	800699e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006924:	f003 031f 	and.w	r3, r3, #31
 8006928:	2210      	movs	r2, #16
 800692a:	409a      	lsls	r2, r3
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d018      	beq.n	8006970 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d108      	bne.n	800695e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006950:	2b00      	cmp	r3, #0
 8006952:	d024      	beq.n	800699e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	4798      	blx	r3
 800695c:	e01f      	b.n	800699e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006962:	2b00      	cmp	r3, #0
 8006964:	d01b      	beq.n	800699e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	4798      	blx	r3
 800696e:	e016      	b.n	800699e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697a:	2b00      	cmp	r3, #0
 800697c:	d107      	bne.n	800698e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 0208 	bic.w	r2, r2, #8
 800698c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069a2:	f003 031f 	and.w	r3, r3, #31
 80069a6:	2220      	movs	r2, #32
 80069a8:	409a      	lsls	r2, r3
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	4013      	ands	r3, r2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 8110 	beq.w	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a2c      	ldr	r2, [pc, #176]	; (8006a6c <HAL_DMA_IRQHandler+0x690>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d04a      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a2b      	ldr	r2, [pc, #172]	; (8006a70 <HAL_DMA_IRQHandler+0x694>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d045      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a29      	ldr	r2, [pc, #164]	; (8006a74 <HAL_DMA_IRQHandler+0x698>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d040      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a28      	ldr	r2, [pc, #160]	; (8006a78 <HAL_DMA_IRQHandler+0x69c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d03b      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a26      	ldr	r2, [pc, #152]	; (8006a7c <HAL_DMA_IRQHandler+0x6a0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d036      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a25      	ldr	r2, [pc, #148]	; (8006a80 <HAL_DMA_IRQHandler+0x6a4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d031      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a23      	ldr	r2, [pc, #140]	; (8006a84 <HAL_DMA_IRQHandler+0x6a8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d02c      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a22      	ldr	r2, [pc, #136]	; (8006a88 <HAL_DMA_IRQHandler+0x6ac>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d027      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a20      	ldr	r2, [pc, #128]	; (8006a8c <HAL_DMA_IRQHandler+0x6b0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d022      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1f      	ldr	r2, [pc, #124]	; (8006a90 <HAL_DMA_IRQHandler+0x6b4>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d01d      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1d      	ldr	r2, [pc, #116]	; (8006a94 <HAL_DMA_IRQHandler+0x6b8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d018      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a1c      	ldr	r2, [pc, #112]	; (8006a98 <HAL_DMA_IRQHandler+0x6bc>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d013      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a1a      	ldr	r2, [pc, #104]	; (8006a9c <HAL_DMA_IRQHandler+0x6c0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00e      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a19      	ldr	r2, [pc, #100]	; (8006aa0 <HAL_DMA_IRQHandler+0x6c4>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d009      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a17      	ldr	r2, [pc, #92]	; (8006aa4 <HAL_DMA_IRQHandler+0x6c8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d004      	beq.n	8006a54 <HAL_DMA_IRQHandler+0x678>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a16      	ldr	r2, [pc, #88]	; (8006aa8 <HAL_DMA_IRQHandler+0x6cc>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d12b      	bne.n	8006aac <HAL_DMA_IRQHandler+0x6d0>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0310 	and.w	r3, r3, #16
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	bf14      	ite	ne
 8006a62:	2301      	movne	r3, #1
 8006a64:	2300      	moveq	r3, #0
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	e02a      	b.n	8006ac0 <HAL_DMA_IRQHandler+0x6e4>
 8006a6a:	bf00      	nop
 8006a6c:	40020010 	.word	0x40020010
 8006a70:	40020028 	.word	0x40020028
 8006a74:	40020040 	.word	0x40020040
 8006a78:	40020058 	.word	0x40020058
 8006a7c:	40020070 	.word	0x40020070
 8006a80:	40020088 	.word	0x40020088
 8006a84:	400200a0 	.word	0x400200a0
 8006a88:	400200b8 	.word	0x400200b8
 8006a8c:	40020410 	.word	0x40020410
 8006a90:	40020428 	.word	0x40020428
 8006a94:	40020440 	.word	0x40020440
 8006a98:	40020458 	.word	0x40020458
 8006a9c:	40020470 	.word	0x40020470
 8006aa0:	40020488 	.word	0x40020488
 8006aa4:	400204a0 	.word	0x400204a0
 8006aa8:	400204b8 	.word	0x400204b8
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	bf14      	ite	ne
 8006aba:	2301      	movne	r3, #1
 8006abc:	2300      	moveq	r3, #0
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8087 	beq.w	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2220      	movs	r2, #32
 8006ad0:	409a      	lsls	r2, r3
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d139      	bne.n	8006b56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 0216 	bic.w	r2, r2, #22
 8006af0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	695a      	ldr	r2, [r3, #20]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d103      	bne.n	8006b12 <HAL_DMA_IRQHandler+0x736>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d007      	beq.n	8006b22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0208 	bic.w	r2, r2, #8
 8006b20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b26:	f003 031f 	and.w	r3, r3, #31
 8006b2a:	223f      	movs	r2, #63	; 0x3f
 8006b2c:	409a      	lsls	r2, r3
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f000 834a 	beq.w	80071e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	4798      	blx	r3
          }
          return;
 8006b54:	e344      	b.n	80071e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d018      	beq.n	8006b96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d108      	bne.n	8006b84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d02c      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	4798      	blx	r3
 8006b82:	e027      	b.n	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d023      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	4798      	blx	r3
 8006b94:	e01e      	b.n	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10f      	bne.n	8006bc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0210 	bic.w	r2, r2, #16
 8006bb2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 8306 	beq.w	80071ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 8088 	beq.w	8006cfc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2204      	movs	r2, #4
 8006bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a7a      	ldr	r2, [pc, #488]	; (8006de4 <HAL_DMA_IRQHandler+0xa08>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d04a      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a79      	ldr	r2, [pc, #484]	; (8006de8 <HAL_DMA_IRQHandler+0xa0c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d045      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a77      	ldr	r2, [pc, #476]	; (8006dec <HAL_DMA_IRQHandler+0xa10>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d040      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a76      	ldr	r2, [pc, #472]	; (8006df0 <HAL_DMA_IRQHandler+0xa14>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d03b      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a74      	ldr	r2, [pc, #464]	; (8006df4 <HAL_DMA_IRQHandler+0xa18>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d036      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a73      	ldr	r2, [pc, #460]	; (8006df8 <HAL_DMA_IRQHandler+0xa1c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d031      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a71      	ldr	r2, [pc, #452]	; (8006dfc <HAL_DMA_IRQHandler+0xa20>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d02c      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a70      	ldr	r2, [pc, #448]	; (8006e00 <HAL_DMA_IRQHandler+0xa24>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d027      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a6e      	ldr	r2, [pc, #440]	; (8006e04 <HAL_DMA_IRQHandler+0xa28>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d022      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a6d      	ldr	r2, [pc, #436]	; (8006e08 <HAL_DMA_IRQHandler+0xa2c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d01d      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a6b      	ldr	r2, [pc, #428]	; (8006e0c <HAL_DMA_IRQHandler+0xa30>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d018      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a6a      	ldr	r2, [pc, #424]	; (8006e10 <HAL_DMA_IRQHandler+0xa34>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d013      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a68      	ldr	r2, [pc, #416]	; (8006e14 <HAL_DMA_IRQHandler+0xa38>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d00e      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a67      	ldr	r2, [pc, #412]	; (8006e18 <HAL_DMA_IRQHandler+0xa3c>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d009      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a65      	ldr	r2, [pc, #404]	; (8006e1c <HAL_DMA_IRQHandler+0xa40>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d004      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x8b8>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a64      	ldr	r2, [pc, #400]	; (8006e20 <HAL_DMA_IRQHandler+0xa44>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d108      	bne.n	8006ca6 <HAL_DMA_IRQHandler+0x8ca>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0201 	bic.w	r2, r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	e007      	b.n	8006cb6 <HAL_DMA_IRQHandler+0x8da>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0201 	bic.w	r2, r2, #1
 8006cb4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d307      	bcc.n	8006cd2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1f2      	bne.n	8006cb6 <HAL_DMA_IRQHandler+0x8da>
 8006cd0:	e000      	b.n	8006cd4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006cd2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d004      	beq.n	8006cec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2203      	movs	r2, #3
 8006ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006cea:	e003      	b.n	8006cf4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 8272 	beq.w	80071ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
 8006d0e:	e26c      	b.n	80071ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a43      	ldr	r2, [pc, #268]	; (8006e24 <HAL_DMA_IRQHandler+0xa48>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d022      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x984>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a42      	ldr	r2, [pc, #264]	; (8006e28 <HAL_DMA_IRQHandler+0xa4c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d01d      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x984>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a40      	ldr	r2, [pc, #256]	; (8006e2c <HAL_DMA_IRQHandler+0xa50>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d018      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x984>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a3f      	ldr	r2, [pc, #252]	; (8006e30 <HAL_DMA_IRQHandler+0xa54>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d013      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x984>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a3d      	ldr	r2, [pc, #244]	; (8006e34 <HAL_DMA_IRQHandler+0xa58>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d00e      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x984>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a3c      	ldr	r2, [pc, #240]	; (8006e38 <HAL_DMA_IRQHandler+0xa5c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d009      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x984>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a3a      	ldr	r2, [pc, #232]	; (8006e3c <HAL_DMA_IRQHandler+0xa60>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d004      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x984>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a39      	ldr	r2, [pc, #228]	; (8006e40 <HAL_DMA_IRQHandler+0xa64>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d101      	bne.n	8006d64 <HAL_DMA_IRQHandler+0x988>
 8006d60:	2301      	movs	r3, #1
 8006d62:	e000      	b.n	8006d66 <HAL_DMA_IRQHandler+0x98a>
 8006d64:	2300      	movs	r3, #0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 823f 	beq.w	80071ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	2204      	movs	r2, #4
 8006d7e:	409a      	lsls	r2, r3
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	4013      	ands	r3, r2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 80cd 	beq.w	8006f24 <HAL_DMA_IRQHandler+0xb48>
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 80c7 	beq.w	8006f24 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d9a:	f003 031f 	and.w	r3, r3, #31
 8006d9e:	2204      	movs	r2, #4
 8006da0:	409a      	lsls	r2, r3
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d049      	beq.n	8006e44 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d109      	bne.n	8006dce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 8210 	beq.w	80071e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dcc:	e20a      	b.n	80071e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 8206 	beq.w	80071e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006de0:	e200      	b.n	80071e4 <HAL_DMA_IRQHandler+0xe08>
 8006de2:	bf00      	nop
 8006de4:	40020010 	.word	0x40020010
 8006de8:	40020028 	.word	0x40020028
 8006dec:	40020040 	.word	0x40020040
 8006df0:	40020058 	.word	0x40020058
 8006df4:	40020070 	.word	0x40020070
 8006df8:	40020088 	.word	0x40020088
 8006dfc:	400200a0 	.word	0x400200a0
 8006e00:	400200b8 	.word	0x400200b8
 8006e04:	40020410 	.word	0x40020410
 8006e08:	40020428 	.word	0x40020428
 8006e0c:	40020440 	.word	0x40020440
 8006e10:	40020458 	.word	0x40020458
 8006e14:	40020470 	.word	0x40020470
 8006e18:	40020488 	.word	0x40020488
 8006e1c:	400204a0 	.word	0x400204a0
 8006e20:	400204b8 	.word	0x400204b8
 8006e24:	58025408 	.word	0x58025408
 8006e28:	5802541c 	.word	0x5802541c
 8006e2c:	58025430 	.word	0x58025430
 8006e30:	58025444 	.word	0x58025444
 8006e34:	58025458 	.word	0x58025458
 8006e38:	5802546c 	.word	0x5802546c
 8006e3c:	58025480 	.word	0x58025480
 8006e40:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f003 0320 	and.w	r3, r3, #32
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d160      	bne.n	8006f10 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a7f      	ldr	r2, [pc, #508]	; (8007050 <HAL_DMA_IRQHandler+0xc74>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d04a      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a7d      	ldr	r2, [pc, #500]	; (8007054 <HAL_DMA_IRQHandler+0xc78>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d045      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a7c      	ldr	r2, [pc, #496]	; (8007058 <HAL_DMA_IRQHandler+0xc7c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d040      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a7a      	ldr	r2, [pc, #488]	; (800705c <HAL_DMA_IRQHandler+0xc80>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d03b      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a79      	ldr	r2, [pc, #484]	; (8007060 <HAL_DMA_IRQHandler+0xc84>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d036      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a77      	ldr	r2, [pc, #476]	; (8007064 <HAL_DMA_IRQHandler+0xc88>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d031      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a76      	ldr	r2, [pc, #472]	; (8007068 <HAL_DMA_IRQHandler+0xc8c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d02c      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a74      	ldr	r2, [pc, #464]	; (800706c <HAL_DMA_IRQHandler+0xc90>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d027      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a73      	ldr	r2, [pc, #460]	; (8007070 <HAL_DMA_IRQHandler+0xc94>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d022      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a71      	ldr	r2, [pc, #452]	; (8007074 <HAL_DMA_IRQHandler+0xc98>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d01d      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a70      	ldr	r2, [pc, #448]	; (8007078 <HAL_DMA_IRQHandler+0xc9c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d018      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a6e      	ldr	r2, [pc, #440]	; (800707c <HAL_DMA_IRQHandler+0xca0>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d013      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a6d      	ldr	r2, [pc, #436]	; (8007080 <HAL_DMA_IRQHandler+0xca4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d00e      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a6b      	ldr	r2, [pc, #428]	; (8007084 <HAL_DMA_IRQHandler+0xca8>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d009      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a6a      	ldr	r2, [pc, #424]	; (8007088 <HAL_DMA_IRQHandler+0xcac>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d004      	beq.n	8006eee <HAL_DMA_IRQHandler+0xb12>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a68      	ldr	r2, [pc, #416]	; (800708c <HAL_DMA_IRQHandler+0xcb0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d108      	bne.n	8006f00 <HAL_DMA_IRQHandler+0xb24>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0208 	bic.w	r2, r2, #8
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	e007      	b.n	8006f10 <HAL_DMA_IRQHandler+0xb34>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 0204 	bic.w	r2, r2, #4
 8006f0e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 8165 	beq.w	80071e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f22:	e15f      	b.n	80071e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f28:	f003 031f 	and.w	r3, r3, #31
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	409a      	lsls	r2, r3
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	4013      	ands	r3, r2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 80c5 	beq.w	80070c4 <HAL_DMA_IRQHandler+0xce8>
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	f003 0302 	and.w	r3, r3, #2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 80bf 	beq.w	80070c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	2202      	movs	r2, #2
 8006f50:	409a      	lsls	r2, r3
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d018      	beq.n	8006f92 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d109      	bne.n	8006f7e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 813a 	beq.w	80071e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f7c:	e134      	b.n	80071e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 8130 	beq.w	80071e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f90:	e12a      	b.n	80071e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f003 0320 	and.w	r3, r3, #32
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f040 8089 	bne.w	80070b0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a2b      	ldr	r2, [pc, #172]	; (8007050 <HAL_DMA_IRQHandler+0xc74>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d04a      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a29      	ldr	r2, [pc, #164]	; (8007054 <HAL_DMA_IRQHandler+0xc78>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d045      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a28      	ldr	r2, [pc, #160]	; (8007058 <HAL_DMA_IRQHandler+0xc7c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d040      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a26      	ldr	r2, [pc, #152]	; (800705c <HAL_DMA_IRQHandler+0xc80>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d03b      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a25      	ldr	r2, [pc, #148]	; (8007060 <HAL_DMA_IRQHandler+0xc84>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d036      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a23      	ldr	r2, [pc, #140]	; (8007064 <HAL_DMA_IRQHandler+0xc88>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d031      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a22      	ldr	r2, [pc, #136]	; (8007068 <HAL_DMA_IRQHandler+0xc8c>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d02c      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a20      	ldr	r2, [pc, #128]	; (800706c <HAL_DMA_IRQHandler+0xc90>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d027      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a1f      	ldr	r2, [pc, #124]	; (8007070 <HAL_DMA_IRQHandler+0xc94>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d022      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a1d      	ldr	r2, [pc, #116]	; (8007074 <HAL_DMA_IRQHandler+0xc98>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d01d      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1c      	ldr	r2, [pc, #112]	; (8007078 <HAL_DMA_IRQHandler+0xc9c>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d018      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a1a      	ldr	r2, [pc, #104]	; (800707c <HAL_DMA_IRQHandler+0xca0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d013      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a19      	ldr	r2, [pc, #100]	; (8007080 <HAL_DMA_IRQHandler+0xca4>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00e      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a17      	ldr	r2, [pc, #92]	; (8007084 <HAL_DMA_IRQHandler+0xca8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d009      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a16      	ldr	r2, [pc, #88]	; (8007088 <HAL_DMA_IRQHandler+0xcac>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_DMA_IRQHandler+0xc62>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a14      	ldr	r2, [pc, #80]	; (800708c <HAL_DMA_IRQHandler+0xcb0>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d128      	bne.n	8007090 <HAL_DMA_IRQHandler+0xcb4>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 0214 	bic.w	r2, r2, #20
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	e027      	b.n	80070a0 <HAL_DMA_IRQHandler+0xcc4>
 8007050:	40020010 	.word	0x40020010
 8007054:	40020028 	.word	0x40020028
 8007058:	40020040 	.word	0x40020040
 800705c:	40020058 	.word	0x40020058
 8007060:	40020070 	.word	0x40020070
 8007064:	40020088 	.word	0x40020088
 8007068:	400200a0 	.word	0x400200a0
 800706c:	400200b8 	.word	0x400200b8
 8007070:	40020410 	.word	0x40020410
 8007074:	40020428 	.word	0x40020428
 8007078:	40020440 	.word	0x40020440
 800707c:	40020458 	.word	0x40020458
 8007080:	40020470 	.word	0x40020470
 8007084:	40020488 	.word	0x40020488
 8007088:	400204a0 	.word	0x400204a0
 800708c:	400204b8 	.word	0x400204b8
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 020a 	bic.w	r2, r2, #10
 800709e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 8097 	beq.w	80071e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070c2:	e091      	b.n	80071e8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c8:	f003 031f 	and.w	r3, r3, #31
 80070cc:	2208      	movs	r2, #8
 80070ce:	409a      	lsls	r2, r3
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	4013      	ands	r3, r2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 8088 	beq.w	80071ea <HAL_DMA_IRQHandler+0xe0e>
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f003 0308 	and.w	r3, r3, #8
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 8082 	beq.w	80071ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a41      	ldr	r2, [pc, #260]	; (80071f0 <HAL_DMA_IRQHandler+0xe14>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d04a      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a3f      	ldr	r2, [pc, #252]	; (80071f4 <HAL_DMA_IRQHandler+0xe18>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d045      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a3e      	ldr	r2, [pc, #248]	; (80071f8 <HAL_DMA_IRQHandler+0xe1c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d040      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a3c      	ldr	r2, [pc, #240]	; (80071fc <HAL_DMA_IRQHandler+0xe20>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d03b      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a3b      	ldr	r2, [pc, #236]	; (8007200 <HAL_DMA_IRQHandler+0xe24>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d036      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a39      	ldr	r2, [pc, #228]	; (8007204 <HAL_DMA_IRQHandler+0xe28>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d031      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a38      	ldr	r2, [pc, #224]	; (8007208 <HAL_DMA_IRQHandler+0xe2c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d02c      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a36      	ldr	r2, [pc, #216]	; (800720c <HAL_DMA_IRQHandler+0xe30>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d027      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a35      	ldr	r2, [pc, #212]	; (8007210 <HAL_DMA_IRQHandler+0xe34>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d022      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a33      	ldr	r2, [pc, #204]	; (8007214 <HAL_DMA_IRQHandler+0xe38>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d01d      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a32      	ldr	r2, [pc, #200]	; (8007218 <HAL_DMA_IRQHandler+0xe3c>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d018      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a30      	ldr	r2, [pc, #192]	; (800721c <HAL_DMA_IRQHandler+0xe40>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d013      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a2f      	ldr	r2, [pc, #188]	; (8007220 <HAL_DMA_IRQHandler+0xe44>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d00e      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a2d      	ldr	r2, [pc, #180]	; (8007224 <HAL_DMA_IRQHandler+0xe48>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d009      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a2c      	ldr	r2, [pc, #176]	; (8007228 <HAL_DMA_IRQHandler+0xe4c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d004      	beq.n	8007186 <HAL_DMA_IRQHandler+0xdaa>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a2a      	ldr	r2, [pc, #168]	; (800722c <HAL_DMA_IRQHandler+0xe50>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d108      	bne.n	8007198 <HAL_DMA_IRQHandler+0xdbc>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 021c 	bic.w	r2, r2, #28
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	e007      	b.n	80071a8 <HAL_DMA_IRQHandler+0xdcc>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 020e 	bic.w	r2, r2, #14
 80071a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ac:	f003 031f 	and.w	r3, r3, #31
 80071b0:	2201      	movs	r2, #1
 80071b2:	409a      	lsls	r2, r3
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	4798      	blx	r3
 80071de:	e004      	b.n	80071ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80071e0:	bf00      	nop
 80071e2:	e002      	b.n	80071ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071e4:	bf00      	nop
 80071e6:	e000      	b.n	80071ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071ea:	3728      	adds	r7, #40	; 0x28
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	40020010 	.word	0x40020010
 80071f4:	40020028 	.word	0x40020028
 80071f8:	40020040 	.word	0x40020040
 80071fc:	40020058 	.word	0x40020058
 8007200:	40020070 	.word	0x40020070
 8007204:	40020088 	.word	0x40020088
 8007208:	400200a0 	.word	0x400200a0
 800720c:	400200b8 	.word	0x400200b8
 8007210:	40020410 	.word	0x40020410
 8007214:	40020428 	.word	0x40020428
 8007218:	40020440 	.word	0x40020440
 800721c:	40020458 	.word	0x40020458
 8007220:	40020470 	.word	0x40020470
 8007224:	40020488 	.word	0x40020488
 8007228:	400204a0 	.word	0x400204a0
 800722c:	400204b8 	.word	0x400204b8

08007230 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a42      	ldr	r2, [pc, #264]	; (8007348 <DMA_CalcBaseAndBitshift+0x118>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d04a      	beq.n	80072d8 <DMA_CalcBaseAndBitshift+0xa8>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a41      	ldr	r2, [pc, #260]	; (800734c <DMA_CalcBaseAndBitshift+0x11c>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d045      	beq.n	80072d8 <DMA_CalcBaseAndBitshift+0xa8>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a3f      	ldr	r2, [pc, #252]	; (8007350 <DMA_CalcBaseAndBitshift+0x120>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d040      	beq.n	80072d8 <DMA_CalcBaseAndBitshift+0xa8>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a3e      	ldr	r2, [pc, #248]	; (8007354 <DMA_CalcBaseAndBitshift+0x124>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d03b      	beq.n	80072d8 <DMA_CalcBaseAndBitshift+0xa8>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a3c      	ldr	r2, [pc, #240]	; (8007358 <DMA_CalcBaseAndBitshift+0x128>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d036      	beq.n	80072d8 <DMA_CalcBaseAndBitshift+0xa8>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a3b      	ldr	r2, [pc, #236]	; (800735c <DMA_CalcBaseAndBitshift+0x12c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d031      	beq.n	80072d8 <DMA_CalcBaseAndBitshift+0xa8>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a39      	ldr	r2, [pc, #228]	; (8007360 <DMA_CalcBaseAndBitshift+0x130>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d02c      	beq.n	80072d8 <DMA_CalcBaseAndBitshift+0xa8>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a38      	ldr	r2, [pc, #224]	; (8007364 <DMA_CalcBaseAndBitshift+0x134>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d027      	beq.n	80072d8 <DMA_CalcBaseAndBitshift+0xa8>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a36      	ldr	r2, [pc, #216]	; (8007368 <DMA_CalcBaseAndBitshift+0x138>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d022      	beq.n	80072d8 <DMA_CalcBaseAndBitshift+0xa8>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a35      	ldr	r2, [pc, #212]	; (800736c <DMA_CalcBaseAndBitshift+0x13c>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d01d      	beq.n	80072d8 <DMA_CalcBaseAndBitshift+0xa8>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a33      	ldr	r2, [pc, #204]	; (8007370 <DMA_CalcBaseAndBitshift+0x140>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d018      	beq.n	80072d8 <DMA_CalcBaseAndBitshift+0xa8>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a32      	ldr	r2, [pc, #200]	; (8007374 <DMA_CalcBaseAndBitshift+0x144>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d013      	beq.n	80072d8 <DMA_CalcBaseAndBitshift+0xa8>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a30      	ldr	r2, [pc, #192]	; (8007378 <DMA_CalcBaseAndBitshift+0x148>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d00e      	beq.n	80072d8 <DMA_CalcBaseAndBitshift+0xa8>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a2f      	ldr	r2, [pc, #188]	; (800737c <DMA_CalcBaseAndBitshift+0x14c>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d009      	beq.n	80072d8 <DMA_CalcBaseAndBitshift+0xa8>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a2d      	ldr	r2, [pc, #180]	; (8007380 <DMA_CalcBaseAndBitshift+0x150>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d004      	beq.n	80072d8 <DMA_CalcBaseAndBitshift+0xa8>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a2c      	ldr	r2, [pc, #176]	; (8007384 <DMA_CalcBaseAndBitshift+0x154>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d101      	bne.n	80072dc <DMA_CalcBaseAndBitshift+0xac>
 80072d8:	2301      	movs	r3, #1
 80072da:	e000      	b.n	80072de <DMA_CalcBaseAndBitshift+0xae>
 80072dc:	2300      	movs	r3, #0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d024      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	3b10      	subs	r3, #16
 80072ea:	4a27      	ldr	r2, [pc, #156]	; (8007388 <DMA_CalcBaseAndBitshift+0x158>)
 80072ec:	fba2 2303 	umull	r2, r3, r2, r3
 80072f0:	091b      	lsrs	r3, r3, #4
 80072f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	4a24      	ldr	r2, [pc, #144]	; (800738c <DMA_CalcBaseAndBitshift+0x15c>)
 80072fc:	5cd3      	ldrb	r3, [r2, r3]
 80072fe:	461a      	mov	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b03      	cmp	r3, #3
 8007308:	d908      	bls.n	800731c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	461a      	mov	r2, r3
 8007310:	4b1f      	ldr	r3, [pc, #124]	; (8007390 <DMA_CalcBaseAndBitshift+0x160>)
 8007312:	4013      	ands	r3, r2
 8007314:	1d1a      	adds	r2, r3, #4
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	659a      	str	r2, [r3, #88]	; 0x58
 800731a:	e00d      	b.n	8007338 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	461a      	mov	r2, r3
 8007322:	4b1b      	ldr	r3, [pc, #108]	; (8007390 <DMA_CalcBaseAndBitshift+0x160>)
 8007324:	4013      	ands	r3, r2
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	6593      	str	r3, [r2, #88]	; 0x58
 800732a:	e005      	b.n	8007338 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	40020010 	.word	0x40020010
 800734c:	40020028 	.word	0x40020028
 8007350:	40020040 	.word	0x40020040
 8007354:	40020058 	.word	0x40020058
 8007358:	40020070 	.word	0x40020070
 800735c:	40020088 	.word	0x40020088
 8007360:	400200a0 	.word	0x400200a0
 8007364:	400200b8 	.word	0x400200b8
 8007368:	40020410 	.word	0x40020410
 800736c:	40020428 	.word	0x40020428
 8007370:	40020440 	.word	0x40020440
 8007374:	40020458 	.word	0x40020458
 8007378:	40020470 	.word	0x40020470
 800737c:	40020488 	.word	0x40020488
 8007380:	400204a0 	.word	0x400204a0
 8007384:	400204b8 	.word	0x400204b8
 8007388:	aaaaaaab 	.word	0xaaaaaaab
 800738c:	0801048c 	.word	0x0801048c
 8007390:	fffffc00 	.word	0xfffffc00

08007394 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d120      	bne.n	80073ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d858      	bhi.n	8007462 <DMA_CheckFifoParam+0xce>
 80073b0:	a201      	add	r2, pc, #4	; (adr r2, 80073b8 <DMA_CheckFifoParam+0x24>)
 80073b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b6:	bf00      	nop
 80073b8:	080073c9 	.word	0x080073c9
 80073bc:	080073db 	.word	0x080073db
 80073c0:	080073c9 	.word	0x080073c9
 80073c4:	08007463 	.word	0x08007463
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d048      	beq.n	8007466 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073d8:	e045      	b.n	8007466 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073e2:	d142      	bne.n	800746a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073e8:	e03f      	b.n	800746a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073f2:	d123      	bne.n	800743c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	2b03      	cmp	r3, #3
 80073fa:	d838      	bhi.n	800746e <DMA_CheckFifoParam+0xda>
 80073fc:	a201      	add	r2, pc, #4	; (adr r2, 8007404 <DMA_CheckFifoParam+0x70>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	08007415 	.word	0x08007415
 8007408:	0800741b 	.word	0x0800741b
 800740c:	08007415 	.word	0x08007415
 8007410:	0800742d 	.word	0x0800742d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	73fb      	strb	r3, [r7, #15]
        break;
 8007418:	e030      	b.n	800747c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d025      	beq.n	8007472 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800742a:	e022      	b.n	8007472 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007430:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007434:	d11f      	bne.n	8007476 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800743a:	e01c      	b.n	8007476 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007440:	2b02      	cmp	r3, #2
 8007442:	d902      	bls.n	800744a <DMA_CheckFifoParam+0xb6>
 8007444:	2b03      	cmp	r3, #3
 8007446:	d003      	beq.n	8007450 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007448:	e018      	b.n	800747c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	73fb      	strb	r3, [r7, #15]
        break;
 800744e:	e015      	b.n	800747c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00e      	beq.n	800747a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	73fb      	strb	r3, [r7, #15]
    break;
 8007460:	e00b      	b.n	800747a <DMA_CheckFifoParam+0xe6>
        break;
 8007462:	bf00      	nop
 8007464:	e00a      	b.n	800747c <DMA_CheckFifoParam+0xe8>
        break;
 8007466:	bf00      	nop
 8007468:	e008      	b.n	800747c <DMA_CheckFifoParam+0xe8>
        break;
 800746a:	bf00      	nop
 800746c:	e006      	b.n	800747c <DMA_CheckFifoParam+0xe8>
        break;
 800746e:	bf00      	nop
 8007470:	e004      	b.n	800747c <DMA_CheckFifoParam+0xe8>
        break;
 8007472:	bf00      	nop
 8007474:	e002      	b.n	800747c <DMA_CheckFifoParam+0xe8>
        break;
 8007476:	bf00      	nop
 8007478:	e000      	b.n	800747c <DMA_CheckFifoParam+0xe8>
    break;
 800747a:	bf00      	nop
    }
  }

  return status;
 800747c:	7bfb      	ldrb	r3, [r7, #15]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop

0800748c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a38      	ldr	r2, [pc, #224]	; (8007580 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d022      	beq.n	80074ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a36      	ldr	r2, [pc, #216]	; (8007584 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d01d      	beq.n	80074ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a35      	ldr	r2, [pc, #212]	; (8007588 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d018      	beq.n	80074ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a33      	ldr	r2, [pc, #204]	; (800758c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d013      	beq.n	80074ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a32      	ldr	r2, [pc, #200]	; (8007590 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00e      	beq.n	80074ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a30      	ldr	r2, [pc, #192]	; (8007594 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d009      	beq.n	80074ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a2f      	ldr	r2, [pc, #188]	; (8007598 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d004      	beq.n	80074ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a2d      	ldr	r2, [pc, #180]	; (800759c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d101      	bne.n	80074ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80074ea:	2301      	movs	r3, #1
 80074ec:	e000      	b.n	80074f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80074ee:	2300      	movs	r3, #0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d01a      	beq.n	800752a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	3b08      	subs	r3, #8
 80074fc:	4a28      	ldr	r2, [pc, #160]	; (80075a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80074fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007502:	091b      	lsrs	r3, r3, #4
 8007504:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	4b26      	ldr	r3, [pc, #152]	; (80075a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800750a:	4413      	add	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	461a      	mov	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a24      	ldr	r2, [pc, #144]	; (80075a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007518:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f003 031f 	and.w	r3, r3, #31
 8007520:	2201      	movs	r2, #1
 8007522:	409a      	lsls	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007528:	e024      	b.n	8007574 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	b2db      	uxtb	r3, r3
 8007530:	3b10      	subs	r3, #16
 8007532:	4a1e      	ldr	r2, [pc, #120]	; (80075ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007534:	fba2 2303 	umull	r2, r3, r2, r3
 8007538:	091b      	lsrs	r3, r3, #4
 800753a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	4a1c      	ldr	r2, [pc, #112]	; (80075b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d806      	bhi.n	8007552 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	4a1b      	ldr	r2, [pc, #108]	; (80075b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d902      	bls.n	8007552 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3308      	adds	r3, #8
 8007550:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	4b18      	ldr	r3, [pc, #96]	; (80075b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007556:	4413      	add	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	461a      	mov	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a16      	ldr	r2, [pc, #88]	; (80075bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007564:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f003 031f 	and.w	r3, r3, #31
 800756c:	2201      	movs	r2, #1
 800756e:	409a      	lsls	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007574:	bf00      	nop
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	58025408 	.word	0x58025408
 8007584:	5802541c 	.word	0x5802541c
 8007588:	58025430 	.word	0x58025430
 800758c:	58025444 	.word	0x58025444
 8007590:	58025458 	.word	0x58025458
 8007594:	5802546c 	.word	0x5802546c
 8007598:	58025480 	.word	0x58025480
 800759c:	58025494 	.word	0x58025494
 80075a0:	cccccccd 	.word	0xcccccccd
 80075a4:	16009600 	.word	0x16009600
 80075a8:	58025880 	.word	0x58025880
 80075ac:	aaaaaaab 	.word	0xaaaaaaab
 80075b0:	400204b8 	.word	0x400204b8
 80075b4:	4002040f 	.word	0x4002040f
 80075b8:	10008200 	.word	0x10008200
 80075bc:	40020880 	.word	0x40020880

080075c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d04a      	beq.n	800766c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d847      	bhi.n	800766c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a25      	ldr	r2, [pc, #148]	; (8007678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d022      	beq.n	800762c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a24      	ldr	r2, [pc, #144]	; (800767c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d01d      	beq.n	800762c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a22      	ldr	r2, [pc, #136]	; (8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d018      	beq.n	800762c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a21      	ldr	r2, [pc, #132]	; (8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d013      	beq.n	800762c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a1f      	ldr	r2, [pc, #124]	; (8007688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d00e      	beq.n	800762c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a1e      	ldr	r2, [pc, #120]	; (800768c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d009      	beq.n	800762c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a1c      	ldr	r2, [pc, #112]	; (8007690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d004      	beq.n	800762c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a1b      	ldr	r2, [pc, #108]	; (8007694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d101      	bne.n	8007630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800762c:	2301      	movs	r3, #1
 800762e:	e000      	b.n	8007632 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007630:	2300      	movs	r3, #0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00a      	beq.n	800764c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4b17      	ldr	r3, [pc, #92]	; (8007698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800763a:	4413      	add	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	461a      	mov	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a15      	ldr	r2, [pc, #84]	; (800769c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007648:	671a      	str	r2, [r3, #112]	; 0x70
 800764a:	e009      	b.n	8007660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	4b14      	ldr	r3, [pc, #80]	; (80076a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	461a      	mov	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a11      	ldr	r2, [pc, #68]	; (80076a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800765e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	3b01      	subs	r3, #1
 8007664:	2201      	movs	r2, #1
 8007666:	409a      	lsls	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800766c:	bf00      	nop
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	58025408 	.word	0x58025408
 800767c:	5802541c 	.word	0x5802541c
 8007680:	58025430 	.word	0x58025430
 8007684:	58025444 	.word	0x58025444
 8007688:	58025458 	.word	0x58025458
 800768c:	5802546c 	.word	0x5802546c
 8007690:	58025480 	.word	0x58025480
 8007694:	58025494 	.word	0x58025494
 8007698:	1600963f 	.word	0x1600963f
 800769c:	58025940 	.word	0x58025940
 80076a0:	1000823f 	.word	0x1000823f
 80076a4:	40020940 	.word	0x40020940

080076a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b089      	sub	sp, #36	; 0x24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80076b6:	4b89      	ldr	r3, [pc, #548]	; (80078dc <HAL_GPIO_Init+0x234>)
 80076b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80076ba:	e194      	b.n	80079e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	2101      	movs	r1, #1
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	fa01 f303 	lsl.w	r3, r1, r3
 80076c8:	4013      	ands	r3, r2
 80076ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 8186 	beq.w	80079e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f003 0303 	and.w	r3, r3, #3
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d005      	beq.n	80076ec <HAL_GPIO_Init+0x44>
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f003 0303 	and.w	r3, r3, #3
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d130      	bne.n	800774e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	2203      	movs	r2, #3
 80076f8:	fa02 f303 	lsl.w	r3, r2, r3
 80076fc:	43db      	mvns	r3, r3
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	4013      	ands	r3, r2
 8007702:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	68da      	ldr	r2, [r3, #12]
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	005b      	lsls	r3, r3, #1
 800770c:	fa02 f303 	lsl.w	r3, r2, r3
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	4313      	orrs	r3, r2
 8007714:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007722:	2201      	movs	r2, #1
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	fa02 f303 	lsl.w	r3, r2, r3
 800772a:	43db      	mvns	r3, r3
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	4013      	ands	r3, r2
 8007730:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	091b      	lsrs	r3, r3, #4
 8007738:	f003 0201 	and.w	r2, r3, #1
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	fa02 f303 	lsl.w	r3, r2, r3
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	4313      	orrs	r3, r2
 8007746:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	69ba      	ldr	r2, [r7, #24]
 800774c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f003 0303 	and.w	r3, r3, #3
 8007756:	2b03      	cmp	r3, #3
 8007758:	d017      	beq.n	800778a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	005b      	lsls	r3, r3, #1
 8007764:	2203      	movs	r2, #3
 8007766:	fa02 f303 	lsl.w	r3, r2, r3
 800776a:	43db      	mvns	r3, r3
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	4013      	ands	r3, r2
 8007770:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	689a      	ldr	r2, [r3, #8]
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	005b      	lsls	r3, r3, #1
 800777a:	fa02 f303 	lsl.w	r3, r2, r3
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	4313      	orrs	r3, r2
 8007782:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	2b02      	cmp	r3, #2
 8007794:	d123      	bne.n	80077de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	08da      	lsrs	r2, r3, #3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	3208      	adds	r2, #8
 800779e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	220f      	movs	r2, #15
 80077ae:	fa02 f303 	lsl.w	r3, r2, r3
 80077b2:	43db      	mvns	r3, r3
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	4013      	ands	r3, r2
 80077b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	691a      	ldr	r2, [r3, #16]
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	f003 0307 	and.w	r3, r3, #7
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	08da      	lsrs	r2, r3, #3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3208      	adds	r2, #8
 80077d8:	69b9      	ldr	r1, [r7, #24]
 80077da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	2203      	movs	r2, #3
 80077ea:	fa02 f303 	lsl.w	r3, r2, r3
 80077ee:	43db      	mvns	r3, r3
 80077f0:	69ba      	ldr	r2, [r7, #24]
 80077f2:	4013      	ands	r3, r2
 80077f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f003 0203 	and.w	r2, r3, #3
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	fa02 f303 	lsl.w	r3, r2, r3
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	4313      	orrs	r3, r2
 800780a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 80e0 	beq.w	80079e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007820:	4b2f      	ldr	r3, [pc, #188]	; (80078e0 <HAL_GPIO_Init+0x238>)
 8007822:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007826:	4a2e      	ldr	r2, [pc, #184]	; (80078e0 <HAL_GPIO_Init+0x238>)
 8007828:	f043 0302 	orr.w	r3, r3, #2
 800782c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007830:	4b2b      	ldr	r3, [pc, #172]	; (80078e0 <HAL_GPIO_Init+0x238>)
 8007832:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800783e:	4a29      	ldr	r2, [pc, #164]	; (80078e4 <HAL_GPIO_Init+0x23c>)
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	089b      	lsrs	r3, r3, #2
 8007844:	3302      	adds	r3, #2
 8007846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800784a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	220f      	movs	r2, #15
 8007856:	fa02 f303 	lsl.w	r3, r2, r3
 800785a:	43db      	mvns	r3, r3
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	4013      	ands	r3, r2
 8007860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a20      	ldr	r2, [pc, #128]	; (80078e8 <HAL_GPIO_Init+0x240>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d052      	beq.n	8007910 <HAL_GPIO_Init+0x268>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a1f      	ldr	r2, [pc, #124]	; (80078ec <HAL_GPIO_Init+0x244>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d031      	beq.n	80078d6 <HAL_GPIO_Init+0x22e>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a1e      	ldr	r2, [pc, #120]	; (80078f0 <HAL_GPIO_Init+0x248>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d02b      	beq.n	80078d2 <HAL_GPIO_Init+0x22a>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a1d      	ldr	r2, [pc, #116]	; (80078f4 <HAL_GPIO_Init+0x24c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d025      	beq.n	80078ce <HAL_GPIO_Init+0x226>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a1c      	ldr	r2, [pc, #112]	; (80078f8 <HAL_GPIO_Init+0x250>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d01f      	beq.n	80078ca <HAL_GPIO_Init+0x222>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a1b      	ldr	r2, [pc, #108]	; (80078fc <HAL_GPIO_Init+0x254>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d019      	beq.n	80078c6 <HAL_GPIO_Init+0x21e>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a1a      	ldr	r2, [pc, #104]	; (8007900 <HAL_GPIO_Init+0x258>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d013      	beq.n	80078c2 <HAL_GPIO_Init+0x21a>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a19      	ldr	r2, [pc, #100]	; (8007904 <HAL_GPIO_Init+0x25c>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d00d      	beq.n	80078be <HAL_GPIO_Init+0x216>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a18      	ldr	r2, [pc, #96]	; (8007908 <HAL_GPIO_Init+0x260>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d007      	beq.n	80078ba <HAL_GPIO_Init+0x212>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a17      	ldr	r2, [pc, #92]	; (800790c <HAL_GPIO_Init+0x264>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d101      	bne.n	80078b6 <HAL_GPIO_Init+0x20e>
 80078b2:	2309      	movs	r3, #9
 80078b4:	e02d      	b.n	8007912 <HAL_GPIO_Init+0x26a>
 80078b6:	230a      	movs	r3, #10
 80078b8:	e02b      	b.n	8007912 <HAL_GPIO_Init+0x26a>
 80078ba:	2308      	movs	r3, #8
 80078bc:	e029      	b.n	8007912 <HAL_GPIO_Init+0x26a>
 80078be:	2307      	movs	r3, #7
 80078c0:	e027      	b.n	8007912 <HAL_GPIO_Init+0x26a>
 80078c2:	2306      	movs	r3, #6
 80078c4:	e025      	b.n	8007912 <HAL_GPIO_Init+0x26a>
 80078c6:	2305      	movs	r3, #5
 80078c8:	e023      	b.n	8007912 <HAL_GPIO_Init+0x26a>
 80078ca:	2304      	movs	r3, #4
 80078cc:	e021      	b.n	8007912 <HAL_GPIO_Init+0x26a>
 80078ce:	2303      	movs	r3, #3
 80078d0:	e01f      	b.n	8007912 <HAL_GPIO_Init+0x26a>
 80078d2:	2302      	movs	r3, #2
 80078d4:	e01d      	b.n	8007912 <HAL_GPIO_Init+0x26a>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e01b      	b.n	8007912 <HAL_GPIO_Init+0x26a>
 80078da:	bf00      	nop
 80078dc:	58000080 	.word	0x58000080
 80078e0:	58024400 	.word	0x58024400
 80078e4:	58000400 	.word	0x58000400
 80078e8:	58020000 	.word	0x58020000
 80078ec:	58020400 	.word	0x58020400
 80078f0:	58020800 	.word	0x58020800
 80078f4:	58020c00 	.word	0x58020c00
 80078f8:	58021000 	.word	0x58021000
 80078fc:	58021400 	.word	0x58021400
 8007900:	58021800 	.word	0x58021800
 8007904:	58021c00 	.word	0x58021c00
 8007908:	58022000 	.word	0x58022000
 800790c:	58022400 	.word	0x58022400
 8007910:	2300      	movs	r3, #0
 8007912:	69fa      	ldr	r2, [r7, #28]
 8007914:	f002 0203 	and.w	r2, r2, #3
 8007918:	0092      	lsls	r2, r2, #2
 800791a:	4093      	lsls	r3, r2
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	4313      	orrs	r3, r2
 8007920:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007922:	4938      	ldr	r1, [pc, #224]	; (8007a04 <HAL_GPIO_Init+0x35c>)
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	089b      	lsrs	r3, r3, #2
 8007928:	3302      	adds	r3, #2
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	43db      	mvns	r3, r3
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	4013      	ands	r3, r2
 8007940:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	4313      	orrs	r3, r2
 8007954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007956:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800795e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	43db      	mvns	r3, r3
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	4013      	ands	r3, r2
 800796e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	4313      	orrs	r3, r2
 8007982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007984:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	43db      	mvns	r3, r3
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	4013      	ands	r3, r2
 800799a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	43db      	mvns	r3, r3
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	4013      	ands	r3, r2
 80079c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	3301      	adds	r3, #1
 80079e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	fa22 f303 	lsr.w	r3, r2, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f47f ae63 	bne.w	80076bc <HAL_GPIO_Init+0x14>
  }
}
 80079f6:	bf00      	nop
 80079f8:	bf00      	nop
 80079fa:	3724      	adds	r7, #36	; 0x24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	58000400 	.word	0x58000400

08007a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	460b      	mov	r3, r1
 8007a12:	807b      	strh	r3, [r7, #2]
 8007a14:	4613      	mov	r3, r2
 8007a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a18:	787b      	ldrb	r3, [r7, #1]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a1e:	887a      	ldrh	r2, [r7, #2]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007a24:	e003      	b.n	8007a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007a26:	887b      	ldrh	r3, [r7, #2]
 8007a28:	041a      	lsls	r2, r3, #16
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	619a      	str	r2, [r3, #24]
}
 8007a2e:	bf00      	nop
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
	...

08007a3c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e0bd      	b.n	8007bca <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2202      	movs	r2, #2
 8007a52:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d031      	beq.n	8007af6 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a4f      	ldr	r2, [pc, #316]	; (8007bd4 <HAL_HRTIM_Init+0x198>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d10e      	bne.n	8007aba <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8007a9c:	4b4e      	ldr	r3, [pc, #312]	; (8007bd8 <HAL_HRTIM_Init+0x19c>)
 8007a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007aa2:	4a4d      	ldr	r2, [pc, #308]	; (8007bd8 <HAL_HRTIM_Init+0x19c>)
 8007aa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007aa8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007aac:	4b4a      	ldr	r3, [pc, #296]	; (8007bd8 <HAL_HRTIM_Init+0x19c>)
 8007aae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007ac8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007ade:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7f9 fd2a 	bl	8001550 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d012      	beq.n	8007b2e <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b16:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	75fb      	strb	r3, [r7, #23]
 8007b42:	e03e      	b.n	8007bc2 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8007b44:	7dfa      	ldrb	r2, [r7, #23]
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	1a9b      	subs	r3, r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	440b      	add	r3, r1
 8007b52:	3318      	adds	r3, #24
 8007b54:	2200      	movs	r2, #0
 8007b56:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8007b58:	7dfa      	ldrb	r2, [r7, #23]
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	1a9b      	subs	r3, r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	440b      	add	r3, r1
 8007b66:	331c      	adds	r3, #28
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8007b6c:	7dfa      	ldrb	r2, [r7, #23]
 8007b6e:	6879      	ldr	r1, [r7, #4]
 8007b70:	4613      	mov	r3, r2
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	1a9b      	subs	r3, r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	440b      	add	r3, r1
 8007b7a:	3320      	adds	r3, #32
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8007b80:	7dfa      	ldrb	r2, [r7, #23]
 8007b82:	6879      	ldr	r1, [r7, #4]
 8007b84:	4613      	mov	r3, r2
 8007b86:	00db      	lsls	r3, r3, #3
 8007b88:	1a9b      	subs	r3, r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	440b      	add	r3, r1
 8007b8e:	3324      	adds	r3, #36	; 0x24
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8007b94:	7dfa      	ldrb	r2, [r7, #23]
 8007b96:	6879      	ldr	r1, [r7, #4]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	00db      	lsls	r3, r3, #3
 8007b9c:	1a9b      	subs	r3, r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	440b      	add	r3, r1
 8007ba2:	3328      	adds	r3, #40	; 0x28
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8007ba8:	7dfa      	ldrb	r2, [r7, #23]
 8007baa:	6879      	ldr	r1, [r7, #4]
 8007bac:	4613      	mov	r3, r2
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	1a9b      	subs	r3, r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	3330      	adds	r3, #48	; 0x30
 8007bb8:	2200      	movs	r2, #0
 8007bba:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
 8007bc4:	2b05      	cmp	r3, #5
 8007bc6:	d9bd      	bls.n	8007b44 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	40017400 	.word	0x40017400
 8007bd8:	58024400 	.word	0x58024400

08007bdc <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d101      	bne.n	8007bf8 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	e015      	b.n	8007c24 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	2b05      	cmp	r3, #5
 8007c04:	d104      	bne.n	8007c10 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 faa3 	bl	8008154 <HRTIM_MasterBase_Config>
 8007c0e:	e004      	b.n	8007c1a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	68b9      	ldr	r1, [r7, #8]
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 facc 	bl	80081b2 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <HAL_HRTIM_FaultConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_FaultConfig(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t Fault,
                                        const HRTIM_FaultCfgTypeDef* pFaultCfg)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_FAULTSOURCE(pFaultCfg->Source));
  assert_param(IS_HRTIM_FAULTPOLARITY(pFaultCfg->Polarity));
  assert_param(IS_HRTIM_FAULTFILTER(pFaultCfg->Filter));
  assert_param(IS_HRTIM_FAULTLOCK(pFaultCfg->Lock));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d101      	bne.n	8007c48 <HAL_HRTIM_FaultConfig+0x1c>
  {
     return HAL_BUSY;
 8007c44:	2302      	movs	r3, #2
 8007c46:	e133      	b.n	8007eb0 <HAL_HRTIM_FaultConfig+0x284>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d101      	bne.n	8007c56 <HAL_HRTIM_FaultConfig+0x2a>
 8007c52:	2302      	movs	r3, #2
 8007c54:	e12c      	b.n	8007eb0 <HAL_HRTIM_FaultConfig+0x284>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2202      	movs	r2, #2
 8007c62:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure fault channel */
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c6e:	617b      	str	r3, [r7, #20]
  hrtim_fltinr2 = hhrtim->Instance->sCommonRegs.FLTINR2;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c78:	613b      	str	r3, [r7, #16]

  switch (Fault)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	2b0f      	cmp	r3, #15
 8007c80:	f200 80d5 	bhi.w	8007e2e <HAL_HRTIM_FaultConfig+0x202>
 8007c84:	a201      	add	r2, pc, #4	; (adr r2, 8007c8c <HAL_HRTIM_FaultConfig+0x60>)
 8007c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8a:	bf00      	nop
 8007c8c:	08007ccd 	.word	0x08007ccd
 8007c90:	08007d0f 	.word	0x08007d0f
 8007c94:	08007e2f 	.word	0x08007e2f
 8007c98:	08007d59 	.word	0x08007d59
 8007c9c:	08007e2f 	.word	0x08007e2f
 8007ca0:	08007e2f 	.word	0x08007e2f
 8007ca4:	08007e2f 	.word	0x08007e2f
 8007ca8:	08007da3 	.word	0x08007da3
 8007cac:	08007e2f 	.word	0x08007e2f
 8007cb0:	08007e2f 	.word	0x08007e2f
 8007cb4:	08007e2f 	.word	0x08007e2f
 8007cb8:	08007e2f 	.word	0x08007e2f
 8007cbc:	08007e2f 	.word	0x08007e2f
 8007cc0:	08007e2f 	.word	0x08007e2f
 8007cc4:	08007e2f 	.word	0x08007e2f
 8007cc8:	08007ded 	.word	0x08007ded
  {
  case HRTIM_FAULT_1:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT1P | HRTIM_FLTINR1_FLT1SRC | HRTIM_FLTINR1_FLT1F | HRTIM_FLTINR1_FLT1LCK);
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007cd2:	617b      	str	r3, [r7, #20]
      hrtim_fltinr1 |= (pFaultCfg->Polarity & HRTIM_FLTINR1_FLT1P);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f003 0302 	and.w	r3, r3, #2
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	617b      	str	r3, [r7, #20]
      hrtim_fltinr1 |= (pFaultCfg->Source & HRTIM_FLTINR1_FLT1SRC);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0304 	and.w	r3, r3, #4
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	617b      	str	r3, [r7, #20]
      hrtim_fltinr1 |= (pFaultCfg->Filter & HRTIM_FLTINR1_FLT1F);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	617b      	str	r3, [r7, #20]
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	617b      	str	r3, [r7, #20]
      break;
 8007d0c:	e098      	b.n	8007e40 <HAL_HRTIM_FaultConfig+0x214>
    }

  case HRTIM_FAULT_2:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT2P | HRTIM_FLTINR1_FLT2SRC | HRTIM_FLTINR1_FLT2F | HRTIM_FLTINR1_FLT2LCK);
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f423 437e 	bic.w	r3, r3, #65024	; 0xfe00
 8007d14:	617b      	str	r3, [r7, #20]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR1_FLT2P);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	021b      	lsls	r3, r3, #8
 8007d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	617b      	str	r3, [r7, #20]
      hrtim_fltinr1 |= ((pFaultCfg->Source << 8U) & HRTIM_FLTINR1_FLT2SRC);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	021b      	lsls	r3, r3, #8
 8007d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	617b      	str	r3, [r7, #20]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR1_FLT2F);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	021b      	lsls	r3, r3, #8
 8007d3c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	617b      	str	r3, [r7, #20]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	021b      	lsls	r3, r3, #8
 8007d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	617b      	str	r3, [r7, #20]
      break;
 8007d56:	e073      	b.n	8007e40 <HAL_HRTIM_FaultConfig+0x214>
    }

  case HRTIM_FAULT_3:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT3P | HRTIM_FLTINR1_FLT3SRC | HRTIM_FLTINR1_FLT3F | HRTIM_FLTINR1_FLT3LCK);
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f423 037e 	bic.w	r3, r3, #16646144	; 0xfe0000
 8007d5e:	617b      	str	r3, [r7, #20]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 16U) & HRTIM_FLTINR1_FLT3P);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	041b      	lsls	r3, r3, #16
 8007d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	617b      	str	r3, [r7, #20]
      hrtim_fltinr1 |= ((pFaultCfg->Source << 16U) & HRTIM_FLTINR1_FLT3SRC);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	041b      	lsls	r3, r3, #16
 8007d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	617b      	str	r3, [r7, #20]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 16U) & HRTIM_FLTINR1_FLT3F);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	041b      	lsls	r3, r3, #16
 8007d86:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 8007d8a:	697a      	ldr	r2, [r7, #20]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	617b      	str	r3, [r7, #20]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	041b      	lsls	r3, r3, #16
 8007d96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	617b      	str	r3, [r7, #20]
      break;
 8007da0:	e04e      	b.n	8007e40 <HAL_HRTIM_FaultConfig+0x214>
     }

  case HRTIM_FAULT_4:
    {
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT4P | HRTIM_FLTINR1_FLT4SRC | HRTIM_FLTINR1_FLT4F | HRTIM_FLTINR1_FLT4LCK);
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8007da8:	617b      	str	r3, [r7, #20]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 24U) & HRTIM_FLTINR1_FLT4P);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	061b      	lsls	r3, r3, #24
 8007db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	617b      	str	r3, [r7, #20]
      hrtim_fltinr1 |= ((pFaultCfg->Source << 24U) & HRTIM_FLTINR1_FLT4SRC);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	061b      	lsls	r3, r3, #24
 8007dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	617b      	str	r3, [r7, #20]
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 24U) & HRTIM_FLTINR1_FLT4F);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	061b      	lsls	r3, r3, #24
 8007dd0:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	617b      	str	r3, [r7, #20]
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	061b      	lsls	r3, r3, #24
 8007de0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	617b      	str	r3, [r7, #20]
      break;
 8007dea:	e029      	b.n	8007e40 <HAL_HRTIM_FaultConfig+0x214>
    }

  case HRTIM_FAULT_5:
    {
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5P | HRTIM_FLTINR2_FLT5SRC | HRTIM_FLTINR2_FLT5F | HRTIM_FLTINR2_FLT5LCK);
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007df2:	613b      	str	r3, [r7, #16]
      hrtim_fltinr2 |= (pFaultCfg->Polarity & HRTIM_FLTINR2_FLT5P);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	613b      	str	r3, [r7, #16]
      hrtim_fltinr2 |= (pFaultCfg->Source & HRTIM_FLTINR2_FLT5SRC);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0304 	and.w	r3, r3, #4
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	613b      	str	r3, [r7, #16]
      hrtim_fltinr2 |= (pFaultCfg->Filter & HRTIM_FLTINR2_FLT5F);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	613b      	str	r3, [r7, #16]
      hrtim_fltinr2 |= (pFaultCfg->Lock & HRTIM_FLTINR2_FLT5LCK);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	613b      	str	r3, [r7, #16]
      break;
 8007e2c:	e008      	b.n	8007e40 <HAL_HRTIM_FaultConfig+0x214>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2207      	movs	r2, #7
 8007e32:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8007e3e:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b07      	cmp	r3, #7
 8007e4a:	d101      	bne.n	8007e50 <HAL_HRTIM_FaultConfig+0x224>
  {
     return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e02f      	b.n	8007eb0 <HAL_HRTIM_FaultConfig+0x284>
  }

  /* Update the HRTIM registers except LOCK bit */
  hhrtim->Instance->sCommonRegs.FLTINR1 = (hrtim_fltinr1 & (~(HRTIM_FLTINR1_FLTxLCK)));
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8007e5a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  hhrtim->Instance->sCommonRegs.FLTINR2 = (hrtim_fltinr2 & (~(HRTIM_FLTINR2_FLTxLCK)));
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	6939      	ldr	r1, [r7, #16]
 8007e64:	4b15      	ldr	r3, [pc, #84]	; (8007ebc <HAL_HRTIM_FaultConfig+0x290>)
 8007e66:	400b      	ands	r3, r1
 8007e68:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  /* Update the HRTIM registers LOCK bit */
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR1,(hrtim_fltinr1 & HRTIM_FLTINR1_FLTxLCK));
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f8d3 13d0 	ldr.w	r1, [r3, #976]	; 0x3d0
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR2,(hrtim_fltinr2 & HRTIM_FLTINR2_FLTxLCK));
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f8d3 13d4 	ldr.w	r1, [r3, #980]	; 0x3d4
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	f248 0380 	movw	r3, #32896	; 0x8080
 8007e92:	4013      	ands	r3, r2
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	6812      	ldr	r2, [r2, #0]
 8007e98:	430b      	orrs	r3, r1
 8007e9a:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	371c      	adds	r7, #28
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	ffff7f7f 	.word	0xffff7f7f

08007ec0 <HAL_HRTIM_FaultPrescalerConfig>:
  * @note This function must be called before starting the timer and before
  *       enabling faults inputs
  */
HAL_StatusTypeDef HAL_HRTIM_FaultPrescalerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Prescaler)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULTPRESCALER(Prescaler));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d101      	bne.n	8007eda <HAL_HRTIM_FaultPrescalerConfig+0x1a>
  {
     return HAL_BUSY;
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	e025      	b.n	8007f26 <HAL_HRTIM_FaultPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d101      	bne.n	8007ee8 <HAL_HRTIM_FaultPrescalerConfig+0x28>
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	e01e      	b.n	8007f26 <HAL_HRTIM_FaultPrescalerConfig+0x66>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f00:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <HAL_HRTIM_FaultModeCtl>:
  * @retval None
  */
void HAL_HRTIM_FaultModeCtl(HRTIM_HandleTypeDef * hhrtim,
                        uint32_t Faults,
                        uint32_t Enable)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b085      	sub	sp, #20
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_FAULT(Faults));
  assert_param(IS_HRTIM_FAULTMODECTL(Enable));

  if ((Faults & HRTIM_FAULT_1) != (uint32_t)RESET)
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00d      	beq.n	8007f64 <HAL_HRTIM_FaultModeCtl+0x32>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT1E, (Enable & HRTIM_FLTINR1_FLT1E));
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f50:	f023 0101 	bic.w	r1, r3, #1
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f003 0201 	and.w	r2, r3, #1
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_2) != (uint32_t)RESET)
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f003 0302 	and.w	r3, r3, #2
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00e      	beq.n	8007f8c <HAL_HRTIM_FaultModeCtl+0x5a>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT2E, ((Enable << 8U) & HRTIM_FLTINR1_FLT2E));
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f76:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	021b      	lsls	r3, r3, #8
 8007f7e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_3) != (uint32_t)RESET)
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	f003 0304 	and.w	r3, r3, #4
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00e      	beq.n	8007fb4 <HAL_HRTIM_FaultModeCtl+0x82>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT3E, ((Enable << 16U) & HRTIM_FLTINR1_FLT3E));
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f9e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	041b      	lsls	r3, r3, #16
 8007fa6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_4) != (uint32_t)RESET)
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f003 0308 	and.w	r3, r3, #8
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00e      	beq.n	8007fdc <HAL_HRTIM_FaultModeCtl+0xaa>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT4E, ((Enable << 24U) & HRTIM_FLTINR1_FLT4E));
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fc6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	061b      	lsls	r3, r3, #24
 8007fce:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
  }
  if ((Faults & HRTIM_FAULT_5) != (uint32_t)RESET)
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	f003 0310 	and.w	r3, r3, #16
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00d      	beq.n	8008002 <HAL_HRTIM_FaultModeCtl+0xd0>
  {
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT5E, ((Enable) & HRTIM_FLTINR2_FLT5E));
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fee:	f023 0101 	bic.w	r1, r3, #1
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f003 0201 	and.w	r2, r3, #1
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  }
}
 8008002:	bf00      	nop
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b084      	sub	sp, #16
 8008012:	af00      	add	r7, sp, #0
 8008014:	60f8      	str	r0, [r7, #12]
 8008016:	60b9      	str	r1, [r7, #8]
 8008018:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b02      	cmp	r3, #2
 8008024:	d101      	bne.n	800802a <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8008026:	2302      	movs	r3, #2
 8008028:	e05f      	b.n	80080ea <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8008034:	2302      	movs	r3, #2
 8008036:	e058      	b.n	80080ea <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2202      	movs	r2, #2
 8008044:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	2b05      	cmp	r3, #5
 800804c:	d104      	bne.n	8008058 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 f8ee 	bl	8008232 <HRTIM_MasterWaveform_Config>
 8008056:	e004      	b.n	8008062 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	68b9      	ldr	r1, [r7, #8]
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f000 f94f 	bl	8008300 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6819      	ldr	r1, [r3, #0]
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	4613      	mov	r3, r2
 800806c:	00db      	lsls	r3, r3, #3
 800806e:	1a9b      	subs	r3, r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4403      	add	r3, r0
 8008074:	3320      	adds	r3, #32
 8008076:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6859      	ldr	r1, [r3, #4]
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	4613      	mov	r3, r2
 8008082:	00db      	lsls	r3, r3, #3
 8008084:	1a9b      	subs	r3, r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4403      	add	r3, r0
 800808a:	3324      	adds	r3, #36	; 0x24
 800808c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6899      	ldr	r1, [r3, #8]
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	4613      	mov	r3, r2
 8008098:	00db      	lsls	r3, r3, #3
 800809a:	1a9b      	subs	r3, r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4403      	add	r3, r0
 80080a0:	3328      	adds	r3, #40	; 0x28
 80080a2:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68d9      	ldr	r1, [r3, #12]
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	4613      	mov	r3, r2
 80080ae:	00db      	lsls	r3, r3, #3
 80080b0:	1a9b      	subs	r3, r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4403      	add	r3, r0
 80080b6:	332c      	adds	r3, #44	; 0x2c
 80080b8:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6919      	ldr	r1, [r3, #16]
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	4613      	mov	r3, r2
 80080c4:	00db      	lsls	r3, r3, #3
 80080c6:	1a9b      	subs	r3, r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4403      	add	r3, r0
 80080cc:	3330      	adds	r3, #48	; 0x30
 80080ce:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80080d0:	68b9      	ldr	r1, [r7, #8]
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f000 fb2c 	bl	8008730 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	607a      	str	r2, [r7, #4]
 80080fe:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b02      	cmp	r3, #2
 800810a:	d101      	bne.n	8008110 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 800810c:	2302      	movs	r3, #2
 800810e:	e01d      	b.n	800814c <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008116:	2b01      	cmp	r3, #1
 8008118:	d101      	bne.n	800811e <HAL_HRTIM_WaveformOutputConfig+0x2c>
 800811a:	2302      	movs	r3, #2
 800811c:	e016      	b.n	800814c <HAL_HRTIM_WaveformOutputConfig+0x5a>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2202      	movs	r2, #2
 800812a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	68b9      	ldr	r1, [r7, #8]
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 fa23 	bl	8008580 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f023 0307 	bic.w	r3, r3, #7
 800816c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	4313      	orrs	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f023 0318 	bic.w	r3, r3, #24
 800817e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	4313      	orrs	r3, r2
 8008188:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	6812      	ldr	r2, [r2, #0]
 800819a:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	683a      	ldr	r2, [r7, #0]
 80081a2:	6852      	ldr	r2, [r2, #4]
 80081a4:	619a      	str	r2, [r3, #24]
}
 80081a6:	bf00      	nop
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b087      	sub	sp, #28
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	3301      	adds	r3, #1
 80081c6:	01db      	lsls	r3, r3, #7
 80081c8:	4413      	add	r3, r2
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f023 0307 	bic.w	r3, r3, #7
 80081d4:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	4313      	orrs	r3, r2
 80081de:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f023 0318 	bic.w	r3, r3, #24
 80081e6:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	3301      	adds	r3, #1
 80081fa:	01db      	lsls	r3, r3, #7
 80081fc:	4413      	add	r3, r2
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6819      	ldr	r1, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	01db      	lsls	r3, r3, #7
 800820e:	440b      	add	r3, r1
 8008210:	3394      	adds	r3, #148	; 0x94
 8008212:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6819      	ldr	r1, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	01db      	lsls	r3, r3, #7
 8008220:	440b      	add	r3, r1
 8008222:	3398      	adds	r3, #152	; 0x98
 8008224:	601a      	str	r2, [r3, #0]
}
 8008226:	bf00      	nop
 8008228:	371c      	adds	r7, #28
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008232:	b480      	push	{r7}
 8008234:	b085      	sub	sp, #20
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 800824c:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f023 0320 	bic.w	r3, r3, #32
 8008254:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	4313      	orrs	r3, r2
 800825e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008266:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	4313      	orrs	r3, r2
 8008270:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008278:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	4313      	orrs	r3, r2
 8008282:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800828a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	6a1b      	ldr	r3, [r3, #32]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	4313      	orrs	r3, r2
 8008294:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800829c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80082ae:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80082c2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082d4:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	4313      	orrs	r3, r2
 80082de:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80082f2:	bf00      	nop
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
	...

08008300 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008300:	b480      	push	{r7}
 8008302:	b08b      	sub	sp, #44	; 0x2c
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	3301      	adds	r3, #1
 8008314:	01db      	lsls	r3, r3, #7
 8008316:	4413      	add	r3, r2
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	6811      	ldr	r1, [r2, #0]
 800831e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	3301      	adds	r3, #1
 8008326:	01db      	lsls	r3, r3, #7
 8008328:	440b      	add	r3, r1
 800832a:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	3301      	adds	r3, #1
 8008334:	01db      	lsls	r3, r3, #7
 8008336:	4413      	add	r3, r2
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	01db      	lsls	r3, r3, #7
 8008344:	4413      	add	r3, r2
 8008346:	33e8      	adds	r3, #232	; 0xe8
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	01db      	lsls	r3, r3, #7
 8008354:	4413      	add	r3, r2
 8008356:	33e4      	adds	r3, #228	; 0xe4
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008364:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008368:	f023 0320 	bic.w	r3, r3, #32
 800836c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008374:	4313      	orrs	r3, r2
 8008376:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800837e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008386:	4313      	orrs	r3, r2
 8008388:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800838a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008398:	4313      	orrs	r3, r2
 800839a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80083a2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083aa:	4313      	orrs	r3, r2
 80083ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80083b4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083bc:	4313      	orrs	r3, r2
 80083be:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ce:	4313      	orrs	r3, r2
 80083d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80083d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083e2:	d103      	bne.n	80083ec <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083ea:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083f2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083fa:	4313      	orrs	r3, r2
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008404:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800840a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800840c:	4313      	orrs	r3, r2
 800840e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8008416:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800841c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841e:	4313      	orrs	r3, r2
 8008420:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	f023 031f 	bic.w	r3, r3, #31
 8008428:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842e:	f003 031f 	and.w	r3, r3, #31
 8008432:	69ba      	ldr	r2, [r7, #24]
 8008434:	4313      	orrs	r3, r2
 8008436:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800843e:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008444:	69ba      	ldr	r2, [r7, #24]
 8008446:	4313      	orrs	r3, r2
 8008448:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844e:	2b00      	cmp	r3, #0
 8008450:	d108      	bne.n	8008464 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008458:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845e:	6a3a      	ldr	r2, [r7, #32]
 8008460:	4313      	orrs	r3, r2
 8008462:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008468:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800846c:	d004      	beq.n	8008478 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008472:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8008476:	d103      	bne.n	8008480 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847c:	2b40      	cmp	r3, #64	; 0x40
 800847e:	d108      	bne.n	8008492 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8008480:	6a3b      	ldr	r3, [r7, #32]
 8008482:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8008486:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800848c:	6a3a      	ldr	r2, [r7, #32]
 800848e:	4313      	orrs	r3, r2
 8008490:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008496:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2b04      	cmp	r3, #4
 800849c:	d843      	bhi.n	8008526 <HRTIM_TimingUnitWaveform_Config+0x226>
 800849e:	a201      	add	r2, pc, #4	; (adr r2, 80084a4 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 80084a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a4:	080084b9 	.word	0x080084b9
 80084a8:	080084cf 	.word	0x080084cf
 80084ac:	080084e5 	.word	0x080084e5
 80084b0:	080084fb 	.word	0x080084fb
 80084b4:	08008511 	.word	0x08008511
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80084be:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c4:	005b      	lsls	r3, r3, #1
 80084c6:	69fa      	ldr	r2, [r7, #28]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	61fb      	str	r3, [r7, #28]
      break;
 80084cc:	e02c      	b.n	8008528 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084d4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	69fa      	ldr	r2, [r7, #28]
 80084de:	4313      	orrs	r3, r2
 80084e0:	61fb      	str	r3, [r7, #28]
      break;
 80084e2:	e021      	b.n	8008528 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80084ea:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f0:	00db      	lsls	r3, r3, #3
 80084f2:	69fa      	ldr	r2, [r7, #28]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	61fb      	str	r3, [r7, #28]
      break;
 80084f8:	e016      	b.n	8008528 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008500:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008506:	011b      	lsls	r3, r3, #4
 8008508:	69fa      	ldr	r2, [r7, #28]
 800850a:	4313      	orrs	r3, r2
 800850c:	61fb      	str	r3, [r7, #28]
      break;
 800850e:	e00b      	b.n	8008528 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008516:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851c:	015b      	lsls	r3, r3, #5
 800851e:	69fa      	ldr	r2, [r7, #28]
 8008520:	4313      	orrs	r3, r2
 8008522:	61fb      	str	r3, [r7, #28]
      break;
 8008524:	e000      	b.n	8008528 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8008526:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	3301      	adds	r3, #1
 8008530:	01db      	lsls	r3, r3, #7
 8008532:	4413      	add	r3, r2
 8008534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008536:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	01db      	lsls	r3, r3, #7
 8008540:	4413      	add	r3, r2
 8008542:	33e8      	adds	r3, #232	; 0xe8
 8008544:	69ba      	ldr	r2, [r7, #24]
 8008546:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	01db      	lsls	r3, r3, #7
 8008550:	4413      	add	r3, r2
 8008552:	33e4      	adds	r3, #228	; 0xe4
 8008554:	6a3a      	ldr	r2, [r7, #32]
 8008556:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	01db      	lsls	r3, r3, #7
 8008560:	4413      	add	r3, r2
 8008562:	33d4      	adds	r3, #212	; 0xd4
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	69fa      	ldr	r2, [r7, #28]
 800856e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008572:	bf00      	nop
 8008574:	372c      	adds	r7, #44	; 0x2c
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop

08008580 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008580:	b480      	push	{r7}
 8008582:	b089      	sub	sp, #36	; 0x24
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
 800858c:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800858e:	2300      	movs	r3, #0
 8008590:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	01db      	lsls	r3, r3, #7
 800859a:	4413      	add	r3, r2
 800859c:	33e4      	adds	r3, #228	; 0xe4
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	01db      	lsls	r3, r3, #7
 80085aa:	4413      	add	r3, r2
 80085ac:	33b8      	adds	r3, #184	; 0xb8
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	617b      	str	r3, [r7, #20]

  switch (Output)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085b8:	d04d      	beq.n	8008656 <HRTIM_OutputConfig+0xd6>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085c0:	d85e      	bhi.n	8008680 <HRTIM_OutputConfig+0x100>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c8:	d032      	beq.n	8008630 <HRTIM_OutputConfig+0xb0>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085d0:	d856      	bhi.n	8008680 <HRTIM_OutputConfig+0x100>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2b80      	cmp	r3, #128	; 0x80
 80085d6:	d03e      	beq.n	8008656 <HRTIM_OutputConfig+0xd6>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b80      	cmp	r3, #128	; 0x80
 80085dc:	d850      	bhi.n	8008680 <HRTIM_OutputConfig+0x100>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2b40      	cmp	r3, #64	; 0x40
 80085e2:	d025      	beq.n	8008630 <HRTIM_OutputConfig+0xb0>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b40      	cmp	r3, #64	; 0x40
 80085e8:	d84a      	bhi.n	8008680 <HRTIM_OutputConfig+0x100>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d01f      	beq.n	8008630 <HRTIM_OutputConfig+0xb0>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d044      	beq.n	8008680 <HRTIM_OutputConfig+0x100>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b20      	cmp	r3, #32
 80085fa:	d841      	bhi.n	8008680 <HRTIM_OutputConfig+0x100>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d33e      	bcc.n	8008680 <HRTIM_OutputConfig+0x100>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	3b02      	subs	r3, #2
 8008606:	2201      	movs	r2, #1
 8008608:	409a      	lsls	r2, r3
 800860a:	4b48      	ldr	r3, [pc, #288]	; (800872c <HRTIM_OutputConfig+0x1ac>)
 800860c:	4013      	ands	r3, r2
 800860e:	2b00      	cmp	r3, #0
 8008610:	bf14      	ite	ne
 8008612:	2301      	movne	r3, #1
 8008614:	2300      	moveq	r3, #0
 8008616:	b2db      	uxtb	r3, r3
 8008618:	2b00      	cmp	r3, #0
 800861a:	d11c      	bne.n	8008656 <HRTIM_OutputConfig+0xd6>
 800861c:	f244 0304 	movw	r3, #16388	; 0x4004
 8008620:	4013      	ands	r3, r2
 8008622:	2b00      	cmp	r3, #0
 8008624:	bf14      	ite	ne
 8008626:	2301      	movne	r3, #1
 8008628:	2300      	moveq	r3, #0
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d027      	beq.n	8008680 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6819      	ldr	r1, [r3, #0]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	01db      	lsls	r3, r3, #7
 800863c:	440b      	add	r3, r1
 800863e:	33bc      	adds	r3, #188	; 0xbc
 8008640:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6819      	ldr	r1, [r3, #0]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	689a      	ldr	r2, [r3, #8]
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	01db      	lsls	r3, r3, #7
 800864e:	440b      	add	r3, r1
 8008650:	33c0      	adds	r3, #192	; 0xc0
 8008652:	601a      	str	r2, [r3, #0]
      break;
 8008654:	e015      	b.n	8008682 <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6819      	ldr	r1, [r3, #0]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	01db      	lsls	r3, r3, #7
 8008662:	440b      	add	r3, r1
 8008664:	33c4      	adds	r3, #196	; 0xc4
 8008666:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6819      	ldr	r1, [r3, #0]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	689a      	ldr	r2, [r3, #8]
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	01db      	lsls	r3, r3, #7
 8008674:	440b      	add	r3, r1
 8008676:	33c8      	adds	r3, #200	; 0xc8
 8008678:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800867a:	2310      	movs	r3, #16
 800867c:	61bb      	str	r3, [r7, #24]
      break;
 800867e:	e000      	b.n	8008682 <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8008680:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8008682:	22fe      	movs	r2, #254	; 0xfe
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800868a:	43db      	mvns	r3, r3
 800868c:	69fa      	ldr	r2, [r7, #28]
 800868e:	4013      	ands	r3, r2
 8008690:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	fa02 f303 	lsl.w	r3, r2, r3
 800869c:	69fa      	ldr	r2, [r7, #28]
 800869e:	4313      	orrs	r3, r2
 80086a0:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	68da      	ldr	r2, [r3, #12]
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	fa02 f303 	lsl.w	r3, r2, r3
 80086ac:	69fa      	ldr	r2, [r7, #28]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	691a      	ldr	r2, [r3, #16]
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	fa02 f303 	lsl.w	r3, r2, r3
 80086bc:	69fa      	ldr	r2, [r7, #28]
 80086be:	4313      	orrs	r3, r2
 80086c0:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	695a      	ldr	r2, [r3, #20]
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	fa02 f303 	lsl.w	r3, r2, r3
 80086cc:	69fa      	ldr	r2, [r7, #28]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	699a      	ldr	r2, [r3, #24]
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	fa02 f303 	lsl.w	r3, r2, r3
 80086dc:	69fa      	ldr	r2, [r7, #28]
 80086de:	4313      	orrs	r3, r2
 80086e0:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	2b08      	cmp	r3, #8
 80086e8:	d111      	bne.n	800870e <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10c      	bne.n	800870e <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d107      	bne.n	800870e <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	69da      	ldr	r2, [r3, #28]
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	fa02 f303 	lsl.w	r3, r2, r3
 8008708:	69fa      	ldr	r2, [r7, #28]
 800870a:	4313      	orrs	r3, r2
 800870c:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	01db      	lsls	r3, r3, #7
 8008716:	4413      	add	r3, r2
 8008718:	33e4      	adds	r3, #228	; 0xe4
 800871a:	69fa      	ldr	r2, [r7, #28]
 800871c:	601a      	str	r2, [r3, #0]
}
 800871e:	bf00      	nop
 8008720:	3724      	adds	r7, #36	; 0x24
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	40000041 	.word	0x40000041

08008730 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2b05      	cmp	r3, #5
 800873e:	d851      	bhi.n	80087e4 <HRTIM_ForceRegistersUpdate+0xb4>
 8008740:	a201      	add	r2, pc, #4	; (adr r2, 8008748 <HRTIM_ForceRegistersUpdate+0x18>)
 8008742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008746:	bf00      	nop
 8008748:	08008777 	.word	0x08008777
 800874c:	0800878d 	.word	0x0800878d
 8008750:	080087a3 	.word	0x080087a3
 8008754:	080087b9 	.word	0x080087b9
 8008758:	080087cf 	.word	0x080087cf
 800875c:	08008761 	.word	0x08008761
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f042 0201 	orr.w	r2, r2, #1
 8008770:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008774:	e037      	b.n	80087e6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0202 	orr.w	r2, r2, #2
 8008786:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800878a:	e02c      	b.n	80087e6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f042 0204 	orr.w	r2, r2, #4
 800879c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80087a0:	e021      	b.n	80087e6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0208 	orr.w	r2, r2, #8
 80087b2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80087b6:	e016      	b.n	80087e6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f042 0210 	orr.w	r2, r2, #16
 80087c8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80087cc:	e00b      	b.n	80087e6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f042 0220 	orr.w	r2, r2, #32
 80087de:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80087e2:	e000      	b.n	80087e6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 80087e4:	bf00      	nop
  }
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop

080087f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e07f      	b.n	8008906 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b00      	cmp	r3, #0
 8008810:	d106      	bne.n	8008820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7f9 f83c 	bl	8001898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2224      	movs	r2, #36	; 0x24
 8008824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f022 0201 	bic.w	r2, r2, #1
 8008836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685a      	ldr	r2, [r3, #4]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008844:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008854:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	2b01      	cmp	r3, #1
 800885c:	d107      	bne.n	800886e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	689a      	ldr	r2, [r3, #8]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800886a:	609a      	str	r2, [r3, #8]
 800886c:	e006      	b.n	800887c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689a      	ldr	r2, [r3, #8]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800887a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	2b02      	cmp	r3, #2
 8008882:	d104      	bne.n	800888e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800888c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6859      	ldr	r1, [r3, #4]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	4b1d      	ldr	r3, [pc, #116]	; (8008910 <HAL_I2C_Init+0x11c>)
 800889a:	430b      	orrs	r3, r1
 800889c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68da      	ldr	r2, [r3, #12]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	691a      	ldr	r2, [r3, #16]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	430a      	orrs	r2, r1
 80088c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	69d9      	ldr	r1, [r3, #28]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a1a      	ldr	r2, [r3, #32]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	430a      	orrs	r2, r1
 80088d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f042 0201 	orr.w	r2, r2, #1
 80088e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2220      	movs	r2, #32
 80088f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	02008000 	.word	0x02008000

08008914 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b20      	cmp	r3, #32
 8008928:	d138      	bne.n	800899c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008930:	2b01      	cmp	r3, #1
 8008932:	d101      	bne.n	8008938 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008934:	2302      	movs	r3, #2
 8008936:	e032      	b.n	800899e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2224      	movs	r2, #36	; 0x24
 8008944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f022 0201 	bic.w	r2, r2, #1
 8008956:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008966:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6819      	ldr	r1, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	430a      	orrs	r2, r1
 8008976:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f042 0201 	orr.w	r2, r2, #1
 8008986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2220      	movs	r2, #32
 800898c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	e000      	b.n	800899e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800899c:	2302      	movs	r3, #2
  }
}
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b085      	sub	sp, #20
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b20      	cmp	r3, #32
 80089be:	d139      	bne.n	8008a34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d101      	bne.n	80089ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80089ca:	2302      	movs	r3, #2
 80089cc:	e033      	b.n	8008a36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2224      	movs	r2, #36	; 0x24
 80089da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f022 0201 	bic.w	r2, r2, #1
 80089ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80089fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	021b      	lsls	r3, r3, #8
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f042 0201 	orr.w	r2, r2, #1
 8008a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2220      	movs	r2, #32
 8008a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	e000      	b.n	8008a36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008a34:	2302      	movs	r3, #2
  }
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
	...

08008a44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008a4c:	4b19      	ldr	r3, [pc, #100]	; (8008ab4 <HAL_PWREx_ConfigSupply+0x70>)
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f003 0304 	and.w	r3, r3, #4
 8008a54:	2b04      	cmp	r3, #4
 8008a56:	d00a      	beq.n	8008a6e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008a58:	4b16      	ldr	r3, [pc, #88]	; (8008ab4 <HAL_PWREx_ConfigSupply+0x70>)
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f003 0307 	and.w	r3, r3, #7
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d001      	beq.n	8008a6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e01f      	b.n	8008aaa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	e01d      	b.n	8008aaa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008a6e:	4b11      	ldr	r3, [pc, #68]	; (8008ab4 <HAL_PWREx_ConfigSupply+0x70>)
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	f023 0207 	bic.w	r2, r3, #7
 8008a76:	490f      	ldr	r1, [pc, #60]	; (8008ab4 <HAL_PWREx_ConfigSupply+0x70>)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008a7e:	f7fb fb35 	bl	80040ec <HAL_GetTick>
 8008a82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008a84:	e009      	b.n	8008a9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008a86:	f7fb fb31 	bl	80040ec <HAL_GetTick>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	1ad3      	subs	r3, r2, r3
 8008a90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a94:	d901      	bls.n	8008a9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e007      	b.n	8008aaa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008a9a:	4b06      	ldr	r3, [pc, #24]	; (8008ab4 <HAL_PWREx_ConfigSupply+0x70>)
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aa6:	d1ee      	bne.n	8008a86 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	58024800 	.word	0x58024800

08008ab8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b08c      	sub	sp, #48	; 0x30
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d102      	bne.n	8008acc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	f000 bc48 	b.w	800935c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 0301 	and.w	r3, r3, #1
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 8088 	beq.w	8008bea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ada:	4b99      	ldr	r3, [pc, #612]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ae4:	4b96      	ldr	r3, [pc, #600]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aec:	2b10      	cmp	r3, #16
 8008aee:	d007      	beq.n	8008b00 <HAL_RCC_OscConfig+0x48>
 8008af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af2:	2b18      	cmp	r3, #24
 8008af4:	d111      	bne.n	8008b1a <HAL_RCC_OscConfig+0x62>
 8008af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af8:	f003 0303 	and.w	r3, r3, #3
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d10c      	bne.n	8008b1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b00:	4b8f      	ldr	r3, [pc, #572]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d06d      	beq.n	8008be8 <HAL_RCC_OscConfig+0x130>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d169      	bne.n	8008be8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	f000 bc21 	b.w	800935c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b22:	d106      	bne.n	8008b32 <HAL_RCC_OscConfig+0x7a>
 8008b24:	4b86      	ldr	r3, [pc, #536]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a85      	ldr	r2, [pc, #532]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b2e:	6013      	str	r3, [r2, #0]
 8008b30:	e02e      	b.n	8008b90 <HAL_RCC_OscConfig+0xd8>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10c      	bne.n	8008b54 <HAL_RCC_OscConfig+0x9c>
 8008b3a:	4b81      	ldr	r3, [pc, #516]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a80      	ldr	r2, [pc, #512]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b44:	6013      	str	r3, [r2, #0]
 8008b46:	4b7e      	ldr	r3, [pc, #504]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a7d      	ldr	r2, [pc, #500]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b50:	6013      	str	r3, [r2, #0]
 8008b52:	e01d      	b.n	8008b90 <HAL_RCC_OscConfig+0xd8>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b5c:	d10c      	bne.n	8008b78 <HAL_RCC_OscConfig+0xc0>
 8008b5e:	4b78      	ldr	r3, [pc, #480]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a77      	ldr	r2, [pc, #476]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b68:	6013      	str	r3, [r2, #0]
 8008b6a:	4b75      	ldr	r3, [pc, #468]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a74      	ldr	r2, [pc, #464]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	e00b      	b.n	8008b90 <HAL_RCC_OscConfig+0xd8>
 8008b78:	4b71      	ldr	r3, [pc, #452]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a70      	ldr	r2, [pc, #448]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	4b6e      	ldr	r3, [pc, #440]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a6d      	ldr	r2, [pc, #436]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d013      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b98:	f7fb faa8 	bl	80040ec <HAL_GetTick>
 8008b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b9e:	e008      	b.n	8008bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ba0:	f7fb faa4 	bl	80040ec <HAL_GetTick>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	2b64      	cmp	r3, #100	; 0x64
 8008bac:	d901      	bls.n	8008bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e3d4      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008bb2:	4b63      	ldr	r3, [pc, #396]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d0f0      	beq.n	8008ba0 <HAL_RCC_OscConfig+0xe8>
 8008bbe:	e014      	b.n	8008bea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bc0:	f7fb fa94 	bl	80040ec <HAL_GetTick>
 8008bc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008bc6:	e008      	b.n	8008bda <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bc8:	f7fb fa90 	bl	80040ec <HAL_GetTick>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	2b64      	cmp	r3, #100	; 0x64
 8008bd4:	d901      	bls.n	8008bda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e3c0      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008bda:	4b59      	ldr	r3, [pc, #356]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1f0      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x110>
 8008be6:	e000      	b.n	8008bea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0302 	and.w	r3, r3, #2
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f000 80ca 	beq.w	8008d8c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bf8:	4b51      	ldr	r3, [pc, #324]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c00:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c02:	4b4f      	ldr	r3, [pc, #316]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c06:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008c08:	6a3b      	ldr	r3, [r7, #32]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d007      	beq.n	8008c1e <HAL_RCC_OscConfig+0x166>
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	2b18      	cmp	r3, #24
 8008c12:	d156      	bne.n	8008cc2 <HAL_RCC_OscConfig+0x20a>
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	f003 0303 	and.w	r3, r3, #3
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d151      	bne.n	8008cc2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c1e:	4b48      	ldr	r3, [pc, #288]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0304 	and.w	r3, r3, #4
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d005      	beq.n	8008c36 <HAL_RCC_OscConfig+0x17e>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e392      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008c36:	4b42      	ldr	r3, [pc, #264]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f023 0219 	bic.w	r2, r3, #25
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	493f      	ldr	r1, [pc, #252]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008c44:	4313      	orrs	r3, r2
 8008c46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c48:	f7fb fa50 	bl	80040ec <HAL_GetTick>
 8008c4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c4e:	e008      	b.n	8008c62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c50:	f7fb fa4c 	bl	80040ec <HAL_GetTick>
 8008c54:	4602      	mov	r2, r0
 8008c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d901      	bls.n	8008c62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e37c      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c62:	4b37      	ldr	r3, [pc, #220]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 0304 	and.w	r3, r3, #4
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d0f0      	beq.n	8008c50 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c6e:	f7fb fa6d 	bl	800414c <HAL_GetREVID>
 8008c72:	4603      	mov	r3, r0
 8008c74:	f241 0203 	movw	r2, #4099	; 0x1003
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d817      	bhi.n	8008cac <HAL_RCC_OscConfig+0x1f4>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	2b40      	cmp	r3, #64	; 0x40
 8008c82:	d108      	bne.n	8008c96 <HAL_RCC_OscConfig+0x1de>
 8008c84:	4b2e      	ldr	r3, [pc, #184]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008c8c:	4a2c      	ldr	r2, [pc, #176]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c92:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c94:	e07a      	b.n	8008d8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c96:	4b2a      	ldr	r3, [pc, #168]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	031b      	lsls	r3, r3, #12
 8008ca4:	4926      	ldr	r1, [pc, #152]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008caa:	e06f      	b.n	8008d8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cac:	4b24      	ldr	r3, [pc, #144]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	061b      	lsls	r3, r3, #24
 8008cba:	4921      	ldr	r1, [pc, #132]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cc0:	e064      	b.n	8008d8c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d047      	beq.n	8008d5a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008cca:	4b1d      	ldr	r3, [pc, #116]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f023 0219 	bic.w	r2, r3, #25
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	491a      	ldr	r1, [pc, #104]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cdc:	f7fb fa06 	bl	80040ec <HAL_GetTick>
 8008ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ce2:	e008      	b.n	8008cf6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ce4:	f7fb fa02 	bl	80040ec <HAL_GetTick>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d901      	bls.n	8008cf6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e332      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cf6:	4b12      	ldr	r3, [pc, #72]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0304 	and.w	r3, r3, #4
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d0f0      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d02:	f7fb fa23 	bl	800414c <HAL_GetREVID>
 8008d06:	4603      	mov	r3, r0
 8008d08:	f241 0203 	movw	r2, #4099	; 0x1003
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d819      	bhi.n	8008d44 <HAL_RCC_OscConfig+0x28c>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	2b40      	cmp	r3, #64	; 0x40
 8008d16:	d108      	bne.n	8008d2a <HAL_RCC_OscConfig+0x272>
 8008d18:	4b09      	ldr	r3, [pc, #36]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008d20:	4a07      	ldr	r2, [pc, #28]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d26:	6053      	str	r3, [r2, #4]
 8008d28:	e030      	b.n	8008d8c <HAL_RCC_OscConfig+0x2d4>
 8008d2a:	4b05      	ldr	r3, [pc, #20]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	031b      	lsls	r3, r3, #12
 8008d38:	4901      	ldr	r1, [pc, #4]	; (8008d40 <HAL_RCC_OscConfig+0x288>)
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	604b      	str	r3, [r1, #4]
 8008d3e:	e025      	b.n	8008d8c <HAL_RCC_OscConfig+0x2d4>
 8008d40:	58024400 	.word	0x58024400
 8008d44:	4b9a      	ldr	r3, [pc, #616]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	061b      	lsls	r3, r3, #24
 8008d52:	4997      	ldr	r1, [pc, #604]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008d54:	4313      	orrs	r3, r2
 8008d56:	604b      	str	r3, [r1, #4]
 8008d58:	e018      	b.n	8008d8c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d5a:	4b95      	ldr	r3, [pc, #596]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a94      	ldr	r2, [pc, #592]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008d60:	f023 0301 	bic.w	r3, r3, #1
 8008d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d66:	f7fb f9c1 	bl	80040ec <HAL_GetTick>
 8008d6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d6c:	e008      	b.n	8008d80 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d6e:	f7fb f9bd 	bl	80040ec <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d901      	bls.n	8008d80 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e2ed      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d80:	4b8b      	ldr	r3, [pc, #556]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0304 	and.w	r3, r3, #4
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1f0      	bne.n	8008d6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0310 	and.w	r3, r3, #16
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 80a9 	beq.w	8008eec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d9a:	4b85      	ldr	r3, [pc, #532]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008da2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008da4:	4b82      	ldr	r3, [pc, #520]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	2b08      	cmp	r3, #8
 8008dae:	d007      	beq.n	8008dc0 <HAL_RCC_OscConfig+0x308>
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	2b18      	cmp	r3, #24
 8008db4:	d13a      	bne.n	8008e2c <HAL_RCC_OscConfig+0x374>
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f003 0303 	and.w	r3, r3, #3
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d135      	bne.n	8008e2c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008dc0:	4b7b      	ldr	r3, [pc, #492]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d005      	beq.n	8008dd8 <HAL_RCC_OscConfig+0x320>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	2b80      	cmp	r3, #128	; 0x80
 8008dd2:	d001      	beq.n	8008dd8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e2c1      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008dd8:	f7fb f9b8 	bl	800414c <HAL_GetREVID>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	f241 0203 	movw	r2, #4099	; 0x1003
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d817      	bhi.n	8008e16 <HAL_RCC_OscConfig+0x35e>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	2b20      	cmp	r3, #32
 8008dec:	d108      	bne.n	8008e00 <HAL_RCC_OscConfig+0x348>
 8008dee:	4b70      	ldr	r3, [pc, #448]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008df6:	4a6e      	ldr	r2, [pc, #440]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008df8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dfc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008dfe:	e075      	b.n	8008eec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e00:	4b6b      	ldr	r3, [pc, #428]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a1b      	ldr	r3, [r3, #32]
 8008e0c:	069b      	lsls	r3, r3, #26
 8008e0e:	4968      	ldr	r1, [pc, #416]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008e10:	4313      	orrs	r3, r2
 8008e12:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e14:	e06a      	b.n	8008eec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e16:	4b66      	ldr	r3, [pc, #408]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	061b      	lsls	r3, r3, #24
 8008e24:	4962      	ldr	r1, [pc, #392]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008e2a:	e05f      	b.n	8008eec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	69db      	ldr	r3, [r3, #28]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d042      	beq.n	8008eba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008e34:	4b5e      	ldr	r3, [pc, #376]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a5d      	ldr	r2, [pc, #372]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e40:	f7fb f954 	bl	80040ec <HAL_GetTick>
 8008e44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e46:	e008      	b.n	8008e5a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008e48:	f7fb f950 	bl	80040ec <HAL_GetTick>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d901      	bls.n	8008e5a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e280      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e5a:	4b55      	ldr	r3, [pc, #340]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d0f0      	beq.n	8008e48 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008e66:	f7fb f971 	bl	800414c <HAL_GetREVID>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d817      	bhi.n	8008ea4 <HAL_RCC_OscConfig+0x3ec>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
 8008e78:	2b20      	cmp	r3, #32
 8008e7a:	d108      	bne.n	8008e8e <HAL_RCC_OscConfig+0x3d6>
 8008e7c:	4b4c      	ldr	r3, [pc, #304]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008e84:	4a4a      	ldr	r2, [pc, #296]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008e86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e8a:	6053      	str	r3, [r2, #4]
 8008e8c:	e02e      	b.n	8008eec <HAL_RCC_OscConfig+0x434>
 8008e8e:	4b48      	ldr	r3, [pc, #288]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	069b      	lsls	r3, r3, #26
 8008e9c:	4944      	ldr	r1, [pc, #272]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	604b      	str	r3, [r1, #4]
 8008ea2:	e023      	b.n	8008eec <HAL_RCC_OscConfig+0x434>
 8008ea4:	4b42      	ldr	r3, [pc, #264]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a1b      	ldr	r3, [r3, #32]
 8008eb0:	061b      	lsls	r3, r3, #24
 8008eb2:	493f      	ldr	r1, [pc, #252]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	60cb      	str	r3, [r1, #12]
 8008eb8:	e018      	b.n	8008eec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008eba:	4b3d      	ldr	r3, [pc, #244]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a3c      	ldr	r2, [pc, #240]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec6:	f7fb f911 	bl	80040ec <HAL_GetTick>
 8008eca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ecc:	e008      	b.n	8008ee0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008ece:	f7fb f90d 	bl	80040ec <HAL_GetTick>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d901      	bls.n	8008ee0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008edc:	2303      	movs	r3, #3
 8008ede:	e23d      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ee0:	4b33      	ldr	r3, [pc, #204]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1f0      	bne.n	8008ece <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0308 	and.w	r3, r3, #8
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d036      	beq.n	8008f66 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	695b      	ldr	r3, [r3, #20]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d019      	beq.n	8008f34 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f00:	4b2b      	ldr	r3, [pc, #172]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f04:	4a2a      	ldr	r2, [pc, #168]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008f06:	f043 0301 	orr.w	r3, r3, #1
 8008f0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f0c:	f7fb f8ee 	bl	80040ec <HAL_GetTick>
 8008f10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f12:	e008      	b.n	8008f26 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f14:	f7fb f8ea 	bl	80040ec <HAL_GetTick>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	2b02      	cmp	r3, #2
 8008f20:	d901      	bls.n	8008f26 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e21a      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f26:	4b22      	ldr	r3, [pc, #136]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f2a:	f003 0302 	and.w	r3, r3, #2
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d0f0      	beq.n	8008f14 <HAL_RCC_OscConfig+0x45c>
 8008f32:	e018      	b.n	8008f66 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f34:	4b1e      	ldr	r3, [pc, #120]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f38:	4a1d      	ldr	r2, [pc, #116]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008f3a:	f023 0301 	bic.w	r3, r3, #1
 8008f3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f40:	f7fb f8d4 	bl	80040ec <HAL_GetTick>
 8008f44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f46:	e008      	b.n	8008f5a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f48:	f7fb f8d0 	bl	80040ec <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d901      	bls.n	8008f5a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e200      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008f5a:	4b15      	ldr	r3, [pc, #84]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1f0      	bne.n	8008f48 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0320 	and.w	r3, r3, #32
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d039      	beq.n	8008fe6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d01c      	beq.n	8008fb4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008f7a:	4b0d      	ldr	r3, [pc, #52]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a0c      	ldr	r2, [pc, #48]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008f80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008f86:	f7fb f8b1 	bl	80040ec <HAL_GetTick>
 8008f8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008f8c:	e008      	b.n	8008fa0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008f8e:	f7fb f8ad 	bl	80040ec <HAL_GetTick>
 8008f92:	4602      	mov	r2, r0
 8008f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d901      	bls.n	8008fa0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e1dd      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008fa0:	4b03      	ldr	r3, [pc, #12]	; (8008fb0 <HAL_RCC_OscConfig+0x4f8>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d0f0      	beq.n	8008f8e <HAL_RCC_OscConfig+0x4d6>
 8008fac:	e01b      	b.n	8008fe6 <HAL_RCC_OscConfig+0x52e>
 8008fae:	bf00      	nop
 8008fb0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008fb4:	4b9b      	ldr	r3, [pc, #620]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a9a      	ldr	r2, [pc, #616]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8008fba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008fc0:	f7fb f894 	bl	80040ec <HAL_GetTick>
 8008fc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008fc6:	e008      	b.n	8008fda <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fc8:	f7fb f890 	bl	80040ec <HAL_GetTick>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d901      	bls.n	8008fda <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e1c0      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008fda:	4b92      	ldr	r3, [pc, #584]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1f0      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 0304 	and.w	r3, r3, #4
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f000 8081 	beq.w	80090f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008ff4:	4b8c      	ldr	r3, [pc, #560]	; (8009228 <HAL_RCC_OscConfig+0x770>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a8b      	ldr	r2, [pc, #556]	; (8009228 <HAL_RCC_OscConfig+0x770>)
 8008ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ffe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009000:	f7fb f874 	bl	80040ec <HAL_GetTick>
 8009004:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009006:	e008      	b.n	800901a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009008:	f7fb f870 	bl	80040ec <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	2b64      	cmp	r3, #100	; 0x64
 8009014:	d901      	bls.n	800901a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e1a0      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800901a:	4b83      	ldr	r3, [pc, #524]	; (8009228 <HAL_RCC_OscConfig+0x770>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009022:	2b00      	cmp	r3, #0
 8009024:	d0f0      	beq.n	8009008 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d106      	bne.n	800903c <HAL_RCC_OscConfig+0x584>
 800902e:	4b7d      	ldr	r3, [pc, #500]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009032:	4a7c      	ldr	r2, [pc, #496]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009034:	f043 0301 	orr.w	r3, r3, #1
 8009038:	6713      	str	r3, [r2, #112]	; 0x70
 800903a:	e02d      	b.n	8009098 <HAL_RCC_OscConfig+0x5e0>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10c      	bne.n	800905e <HAL_RCC_OscConfig+0x5a6>
 8009044:	4b77      	ldr	r3, [pc, #476]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009048:	4a76      	ldr	r2, [pc, #472]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 800904a:	f023 0301 	bic.w	r3, r3, #1
 800904e:	6713      	str	r3, [r2, #112]	; 0x70
 8009050:	4b74      	ldr	r3, [pc, #464]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009054:	4a73      	ldr	r2, [pc, #460]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009056:	f023 0304 	bic.w	r3, r3, #4
 800905a:	6713      	str	r3, [r2, #112]	; 0x70
 800905c:	e01c      	b.n	8009098 <HAL_RCC_OscConfig+0x5e0>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	2b05      	cmp	r3, #5
 8009064:	d10c      	bne.n	8009080 <HAL_RCC_OscConfig+0x5c8>
 8009066:	4b6f      	ldr	r3, [pc, #444]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800906a:	4a6e      	ldr	r2, [pc, #440]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 800906c:	f043 0304 	orr.w	r3, r3, #4
 8009070:	6713      	str	r3, [r2, #112]	; 0x70
 8009072:	4b6c      	ldr	r3, [pc, #432]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009076:	4a6b      	ldr	r2, [pc, #428]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009078:	f043 0301 	orr.w	r3, r3, #1
 800907c:	6713      	str	r3, [r2, #112]	; 0x70
 800907e:	e00b      	b.n	8009098 <HAL_RCC_OscConfig+0x5e0>
 8009080:	4b68      	ldr	r3, [pc, #416]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009084:	4a67      	ldr	r2, [pc, #412]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009086:	f023 0301 	bic.w	r3, r3, #1
 800908a:	6713      	str	r3, [r2, #112]	; 0x70
 800908c:	4b65      	ldr	r3, [pc, #404]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 800908e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009090:	4a64      	ldr	r2, [pc, #400]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009092:	f023 0304 	bic.w	r3, r3, #4
 8009096:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d015      	beq.n	80090cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090a0:	f7fb f824 	bl	80040ec <HAL_GetTick>
 80090a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090a6:	e00a      	b.n	80090be <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090a8:	f7fb f820 	bl	80040ec <HAL_GetTick>
 80090ac:	4602      	mov	r2, r0
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d901      	bls.n	80090be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80090ba:	2303      	movs	r3, #3
 80090bc:	e14e      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090be:	4b59      	ldr	r3, [pc, #356]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 80090c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c2:	f003 0302 	and.w	r3, r3, #2
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d0ee      	beq.n	80090a8 <HAL_RCC_OscConfig+0x5f0>
 80090ca:	e014      	b.n	80090f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090cc:	f7fb f80e 	bl	80040ec <HAL_GetTick>
 80090d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80090d2:	e00a      	b.n	80090ea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090d4:	f7fb f80a 	bl	80040ec <HAL_GetTick>
 80090d8:	4602      	mov	r2, r0
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d901      	bls.n	80090ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e138      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80090ea:	4b4e      	ldr	r3, [pc, #312]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 80090ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ee:	f003 0302 	and.w	r3, r3, #2
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1ee      	bne.n	80090d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f000 812d 	beq.w	800935a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009100:	4b48      	ldr	r3, [pc, #288]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009102:	691b      	ldr	r3, [r3, #16]
 8009104:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009108:	2b18      	cmp	r3, #24
 800910a:	f000 80bd 	beq.w	8009288 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	2b02      	cmp	r3, #2
 8009114:	f040 809e 	bne.w	8009254 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009118:	4b42      	ldr	r3, [pc, #264]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a41      	ldr	r2, [pc, #260]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 800911e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009124:	f7fa ffe2 	bl	80040ec <HAL_GetTick>
 8009128:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800912a:	e008      	b.n	800913e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800912c:	f7fa ffde 	bl	80040ec <HAL_GetTick>
 8009130:	4602      	mov	r2, r0
 8009132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	2b02      	cmp	r3, #2
 8009138:	d901      	bls.n	800913e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800913a:	2303      	movs	r3, #3
 800913c:	e10e      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800913e:	4b39      	ldr	r3, [pc, #228]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1f0      	bne.n	800912c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800914a:	4b36      	ldr	r3, [pc, #216]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 800914c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800914e:	4b37      	ldr	r3, [pc, #220]	; (800922c <HAL_RCC_OscConfig+0x774>)
 8009150:	4013      	ands	r3, r2
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800915a:	0112      	lsls	r2, r2, #4
 800915c:	430a      	orrs	r2, r1
 800915e:	4931      	ldr	r1, [pc, #196]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009160:	4313      	orrs	r3, r2
 8009162:	628b      	str	r3, [r1, #40]	; 0x28
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009168:	3b01      	subs	r3, #1
 800916a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009172:	3b01      	subs	r3, #1
 8009174:	025b      	lsls	r3, r3, #9
 8009176:	b29b      	uxth	r3, r3
 8009178:	431a      	orrs	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917e:	3b01      	subs	r3, #1
 8009180:	041b      	lsls	r3, r3, #16
 8009182:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009186:	431a      	orrs	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800918c:	3b01      	subs	r3, #1
 800918e:	061b      	lsls	r3, r3, #24
 8009190:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009194:	4923      	ldr	r1, [pc, #140]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009196:	4313      	orrs	r3, r2
 8009198:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800919a:	4b22      	ldr	r3, [pc, #136]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 800919c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919e:	4a21      	ldr	r2, [pc, #132]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 80091a0:	f023 0301 	bic.w	r3, r3, #1
 80091a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80091a6:	4b1f      	ldr	r3, [pc, #124]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 80091a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091aa:	4b21      	ldr	r3, [pc, #132]	; (8009230 <HAL_RCC_OscConfig+0x778>)
 80091ac:	4013      	ands	r3, r2
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80091b2:	00d2      	lsls	r2, r2, #3
 80091b4:	491b      	ldr	r1, [pc, #108]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 80091b6:	4313      	orrs	r3, r2
 80091b8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80091ba:	4b1a      	ldr	r3, [pc, #104]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 80091bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091be:	f023 020c 	bic.w	r2, r3, #12
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c6:	4917      	ldr	r1, [pc, #92]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 80091c8:	4313      	orrs	r3, r2
 80091ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80091cc:	4b15      	ldr	r3, [pc, #84]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 80091ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d0:	f023 0202 	bic.w	r2, r3, #2
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091d8:	4912      	ldr	r1, [pc, #72]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80091de:	4b11      	ldr	r3, [pc, #68]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 80091e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e2:	4a10      	ldr	r2, [pc, #64]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 80091e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091ea:	4b0e      	ldr	r3, [pc, #56]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 80091ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ee:	4a0d      	ldr	r2, [pc, #52]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 80091f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80091f6:	4b0b      	ldr	r3, [pc, #44]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 80091f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fa:	4a0a      	ldr	r2, [pc, #40]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 80091fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009200:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009202:	4b08      	ldr	r3, [pc, #32]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009206:	4a07      	ldr	r2, [pc, #28]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009208:	f043 0301 	orr.w	r3, r3, #1
 800920c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800920e:	4b05      	ldr	r3, [pc, #20]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a04      	ldr	r2, [pc, #16]	; (8009224 <HAL_RCC_OscConfig+0x76c>)
 8009214:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800921a:	f7fa ff67 	bl	80040ec <HAL_GetTick>
 800921e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009220:	e011      	b.n	8009246 <HAL_RCC_OscConfig+0x78e>
 8009222:	bf00      	nop
 8009224:	58024400 	.word	0x58024400
 8009228:	58024800 	.word	0x58024800
 800922c:	fffffc0c 	.word	0xfffffc0c
 8009230:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009234:	f7fa ff5a 	bl	80040ec <HAL_GetTick>
 8009238:	4602      	mov	r2, r0
 800923a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	2b02      	cmp	r3, #2
 8009240:	d901      	bls.n	8009246 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e08a      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009246:	4b47      	ldr	r3, [pc, #284]	; (8009364 <HAL_RCC_OscConfig+0x8ac>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0f0      	beq.n	8009234 <HAL_RCC_OscConfig+0x77c>
 8009252:	e082      	b.n	800935a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009254:	4b43      	ldr	r3, [pc, #268]	; (8009364 <HAL_RCC_OscConfig+0x8ac>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a42      	ldr	r2, [pc, #264]	; (8009364 <HAL_RCC_OscConfig+0x8ac>)
 800925a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800925e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009260:	f7fa ff44 	bl	80040ec <HAL_GetTick>
 8009264:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009266:	e008      	b.n	800927a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009268:	f7fa ff40 	bl	80040ec <HAL_GetTick>
 800926c:	4602      	mov	r2, r0
 800926e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	2b02      	cmp	r3, #2
 8009274:	d901      	bls.n	800927a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009276:	2303      	movs	r3, #3
 8009278:	e070      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800927a:	4b3a      	ldr	r3, [pc, #232]	; (8009364 <HAL_RCC_OscConfig+0x8ac>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1f0      	bne.n	8009268 <HAL_RCC_OscConfig+0x7b0>
 8009286:	e068      	b.n	800935a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009288:	4b36      	ldr	r3, [pc, #216]	; (8009364 <HAL_RCC_OscConfig+0x8ac>)
 800928a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800928e:	4b35      	ldr	r3, [pc, #212]	; (8009364 <HAL_RCC_OscConfig+0x8ac>)
 8009290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009292:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009298:	2b01      	cmp	r3, #1
 800929a:	d031      	beq.n	8009300 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	f003 0203 	and.w	r2, r3, #3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d12a      	bne.n	8009300 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	091b      	lsrs	r3, r3, #4
 80092ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d122      	bne.n	8009300 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d11a      	bne.n	8009300 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	0a5b      	lsrs	r3, r3, #9
 80092ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80092d8:	429a      	cmp	r2, r3
 80092da:	d111      	bne.n	8009300 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	0c1b      	lsrs	r3, r3, #16
 80092e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d108      	bne.n	8009300 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	0e1b      	lsrs	r3, r3, #24
 80092f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d001      	beq.n	8009304 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e02b      	b.n	800935c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009304:	4b17      	ldr	r3, [pc, #92]	; (8009364 <HAL_RCC_OscConfig+0x8ac>)
 8009306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009308:	08db      	lsrs	r3, r3, #3
 800930a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800930e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	429a      	cmp	r2, r3
 8009318:	d01f      	beq.n	800935a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800931a:	4b12      	ldr	r3, [pc, #72]	; (8009364 <HAL_RCC_OscConfig+0x8ac>)
 800931c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931e:	4a11      	ldr	r2, [pc, #68]	; (8009364 <HAL_RCC_OscConfig+0x8ac>)
 8009320:	f023 0301 	bic.w	r3, r3, #1
 8009324:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009326:	f7fa fee1 	bl	80040ec <HAL_GetTick>
 800932a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800932c:	bf00      	nop
 800932e:	f7fa fedd 	bl	80040ec <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009336:	4293      	cmp	r3, r2
 8009338:	d0f9      	beq.n	800932e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800933a:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <HAL_RCC_OscConfig+0x8ac>)
 800933c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800933e:	4b0a      	ldr	r3, [pc, #40]	; (8009368 <HAL_RCC_OscConfig+0x8b0>)
 8009340:	4013      	ands	r3, r2
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009346:	00d2      	lsls	r2, r2, #3
 8009348:	4906      	ldr	r1, [pc, #24]	; (8009364 <HAL_RCC_OscConfig+0x8ac>)
 800934a:	4313      	orrs	r3, r2
 800934c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800934e:	4b05      	ldr	r3, [pc, #20]	; (8009364 <HAL_RCC_OscConfig+0x8ac>)
 8009350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009352:	4a04      	ldr	r2, [pc, #16]	; (8009364 <HAL_RCC_OscConfig+0x8ac>)
 8009354:	f043 0301 	orr.w	r3, r3, #1
 8009358:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3730      	adds	r7, #48	; 0x30
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	58024400 	.word	0x58024400
 8009368:	ffff0007 	.word	0xffff0007

0800936c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d101      	bne.n	8009380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e19c      	b.n	80096ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009380:	4b8a      	ldr	r3, [pc, #552]	; (80095ac <HAL_RCC_ClockConfig+0x240>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 030f 	and.w	r3, r3, #15
 8009388:	683a      	ldr	r2, [r7, #0]
 800938a:	429a      	cmp	r2, r3
 800938c:	d910      	bls.n	80093b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800938e:	4b87      	ldr	r3, [pc, #540]	; (80095ac <HAL_RCC_ClockConfig+0x240>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f023 020f 	bic.w	r2, r3, #15
 8009396:	4985      	ldr	r1, [pc, #532]	; (80095ac <HAL_RCC_ClockConfig+0x240>)
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	4313      	orrs	r3, r2
 800939c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800939e:	4b83      	ldr	r3, [pc, #524]	; (80095ac <HAL_RCC_ClockConfig+0x240>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 030f 	and.w	r3, r3, #15
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d001      	beq.n	80093b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e184      	b.n	80096ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 0304 	and.w	r3, r3, #4
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d010      	beq.n	80093de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	691a      	ldr	r2, [r3, #16]
 80093c0:	4b7b      	ldr	r3, [pc, #492]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d908      	bls.n	80093de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80093cc:	4b78      	ldr	r3, [pc, #480]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	4975      	ldr	r1, [pc, #468]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 0308 	and.w	r3, r3, #8
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d010      	beq.n	800940c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	695a      	ldr	r2, [r3, #20]
 80093ee:	4b70      	ldr	r3, [pc, #448]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 80093f0:	69db      	ldr	r3, [r3, #28]
 80093f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d908      	bls.n	800940c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80093fa:	4b6d      	ldr	r3, [pc, #436]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 80093fc:	69db      	ldr	r3, [r3, #28]
 80093fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	695b      	ldr	r3, [r3, #20]
 8009406:	496a      	ldr	r1, [pc, #424]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 8009408:	4313      	orrs	r3, r2
 800940a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 0310 	and.w	r3, r3, #16
 8009414:	2b00      	cmp	r3, #0
 8009416:	d010      	beq.n	800943a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	699a      	ldr	r2, [r3, #24]
 800941c:	4b64      	ldr	r3, [pc, #400]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 800941e:	69db      	ldr	r3, [r3, #28]
 8009420:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009424:	429a      	cmp	r2, r3
 8009426:	d908      	bls.n	800943a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009428:	4b61      	ldr	r3, [pc, #388]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	495e      	ldr	r1, [pc, #376]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 8009436:	4313      	orrs	r3, r2
 8009438:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 0320 	and.w	r3, r3, #32
 8009442:	2b00      	cmp	r3, #0
 8009444:	d010      	beq.n	8009468 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	69da      	ldr	r2, [r3, #28]
 800944a:	4b59      	ldr	r3, [pc, #356]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 800944c:	6a1b      	ldr	r3, [r3, #32]
 800944e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009452:	429a      	cmp	r2, r3
 8009454:	d908      	bls.n	8009468 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009456:	4b56      	ldr	r3, [pc, #344]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 8009458:	6a1b      	ldr	r3, [r3, #32]
 800945a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	69db      	ldr	r3, [r3, #28]
 8009462:	4953      	ldr	r1, [pc, #332]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 8009464:	4313      	orrs	r3, r2
 8009466:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 0302 	and.w	r3, r3, #2
 8009470:	2b00      	cmp	r3, #0
 8009472:	d010      	beq.n	8009496 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68da      	ldr	r2, [r3, #12]
 8009478:	4b4d      	ldr	r3, [pc, #308]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	f003 030f 	and.w	r3, r3, #15
 8009480:	429a      	cmp	r2, r3
 8009482:	d908      	bls.n	8009496 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009484:	4b4a      	ldr	r3, [pc, #296]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	f023 020f 	bic.w	r2, r3, #15
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	4947      	ldr	r1, [pc, #284]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 8009492:	4313      	orrs	r3, r2
 8009494:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f003 0301 	and.w	r3, r3, #1
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d055      	beq.n	800954e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80094a2:	4b43      	ldr	r3, [pc, #268]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	4940      	ldr	r1, [pc, #256]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 80094b0:	4313      	orrs	r3, r2
 80094b2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d107      	bne.n	80094cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094bc:	4b3c      	ldr	r3, [pc, #240]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d121      	bne.n	800950c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e0f6      	b.n	80096ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	2b03      	cmp	r3, #3
 80094d2:	d107      	bne.n	80094e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094d4:	4b36      	ldr	r3, [pc, #216]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d115      	bne.n	800950c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e0ea      	b.n	80096ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d107      	bne.n	80094fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80094ec:	4b30      	ldr	r3, [pc, #192]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d109      	bne.n	800950c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e0de      	b.n	80096ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094fc:	4b2c      	ldr	r3, [pc, #176]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0304 	and.w	r3, r3, #4
 8009504:	2b00      	cmp	r3, #0
 8009506:	d101      	bne.n	800950c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e0d6      	b.n	80096ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800950c:	4b28      	ldr	r3, [pc, #160]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	f023 0207 	bic.w	r2, r3, #7
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	4925      	ldr	r1, [pc, #148]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 800951a:	4313      	orrs	r3, r2
 800951c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800951e:	f7fa fde5 	bl	80040ec <HAL_GetTick>
 8009522:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009524:	e00a      	b.n	800953c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009526:	f7fa fde1 	bl	80040ec <HAL_GetTick>
 800952a:	4602      	mov	r2, r0
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	f241 3288 	movw	r2, #5000	; 0x1388
 8009534:	4293      	cmp	r3, r2
 8009536:	d901      	bls.n	800953c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009538:	2303      	movs	r3, #3
 800953a:	e0be      	b.n	80096ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800953c:	4b1c      	ldr	r3, [pc, #112]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	00db      	lsls	r3, r3, #3
 800954a:	429a      	cmp	r2, r3
 800954c:	d1eb      	bne.n	8009526 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 0302 	and.w	r3, r3, #2
 8009556:	2b00      	cmp	r3, #0
 8009558:	d010      	beq.n	800957c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68da      	ldr	r2, [r3, #12]
 800955e:	4b14      	ldr	r3, [pc, #80]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	f003 030f 	and.w	r3, r3, #15
 8009566:	429a      	cmp	r2, r3
 8009568:	d208      	bcs.n	800957c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800956a:	4b11      	ldr	r3, [pc, #68]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	f023 020f 	bic.w	r2, r3, #15
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	490e      	ldr	r1, [pc, #56]	; (80095b0 <HAL_RCC_ClockConfig+0x244>)
 8009578:	4313      	orrs	r3, r2
 800957a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800957c:	4b0b      	ldr	r3, [pc, #44]	; (80095ac <HAL_RCC_ClockConfig+0x240>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 030f 	and.w	r3, r3, #15
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	429a      	cmp	r2, r3
 8009588:	d214      	bcs.n	80095b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800958a:	4b08      	ldr	r3, [pc, #32]	; (80095ac <HAL_RCC_ClockConfig+0x240>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f023 020f 	bic.w	r2, r3, #15
 8009592:	4906      	ldr	r1, [pc, #24]	; (80095ac <HAL_RCC_ClockConfig+0x240>)
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	4313      	orrs	r3, r2
 8009598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800959a:	4b04      	ldr	r3, [pc, #16]	; (80095ac <HAL_RCC_ClockConfig+0x240>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 030f 	and.w	r3, r3, #15
 80095a2:	683a      	ldr	r2, [r7, #0]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d005      	beq.n	80095b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e086      	b.n	80096ba <HAL_RCC_ClockConfig+0x34e>
 80095ac:	52002000 	.word	0x52002000
 80095b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 0304 	and.w	r3, r3, #4
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d010      	beq.n	80095e2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	691a      	ldr	r2, [r3, #16]
 80095c4:	4b3f      	ldr	r3, [pc, #252]	; (80096c4 <HAL_RCC_ClockConfig+0x358>)
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d208      	bcs.n	80095e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80095d0:	4b3c      	ldr	r3, [pc, #240]	; (80096c4 <HAL_RCC_ClockConfig+0x358>)
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	4939      	ldr	r1, [pc, #228]	; (80096c4 <HAL_RCC_ClockConfig+0x358>)
 80095de:	4313      	orrs	r3, r2
 80095e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 0308 	and.w	r3, r3, #8
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d010      	beq.n	8009610 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	695a      	ldr	r2, [r3, #20]
 80095f2:	4b34      	ldr	r3, [pc, #208]	; (80096c4 <HAL_RCC_ClockConfig+0x358>)
 80095f4:	69db      	ldr	r3, [r3, #28]
 80095f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d208      	bcs.n	8009610 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80095fe:	4b31      	ldr	r3, [pc, #196]	; (80096c4 <HAL_RCC_ClockConfig+0x358>)
 8009600:	69db      	ldr	r3, [r3, #28]
 8009602:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	492e      	ldr	r1, [pc, #184]	; (80096c4 <HAL_RCC_ClockConfig+0x358>)
 800960c:	4313      	orrs	r3, r2
 800960e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 0310 	and.w	r3, r3, #16
 8009618:	2b00      	cmp	r3, #0
 800961a:	d010      	beq.n	800963e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	699a      	ldr	r2, [r3, #24]
 8009620:	4b28      	ldr	r3, [pc, #160]	; (80096c4 <HAL_RCC_ClockConfig+0x358>)
 8009622:	69db      	ldr	r3, [r3, #28]
 8009624:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009628:	429a      	cmp	r2, r3
 800962a:	d208      	bcs.n	800963e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800962c:	4b25      	ldr	r3, [pc, #148]	; (80096c4 <HAL_RCC_ClockConfig+0x358>)
 800962e:	69db      	ldr	r3, [r3, #28]
 8009630:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	4922      	ldr	r1, [pc, #136]	; (80096c4 <HAL_RCC_ClockConfig+0x358>)
 800963a:	4313      	orrs	r3, r2
 800963c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0320 	and.w	r3, r3, #32
 8009646:	2b00      	cmp	r3, #0
 8009648:	d010      	beq.n	800966c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	69da      	ldr	r2, [r3, #28]
 800964e:	4b1d      	ldr	r3, [pc, #116]	; (80096c4 <HAL_RCC_ClockConfig+0x358>)
 8009650:	6a1b      	ldr	r3, [r3, #32]
 8009652:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009656:	429a      	cmp	r2, r3
 8009658:	d208      	bcs.n	800966c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800965a:	4b1a      	ldr	r3, [pc, #104]	; (80096c4 <HAL_RCC_ClockConfig+0x358>)
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	69db      	ldr	r3, [r3, #28]
 8009666:	4917      	ldr	r1, [pc, #92]	; (80096c4 <HAL_RCC_ClockConfig+0x358>)
 8009668:	4313      	orrs	r3, r2
 800966a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800966c:	f000 f834 	bl	80096d8 <HAL_RCC_GetSysClockFreq>
 8009670:	4602      	mov	r2, r0
 8009672:	4b14      	ldr	r3, [pc, #80]	; (80096c4 <HAL_RCC_ClockConfig+0x358>)
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	0a1b      	lsrs	r3, r3, #8
 8009678:	f003 030f 	and.w	r3, r3, #15
 800967c:	4912      	ldr	r1, [pc, #72]	; (80096c8 <HAL_RCC_ClockConfig+0x35c>)
 800967e:	5ccb      	ldrb	r3, [r1, r3]
 8009680:	f003 031f 	and.w	r3, r3, #31
 8009684:	fa22 f303 	lsr.w	r3, r2, r3
 8009688:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800968a:	4b0e      	ldr	r3, [pc, #56]	; (80096c4 <HAL_RCC_ClockConfig+0x358>)
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	f003 030f 	and.w	r3, r3, #15
 8009692:	4a0d      	ldr	r2, [pc, #52]	; (80096c8 <HAL_RCC_ClockConfig+0x35c>)
 8009694:	5cd3      	ldrb	r3, [r2, r3]
 8009696:	f003 031f 	and.w	r3, r3, #31
 800969a:	693a      	ldr	r2, [r7, #16]
 800969c:	fa22 f303 	lsr.w	r3, r2, r3
 80096a0:	4a0a      	ldr	r2, [pc, #40]	; (80096cc <HAL_RCC_ClockConfig+0x360>)
 80096a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80096a4:	4a0a      	ldr	r2, [pc, #40]	; (80096d0 <HAL_RCC_ClockConfig+0x364>)
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80096aa:	4b0a      	ldr	r3, [pc, #40]	; (80096d4 <HAL_RCC_ClockConfig+0x368>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fa fcd2 	bl	8004058 <HAL_InitTick>
 80096b4:	4603      	mov	r3, r0
 80096b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	58024400 	.word	0x58024400
 80096c8:	0801047c 	.word	0x0801047c
 80096cc:	24000004 	.word	0x24000004
 80096d0:	24000000 	.word	0x24000000
 80096d4:	24000008 	.word	0x24000008

080096d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096d8:	b480      	push	{r7}
 80096da:	b089      	sub	sp, #36	; 0x24
 80096dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80096de:	4bb3      	ldr	r3, [pc, #716]	; (80099ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096e6:	2b18      	cmp	r3, #24
 80096e8:	f200 8155 	bhi.w	8009996 <HAL_RCC_GetSysClockFreq+0x2be>
 80096ec:	a201      	add	r2, pc, #4	; (adr r2, 80096f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80096ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f2:	bf00      	nop
 80096f4:	08009759 	.word	0x08009759
 80096f8:	08009997 	.word	0x08009997
 80096fc:	08009997 	.word	0x08009997
 8009700:	08009997 	.word	0x08009997
 8009704:	08009997 	.word	0x08009997
 8009708:	08009997 	.word	0x08009997
 800970c:	08009997 	.word	0x08009997
 8009710:	08009997 	.word	0x08009997
 8009714:	0800977f 	.word	0x0800977f
 8009718:	08009997 	.word	0x08009997
 800971c:	08009997 	.word	0x08009997
 8009720:	08009997 	.word	0x08009997
 8009724:	08009997 	.word	0x08009997
 8009728:	08009997 	.word	0x08009997
 800972c:	08009997 	.word	0x08009997
 8009730:	08009997 	.word	0x08009997
 8009734:	08009785 	.word	0x08009785
 8009738:	08009997 	.word	0x08009997
 800973c:	08009997 	.word	0x08009997
 8009740:	08009997 	.word	0x08009997
 8009744:	08009997 	.word	0x08009997
 8009748:	08009997 	.word	0x08009997
 800974c:	08009997 	.word	0x08009997
 8009750:	08009997 	.word	0x08009997
 8009754:	0800978b 	.word	0x0800978b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009758:	4b94      	ldr	r3, [pc, #592]	; (80099ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 0320 	and.w	r3, r3, #32
 8009760:	2b00      	cmp	r3, #0
 8009762:	d009      	beq.n	8009778 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009764:	4b91      	ldr	r3, [pc, #580]	; (80099ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	08db      	lsrs	r3, r3, #3
 800976a:	f003 0303 	and.w	r3, r3, #3
 800976e:	4a90      	ldr	r2, [pc, #576]	; (80099b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009770:	fa22 f303 	lsr.w	r3, r2, r3
 8009774:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009776:	e111      	b.n	800999c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009778:	4b8d      	ldr	r3, [pc, #564]	; (80099b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800977a:	61bb      	str	r3, [r7, #24]
      break;
 800977c:	e10e      	b.n	800999c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800977e:	4b8d      	ldr	r3, [pc, #564]	; (80099b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009780:	61bb      	str	r3, [r7, #24]
      break;
 8009782:	e10b      	b.n	800999c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009784:	4b8c      	ldr	r3, [pc, #560]	; (80099b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009786:	61bb      	str	r3, [r7, #24]
      break;
 8009788:	e108      	b.n	800999c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800978a:	4b88      	ldr	r3, [pc, #544]	; (80099ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800978c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978e:	f003 0303 	and.w	r3, r3, #3
 8009792:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009794:	4b85      	ldr	r3, [pc, #532]	; (80099ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009798:	091b      	lsrs	r3, r3, #4
 800979a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800979e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80097a0:	4b82      	ldr	r3, [pc, #520]	; (80099ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a4:	f003 0301 	and.w	r3, r3, #1
 80097a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80097aa:	4b80      	ldr	r3, [pc, #512]	; (80099ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ae:	08db      	lsrs	r3, r3, #3
 80097b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	fb02 f303 	mul.w	r3, r2, r3
 80097ba:	ee07 3a90 	vmov	s15, r3
 80097be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 80e1 	beq.w	8009990 <HAL_RCC_GetSysClockFreq+0x2b8>
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	f000 8083 	beq.w	80098dc <HAL_RCC_GetSysClockFreq+0x204>
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	2b02      	cmp	r3, #2
 80097da:	f200 80a1 	bhi.w	8009920 <HAL_RCC_GetSysClockFreq+0x248>
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d003      	beq.n	80097ec <HAL_RCC_GetSysClockFreq+0x114>
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d056      	beq.n	8009898 <HAL_RCC_GetSysClockFreq+0x1c0>
 80097ea:	e099      	b.n	8009920 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097ec:	4b6f      	ldr	r3, [pc, #444]	; (80099ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 0320 	and.w	r3, r3, #32
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d02d      	beq.n	8009854 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097f8:	4b6c      	ldr	r3, [pc, #432]	; (80099ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	08db      	lsrs	r3, r3, #3
 80097fe:	f003 0303 	and.w	r3, r3, #3
 8009802:	4a6b      	ldr	r2, [pc, #428]	; (80099b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009804:	fa22 f303 	lsr.w	r3, r2, r3
 8009808:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	ee07 3a90 	vmov	s15, r3
 8009810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	ee07 3a90 	vmov	s15, r3
 800981a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800981e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009822:	4b62      	ldr	r3, [pc, #392]	; (80099ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800982a:	ee07 3a90 	vmov	s15, r3
 800982e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009832:	ed97 6a02 	vldr	s12, [r7, #8]
 8009836:	eddf 5a61 	vldr	s11, [pc, #388]	; 80099bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800983a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800983e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800984a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800984e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009852:	e087      	b.n	8009964 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	ee07 3a90 	vmov	s15, r3
 800985a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800985e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80099c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009866:	4b51      	ldr	r3, [pc, #324]	; (80099ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986e:	ee07 3a90 	vmov	s15, r3
 8009872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009876:	ed97 6a02 	vldr	s12, [r7, #8]
 800987a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80099bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800987e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800988a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800988e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009892:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009896:	e065      	b.n	8009964 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	ee07 3a90 	vmov	s15, r3
 800989e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80099c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80098a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098aa:	4b40      	ldr	r3, [pc, #256]	; (80099ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b2:	ee07 3a90 	vmov	s15, r3
 80098b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80098be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80099bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80098c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80098da:	e043      	b.n	8009964 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	ee07 3a90 	vmov	s15, r3
 80098e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80099c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80098ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ee:	4b2f      	ldr	r3, [pc, #188]	; (80099ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f6:	ee07 3a90 	vmov	s15, r3
 80098fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009902:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80099bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800990a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800990e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800991a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800991e:	e021      	b.n	8009964 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	ee07 3a90 	vmov	s15, r3
 8009926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800992a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80099c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800992e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009932:	4b1e      	ldr	r3, [pc, #120]	; (80099ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800993a:	ee07 3a90 	vmov	s15, r3
 800993e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009942:	ed97 6a02 	vldr	s12, [r7, #8]
 8009946:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80099bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800994a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800994e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800995a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800995e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009962:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009964:	4b11      	ldr	r3, [pc, #68]	; (80099ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009968:	0a5b      	lsrs	r3, r3, #9
 800996a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800996e:	3301      	adds	r3, #1
 8009970:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	ee07 3a90 	vmov	s15, r3
 8009978:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800997c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009988:	ee17 3a90 	vmov	r3, s15
 800998c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800998e:	e005      	b.n	800999c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009990:	2300      	movs	r3, #0
 8009992:	61bb      	str	r3, [r7, #24]
      break;
 8009994:	e002      	b.n	800999c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009996:	4b07      	ldr	r3, [pc, #28]	; (80099b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009998:	61bb      	str	r3, [r7, #24]
      break;
 800999a:	bf00      	nop
  }

  return sysclockfreq;
 800999c:	69bb      	ldr	r3, [r7, #24]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3724      	adds	r7, #36	; 0x24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	58024400 	.word	0x58024400
 80099b0:	03d09000 	.word	0x03d09000
 80099b4:	003d0900 	.word	0x003d0900
 80099b8:	00f42400 	.word	0x00f42400
 80099bc:	46000000 	.word	0x46000000
 80099c0:	4c742400 	.word	0x4c742400
 80099c4:	4a742400 	.word	0x4a742400
 80099c8:	4b742400 	.word	0x4b742400

080099cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80099d2:	f7ff fe81 	bl	80096d8 <HAL_RCC_GetSysClockFreq>
 80099d6:	4602      	mov	r2, r0
 80099d8:	4b10      	ldr	r3, [pc, #64]	; (8009a1c <HAL_RCC_GetHCLKFreq+0x50>)
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	0a1b      	lsrs	r3, r3, #8
 80099de:	f003 030f 	and.w	r3, r3, #15
 80099e2:	490f      	ldr	r1, [pc, #60]	; (8009a20 <HAL_RCC_GetHCLKFreq+0x54>)
 80099e4:	5ccb      	ldrb	r3, [r1, r3]
 80099e6:	f003 031f 	and.w	r3, r3, #31
 80099ea:	fa22 f303 	lsr.w	r3, r2, r3
 80099ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80099f0:	4b0a      	ldr	r3, [pc, #40]	; (8009a1c <HAL_RCC_GetHCLKFreq+0x50>)
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	f003 030f 	and.w	r3, r3, #15
 80099f8:	4a09      	ldr	r2, [pc, #36]	; (8009a20 <HAL_RCC_GetHCLKFreq+0x54>)
 80099fa:	5cd3      	ldrb	r3, [r2, r3]
 80099fc:	f003 031f 	and.w	r3, r3, #31
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	fa22 f303 	lsr.w	r3, r2, r3
 8009a06:	4a07      	ldr	r2, [pc, #28]	; (8009a24 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a0a:	4a07      	ldr	r2, [pc, #28]	; (8009a28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009a10:	4b04      	ldr	r3, [pc, #16]	; (8009a24 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a12:	681b      	ldr	r3, [r3, #0]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	58024400 	.word	0x58024400
 8009a20:	0801047c 	.word	0x0801047c
 8009a24:	24000004 	.word	0x24000004
 8009a28:	24000000 	.word	0x24000000

08009a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009a30:	f7ff ffcc 	bl	80099cc <HAL_RCC_GetHCLKFreq>
 8009a34:	4602      	mov	r2, r0
 8009a36:	4b06      	ldr	r3, [pc, #24]	; (8009a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a38:	69db      	ldr	r3, [r3, #28]
 8009a3a:	091b      	lsrs	r3, r3, #4
 8009a3c:	f003 0307 	and.w	r3, r3, #7
 8009a40:	4904      	ldr	r1, [pc, #16]	; (8009a54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009a42:	5ccb      	ldrb	r3, [r1, r3]
 8009a44:	f003 031f 	and.w	r3, r3, #31
 8009a48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	58024400 	.word	0x58024400
 8009a54:	0801047c 	.word	0x0801047c

08009a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009a5c:	f7ff ffb6 	bl	80099cc <HAL_RCC_GetHCLKFreq>
 8009a60:	4602      	mov	r2, r0
 8009a62:	4b06      	ldr	r3, [pc, #24]	; (8009a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	0a1b      	lsrs	r3, r3, #8
 8009a68:	f003 0307 	and.w	r3, r3, #7
 8009a6c:	4904      	ldr	r1, [pc, #16]	; (8009a80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009a6e:	5ccb      	ldrb	r3, [r1, r3]
 8009a70:	f003 031f 	and.w	r3, r3, #31
 8009a74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	58024400 	.word	0x58024400
 8009a80:	0801047c 	.word	0x0801047c

08009a84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a88:	b0ca      	sub	sp, #296	; 0x128
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009a90:	2300      	movs	r3, #0
 8009a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009a96:	2300      	movs	r3, #0
 8009a98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009aa8:	2500      	movs	r5, #0
 8009aaa:	ea54 0305 	orrs.w	r3, r4, r5
 8009aae:	d049      	beq.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ab6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009aba:	d02f      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009abc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ac0:	d828      	bhi.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009ac2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ac6:	d01a      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009ac8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009acc:	d822      	bhi.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d003      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ad6:	d007      	beq.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009ad8:	e01c      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ada:	4bb8      	ldr	r3, [pc, #736]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ade:	4ab7      	ldr	r2, [pc, #732]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009ae6:	e01a      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aec:	3308      	adds	r3, #8
 8009aee:	2102      	movs	r1, #2
 8009af0:	4618      	mov	r0, r3
 8009af2:	f002 fb61 	bl	800c1b8 <RCCEx_PLL2_Config>
 8009af6:	4603      	mov	r3, r0
 8009af8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009afc:	e00f      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b02:	3328      	adds	r3, #40	; 0x28
 8009b04:	2102      	movs	r1, #2
 8009b06:	4618      	mov	r0, r3
 8009b08:	f002 fc08 	bl	800c31c <RCCEx_PLL3_Config>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009b12:	e004      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b1a:	e000      	b.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d10a      	bne.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009b26:	4ba5      	ldr	r3, [pc, #660]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b2a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b34:	4aa1      	ldr	r2, [pc, #644]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b36:	430b      	orrs	r3, r1
 8009b38:	6513      	str	r3, [r2, #80]	; 0x50
 8009b3a:	e003      	b.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009b50:	f04f 0900 	mov.w	r9, #0
 8009b54:	ea58 0309 	orrs.w	r3, r8, r9
 8009b58:	d047      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b60:	2b04      	cmp	r3, #4
 8009b62:	d82a      	bhi.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009b64:	a201      	add	r2, pc, #4	; (adr r2, 8009b6c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6a:	bf00      	nop
 8009b6c:	08009b81 	.word	0x08009b81
 8009b70:	08009b8f 	.word	0x08009b8f
 8009b74:	08009ba5 	.word	0x08009ba5
 8009b78:	08009bc3 	.word	0x08009bc3
 8009b7c:	08009bc3 	.word	0x08009bc3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b80:	4b8e      	ldr	r3, [pc, #568]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b84:	4a8d      	ldr	r2, [pc, #564]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b8c:	e01a      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b92:	3308      	adds	r3, #8
 8009b94:	2100      	movs	r1, #0
 8009b96:	4618      	mov	r0, r3
 8009b98:	f002 fb0e 	bl	800c1b8 <RCCEx_PLL2_Config>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ba2:	e00f      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ba8:	3328      	adds	r3, #40	; 0x28
 8009baa:	2100      	movs	r1, #0
 8009bac:	4618      	mov	r0, r3
 8009bae:	f002 fbb5 	bl	800c31c <RCCEx_PLL3_Config>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009bb8:	e004      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009bc0:	e000      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10a      	bne.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009bcc:	4b7b      	ldr	r3, [pc, #492]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bd0:	f023 0107 	bic.w	r1, r3, #7
 8009bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bda:	4a78      	ldr	r2, [pc, #480]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009bdc:	430b      	orrs	r3, r1
 8009bde:	6513      	str	r3, [r2, #80]	; 0x50
 8009be0:	e003      	b.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009be6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009bf6:	f04f 0b00 	mov.w	fp, #0
 8009bfa:	ea5a 030b 	orrs.w	r3, sl, fp
 8009bfe:	d04c      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c0a:	d030      	beq.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c10:	d829      	bhi.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009c12:	2bc0      	cmp	r3, #192	; 0xc0
 8009c14:	d02d      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009c16:	2bc0      	cmp	r3, #192	; 0xc0
 8009c18:	d825      	bhi.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009c1a:	2b80      	cmp	r3, #128	; 0x80
 8009c1c:	d018      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009c1e:	2b80      	cmp	r3, #128	; 0x80
 8009c20:	d821      	bhi.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009c26:	2b40      	cmp	r3, #64	; 0x40
 8009c28:	d007      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009c2a:	e01c      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c2c:	4b63      	ldr	r3, [pc, #396]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c30:	4a62      	ldr	r2, [pc, #392]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009c38:	e01c      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c3e:	3308      	adds	r3, #8
 8009c40:	2100      	movs	r1, #0
 8009c42:	4618      	mov	r0, r3
 8009c44:	f002 fab8 	bl	800c1b8 <RCCEx_PLL2_Config>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009c4e:	e011      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c54:	3328      	adds	r3, #40	; 0x28
 8009c56:	2100      	movs	r1, #0
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f002 fb5f 	bl	800c31c <RCCEx_PLL3_Config>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009c64:	e006      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c6c:	e002      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009c6e:	bf00      	nop
 8009c70:	e000      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10a      	bne.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009c7c:	4b4f      	ldr	r3, [pc, #316]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c80:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c8a:	4a4c      	ldr	r2, [pc, #304]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009c8c:	430b      	orrs	r3, r1
 8009c8e:	6513      	str	r3, [r2, #80]	; 0x50
 8009c90:	e003      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009ca6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009caa:	2300      	movs	r3, #0
 8009cac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009cb0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	d053      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009cc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009cc6:	d035      	beq.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009cc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ccc:	d82e      	bhi.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009cce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009cd2:	d031      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009cd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009cd8:	d828      	bhi.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009cde:	d01a      	beq.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009ce0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ce4:	d822      	bhi.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d003      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009cea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cee:	d007      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009cf0:	e01c      	b.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cf2:	4b32      	ldr	r3, [pc, #200]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf6:	4a31      	ldr	r2, [pc, #196]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009cfe:	e01c      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d04:	3308      	adds	r3, #8
 8009d06:	2100      	movs	r1, #0
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f002 fa55 	bl	800c1b8 <RCCEx_PLL2_Config>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009d14:	e011      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d1a:	3328      	adds	r3, #40	; 0x28
 8009d1c:	2100      	movs	r1, #0
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f002 fafc 	bl	800c31c <RCCEx_PLL3_Config>
 8009d24:	4603      	mov	r3, r0
 8009d26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009d2a:	e006      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d32:	e002      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009d34:	bf00      	nop
 8009d36:	e000      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d10b      	bne.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009d42:	4b1e      	ldr	r3, [pc, #120]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d46:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009d52:	4a1a      	ldr	r2, [pc, #104]	; (8009dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d54:	430b      	orrs	r3, r1
 8009d56:	6593      	str	r3, [r2, #88]	; 0x58
 8009d58:	e003      	b.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009d6e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009d72:	2300      	movs	r3, #0
 8009d74:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d78:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	d056      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d8e:	d038      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009d90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d94:	d831      	bhi.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009d96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d9a:	d034      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009d9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009da0:	d82b      	bhi.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009da2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009da6:	d01d      	beq.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009da8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dac:	d825      	bhi.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d006      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009db2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009db6:	d00a      	beq.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009db8:	e01f      	b.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009dba:	bf00      	nop
 8009dbc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dc0:	4ba2      	ldr	r3, [pc, #648]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc4:	4aa1      	ldr	r2, [pc, #644]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009dcc:	e01c      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dd2:	3308      	adds	r3, #8
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f002 f9ee 	bl	800c1b8 <RCCEx_PLL2_Config>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009de2:	e011      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de8:	3328      	adds	r3, #40	; 0x28
 8009dea:	2100      	movs	r1, #0
 8009dec:	4618      	mov	r0, r3
 8009dee:	f002 fa95 	bl	800c31c <RCCEx_PLL3_Config>
 8009df2:	4603      	mov	r3, r0
 8009df4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009df8:	e006      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e00:	e002      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009e02:	bf00      	nop
 8009e04:	e000      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10b      	bne.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009e10:	4b8e      	ldr	r3, [pc, #568]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e14:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e20:	4a8a      	ldr	r2, [pc, #552]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e22:	430b      	orrs	r3, r1
 8009e24:	6593      	str	r3, [r2, #88]	; 0x58
 8009e26:	e003      	b.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009e40:	2300      	movs	r3, #0
 8009e42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	d03a      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e56:	2b30      	cmp	r3, #48	; 0x30
 8009e58:	d01f      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009e5a:	2b30      	cmp	r3, #48	; 0x30
 8009e5c:	d819      	bhi.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009e5e:	2b20      	cmp	r3, #32
 8009e60:	d00c      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009e62:	2b20      	cmp	r3, #32
 8009e64:	d815      	bhi.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d019      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009e6a:	2b10      	cmp	r3, #16
 8009e6c:	d111      	bne.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e6e:	4b77      	ldr	r3, [pc, #476]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e72:	4a76      	ldr	r2, [pc, #472]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009e7a:	e011      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e80:	3308      	adds	r3, #8
 8009e82:	2102      	movs	r1, #2
 8009e84:	4618      	mov	r0, r3
 8009e86:	f002 f997 	bl	800c1b8 <RCCEx_PLL2_Config>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009e90:	e006      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e98:	e002      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009e9a:	bf00      	nop
 8009e9c:	e000      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10a      	bne.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009ea8:	4b68      	ldr	r3, [pc, #416]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eb6:	4a65      	ldr	r2, [pc, #404]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009eb8:	430b      	orrs	r3, r1
 8009eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ebc:	e003      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ec2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ece:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009ed2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009edc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	d051      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ef0:	d035      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009ef2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ef6:	d82e      	bhi.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ef8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009efc:	d031      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009efe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f02:	d828      	bhi.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f08:	d01a      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f0e:	d822      	bhi.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d003      	beq.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f18:	d007      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009f1a:	e01c      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f1c:	4b4b      	ldr	r3, [pc, #300]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f20:	4a4a      	ldr	r2, [pc, #296]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009f28:	e01c      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f2e:	3308      	adds	r3, #8
 8009f30:	2100      	movs	r1, #0
 8009f32:	4618      	mov	r0, r3
 8009f34:	f002 f940 	bl	800c1b8 <RCCEx_PLL2_Config>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009f3e:	e011      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f44:	3328      	adds	r3, #40	; 0x28
 8009f46:	2100      	movs	r1, #0
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f002 f9e7 	bl	800c31c <RCCEx_PLL3_Config>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009f54:	e006      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f5c:	e002      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009f5e:	bf00      	nop
 8009f60:	e000      	b.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009f62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10a      	bne.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009f6c:	4b37      	ldr	r3, [pc, #220]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f70:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f7a:	4a34      	ldr	r2, [pc, #208]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009f7c:	430b      	orrs	r3, r1
 8009f7e:	6513      	str	r3, [r2, #80]	; 0x50
 8009f80:	e003      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f92:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009f96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009fa0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	d056      	beq.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fb4:	d033      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009fb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fba:	d82c      	bhi.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009fbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009fc0:	d02f      	beq.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009fc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009fc6:	d826      	bhi.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009fc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009fcc:	d02b      	beq.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009fce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009fd2:	d820      	bhi.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009fd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fd8:	d012      	beq.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009fda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fde:	d81a      	bhi.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d022      	beq.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fe8:	d115      	bne.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fee:	3308      	adds	r3, #8
 8009ff0:	2101      	movs	r1, #1
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f002 f8e0 	bl	800c1b8 <RCCEx_PLL2_Config>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009ffe:	e015      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a004:	3328      	adds	r3, #40	; 0x28
 800a006:	2101      	movs	r1, #1
 800a008:	4618      	mov	r0, r3
 800a00a:	f002 f987 	bl	800c31c <RCCEx_PLL3_Config>
 800a00e:	4603      	mov	r3, r0
 800a010:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a014:	e00a      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a01c:	e006      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a01e:	bf00      	nop
 800a020:	e004      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a022:	bf00      	nop
 800a024:	e002      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a026:	bf00      	nop
 800a028:	e000      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a02a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a02c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10d      	bne.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a034:	4b05      	ldr	r3, [pc, #20]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a038:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a03c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a042:	4a02      	ldr	r2, [pc, #8]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a044:	430b      	orrs	r3, r1
 800a046:	6513      	str	r3, [r2, #80]	; 0x50
 800a048:	e006      	b.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a04a:	bf00      	nop
 800a04c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a050:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a054:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a068:	2300      	movs	r3, #0
 800a06a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a06e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a072:	460b      	mov	r3, r1
 800a074:	4313      	orrs	r3, r2
 800a076:	d055      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a07c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a080:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a084:	d033      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a086:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a08a:	d82c      	bhi.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a08c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a090:	d02f      	beq.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a096:	d826      	bhi.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a098:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a09c:	d02b      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a09e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0a2:	d820      	bhi.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a0a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0a8:	d012      	beq.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a0aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0ae:	d81a      	bhi.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d022      	beq.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a0b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0b8:	d115      	bne.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0be:	3308      	adds	r3, #8
 800a0c0:	2101      	movs	r1, #1
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f002 f878 	bl	800c1b8 <RCCEx_PLL2_Config>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a0ce:	e015      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0d4:	3328      	adds	r3, #40	; 0x28
 800a0d6:	2101      	movs	r1, #1
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f002 f91f 	bl	800c31c <RCCEx_PLL3_Config>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a0e4:	e00a      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a0ec:	e006      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a0ee:	bf00      	nop
 800a0f0:	e004      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a0f2:	bf00      	nop
 800a0f4:	e002      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a0f6:	bf00      	nop
 800a0f8:	e000      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a0fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10b      	bne.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a104:	4ba3      	ldr	r3, [pc, #652]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a108:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a110:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a114:	4a9f      	ldr	r2, [pc, #636]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a116:	430b      	orrs	r3, r1
 800a118:	6593      	str	r3, [r2, #88]	; 0x58
 800a11a:	e003      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a11c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a120:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a130:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a134:	2300      	movs	r3, #0
 800a136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a13a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a13e:	460b      	mov	r3, r1
 800a140:	4313      	orrs	r3, r2
 800a142:	d037      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a14a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a14e:	d00e      	beq.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a154:	d816      	bhi.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a156:	2b00      	cmp	r3, #0
 800a158:	d018      	beq.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a15a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a15e:	d111      	bne.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a160:	4b8c      	ldr	r3, [pc, #560]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a164:	4a8b      	ldr	r2, [pc, #556]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a16a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a16c:	e00f      	b.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a16e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a172:	3308      	adds	r3, #8
 800a174:	2101      	movs	r1, #1
 800a176:	4618      	mov	r0, r3
 800a178:	f002 f81e 	bl	800c1b8 <RCCEx_PLL2_Config>
 800a17c:	4603      	mov	r3, r0
 800a17e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a182:	e004      	b.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a18a:	e000      	b.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a18c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a18e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a192:	2b00      	cmp	r3, #0
 800a194:	d10a      	bne.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a196:	4b7f      	ldr	r3, [pc, #508]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a19a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1a4:	4a7b      	ldr	r2, [pc, #492]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1a6:	430b      	orrs	r3, r1
 800a1a8:	6513      	str	r3, [r2, #80]	; 0x50
 800a1aa:	e003      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a1b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1bc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a1c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a1ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	d039      	beq.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1da:	2b03      	cmp	r3, #3
 800a1dc:	d81c      	bhi.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a1de:	a201      	add	r2, pc, #4	; (adr r2, 800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e4:	0800a221 	.word	0x0800a221
 800a1e8:	0800a1f5 	.word	0x0800a1f5
 800a1ec:	0800a203 	.word	0x0800a203
 800a1f0:	0800a221 	.word	0x0800a221
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1f4:	4b67      	ldr	r3, [pc, #412]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f8:	4a66      	ldr	r2, [pc, #408]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a1fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a200:	e00f      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a206:	3308      	adds	r3, #8
 800a208:	2102      	movs	r1, #2
 800a20a:	4618      	mov	r0, r3
 800a20c:	f001 ffd4 	bl	800c1b8 <RCCEx_PLL2_Config>
 800a210:	4603      	mov	r3, r0
 800a212:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a216:	e004      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a21e:	e000      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a220:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a222:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a226:	2b00      	cmp	r3, #0
 800a228:	d10a      	bne.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a22a:	4b5a      	ldr	r3, [pc, #360]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a22c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a22e:	f023 0103 	bic.w	r1, r3, #3
 800a232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a238:	4a56      	ldr	r2, [pc, #344]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a23a:	430b      	orrs	r3, r1
 800a23c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a23e:	e003      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a240:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a244:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a250:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a254:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a258:	2300      	movs	r3, #0
 800a25a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a25e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a262:	460b      	mov	r3, r1
 800a264:	4313      	orrs	r3, r2
 800a266:	f000 809f 	beq.w	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a26a:	4b4b      	ldr	r3, [pc, #300]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a4a      	ldr	r2, [pc, #296]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a274:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a276:	f7f9 ff39 	bl	80040ec <HAL_GetTick>
 800a27a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a27e:	e00b      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a280:	f7f9 ff34 	bl	80040ec <HAL_GetTick>
 800a284:	4602      	mov	r2, r0
 800a286:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	2b64      	cmp	r3, #100	; 0x64
 800a28e:	d903      	bls.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a290:	2303      	movs	r3, #3
 800a292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a296:	e005      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a298:	4b3f      	ldr	r3, [pc, #252]	; (800a398 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d0ed      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a2a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d179      	bne.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a2ac:	4b39      	ldr	r3, [pc, #228]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a2b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a2b8:	4053      	eors	r3, r2
 800a2ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d015      	beq.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a2c2:	4b34      	ldr	r3, [pc, #208]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a2ce:	4b31      	ldr	r3, [pc, #196]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2d2:	4a30      	ldr	r2, [pc, #192]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2d8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a2da:	4b2e      	ldr	r3, [pc, #184]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2de:	4a2d      	ldr	r2, [pc, #180]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2e4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a2e6:	4a2b      	ldr	r2, [pc, #172]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a2e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a2ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a2f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2fa:	d118      	bne.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2fc:	f7f9 fef6 	bl	80040ec <HAL_GetTick>
 800a300:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a304:	e00d      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a306:	f7f9 fef1 	bl	80040ec <HAL_GetTick>
 800a30a:	4602      	mov	r2, r0
 800a30c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a310:	1ad2      	subs	r2, r2, r3
 800a312:	f241 3388 	movw	r3, #5000	; 0x1388
 800a316:	429a      	cmp	r2, r3
 800a318:	d903      	bls.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a31a:	2303      	movs	r3, #3
 800a31c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a320:	e005      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a322:	4b1c      	ldr	r3, [pc, #112]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a326:	f003 0302 	and.w	r3, r3, #2
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d0eb      	beq.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a32e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a332:	2b00      	cmp	r3, #0
 800a334:	d129      	bne.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a33a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a33e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a346:	d10e      	bne.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a348:	4b12      	ldr	r3, [pc, #72]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a354:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a358:	091a      	lsrs	r2, r3, #4
 800a35a:	4b10      	ldr	r3, [pc, #64]	; (800a39c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a35c:	4013      	ands	r3, r2
 800a35e:	4a0d      	ldr	r2, [pc, #52]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a360:	430b      	orrs	r3, r1
 800a362:	6113      	str	r3, [r2, #16]
 800a364:	e005      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a366:	4b0b      	ldr	r3, [pc, #44]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	4a0a      	ldr	r2, [pc, #40]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a36c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a370:	6113      	str	r3, [r2, #16]
 800a372:	4b08      	ldr	r3, [pc, #32]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a374:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a37a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a37e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a382:	4a04      	ldr	r2, [pc, #16]	; (800a394 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a384:	430b      	orrs	r3, r1
 800a386:	6713      	str	r3, [r2, #112]	; 0x70
 800a388:	e00e      	b.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a38a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a38e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a392:	e009      	b.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a394:	58024400 	.word	0x58024400
 800a398:	58024800 	.word	0x58024800
 800a39c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b0:	f002 0301 	and.w	r3, r2, #1
 800a3b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a3be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	f000 8089 	beq.w	800a4dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3d0:	2b28      	cmp	r3, #40	; 0x28
 800a3d2:	d86b      	bhi.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a3d4:	a201      	add	r2, pc, #4	; (adr r2, 800a3dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3da:	bf00      	nop
 800a3dc:	0800a4b5 	.word	0x0800a4b5
 800a3e0:	0800a4ad 	.word	0x0800a4ad
 800a3e4:	0800a4ad 	.word	0x0800a4ad
 800a3e8:	0800a4ad 	.word	0x0800a4ad
 800a3ec:	0800a4ad 	.word	0x0800a4ad
 800a3f0:	0800a4ad 	.word	0x0800a4ad
 800a3f4:	0800a4ad 	.word	0x0800a4ad
 800a3f8:	0800a4ad 	.word	0x0800a4ad
 800a3fc:	0800a481 	.word	0x0800a481
 800a400:	0800a4ad 	.word	0x0800a4ad
 800a404:	0800a4ad 	.word	0x0800a4ad
 800a408:	0800a4ad 	.word	0x0800a4ad
 800a40c:	0800a4ad 	.word	0x0800a4ad
 800a410:	0800a4ad 	.word	0x0800a4ad
 800a414:	0800a4ad 	.word	0x0800a4ad
 800a418:	0800a4ad 	.word	0x0800a4ad
 800a41c:	0800a497 	.word	0x0800a497
 800a420:	0800a4ad 	.word	0x0800a4ad
 800a424:	0800a4ad 	.word	0x0800a4ad
 800a428:	0800a4ad 	.word	0x0800a4ad
 800a42c:	0800a4ad 	.word	0x0800a4ad
 800a430:	0800a4ad 	.word	0x0800a4ad
 800a434:	0800a4ad 	.word	0x0800a4ad
 800a438:	0800a4ad 	.word	0x0800a4ad
 800a43c:	0800a4b5 	.word	0x0800a4b5
 800a440:	0800a4ad 	.word	0x0800a4ad
 800a444:	0800a4ad 	.word	0x0800a4ad
 800a448:	0800a4ad 	.word	0x0800a4ad
 800a44c:	0800a4ad 	.word	0x0800a4ad
 800a450:	0800a4ad 	.word	0x0800a4ad
 800a454:	0800a4ad 	.word	0x0800a4ad
 800a458:	0800a4ad 	.word	0x0800a4ad
 800a45c:	0800a4b5 	.word	0x0800a4b5
 800a460:	0800a4ad 	.word	0x0800a4ad
 800a464:	0800a4ad 	.word	0x0800a4ad
 800a468:	0800a4ad 	.word	0x0800a4ad
 800a46c:	0800a4ad 	.word	0x0800a4ad
 800a470:	0800a4ad 	.word	0x0800a4ad
 800a474:	0800a4ad 	.word	0x0800a4ad
 800a478:	0800a4ad 	.word	0x0800a4ad
 800a47c:	0800a4b5 	.word	0x0800a4b5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a484:	3308      	adds	r3, #8
 800a486:	2101      	movs	r1, #1
 800a488:	4618      	mov	r0, r3
 800a48a:	f001 fe95 	bl	800c1b8 <RCCEx_PLL2_Config>
 800a48e:	4603      	mov	r3, r0
 800a490:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a494:	e00f      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a49a:	3328      	adds	r3, #40	; 0x28
 800a49c:	2101      	movs	r1, #1
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f001 ff3c 	bl	800c31c <RCCEx_PLL3_Config>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a4aa:	e004      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a4b2:	e000      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a4b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10a      	bne.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a4be:	4bbf      	ldr	r3, [pc, #764]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4cc:	4abb      	ldr	r2, [pc, #748]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a4ce:	430b      	orrs	r3, r1
 800a4d0:	6553      	str	r3, [r2, #84]	; 0x54
 800a4d2:	e003      	b.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a4dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e4:	f002 0302 	and.w	r3, r2, #2
 800a4e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a4f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	d041      	beq.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a502:	2b05      	cmp	r3, #5
 800a504:	d824      	bhi.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a506:	a201      	add	r2, pc, #4	; (adr r2, 800a50c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50c:	0800a559 	.word	0x0800a559
 800a510:	0800a525 	.word	0x0800a525
 800a514:	0800a53b 	.word	0x0800a53b
 800a518:	0800a559 	.word	0x0800a559
 800a51c:	0800a559 	.word	0x0800a559
 800a520:	0800a559 	.word	0x0800a559
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a528:	3308      	adds	r3, #8
 800a52a:	2101      	movs	r1, #1
 800a52c:	4618      	mov	r0, r3
 800a52e:	f001 fe43 	bl	800c1b8 <RCCEx_PLL2_Config>
 800a532:	4603      	mov	r3, r0
 800a534:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a538:	e00f      	b.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a53a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a53e:	3328      	adds	r3, #40	; 0x28
 800a540:	2101      	movs	r1, #1
 800a542:	4618      	mov	r0, r3
 800a544:	f001 feea 	bl	800c31c <RCCEx_PLL3_Config>
 800a548:	4603      	mov	r3, r0
 800a54a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a54e:	e004      	b.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a556:	e000      	b.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a55a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10a      	bne.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a562:	4b96      	ldr	r3, [pc, #600]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a566:	f023 0107 	bic.w	r1, r3, #7
 800a56a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a56e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a570:	4a92      	ldr	r2, [pc, #584]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a572:	430b      	orrs	r3, r1
 800a574:	6553      	str	r3, [r2, #84]	; 0x54
 800a576:	e003      	b.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a578:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a57c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a588:	f002 0304 	and.w	r3, r2, #4
 800a58c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a590:	2300      	movs	r3, #0
 800a592:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a596:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a59a:	460b      	mov	r3, r1
 800a59c:	4313      	orrs	r3, r2
 800a59e:	d044      	beq.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a5a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5a8:	2b05      	cmp	r3, #5
 800a5aa:	d825      	bhi.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a5ac:	a201      	add	r2, pc, #4	; (adr r2, 800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b2:	bf00      	nop
 800a5b4:	0800a601 	.word	0x0800a601
 800a5b8:	0800a5cd 	.word	0x0800a5cd
 800a5bc:	0800a5e3 	.word	0x0800a5e3
 800a5c0:	0800a601 	.word	0x0800a601
 800a5c4:	0800a601 	.word	0x0800a601
 800a5c8:	0800a601 	.word	0x0800a601
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5d0:	3308      	adds	r3, #8
 800a5d2:	2101      	movs	r1, #1
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f001 fdef 	bl	800c1b8 <RCCEx_PLL2_Config>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a5e0:	e00f      	b.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e6:	3328      	adds	r3, #40	; 0x28
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f001 fe96 	bl	800c31c <RCCEx_PLL3_Config>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a5f6:	e004      	b.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5fe:	e000      	b.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a600:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a602:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a606:	2b00      	cmp	r3, #0
 800a608:	d10b      	bne.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a60a:	4b6c      	ldr	r3, [pc, #432]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a60c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a60e:	f023 0107 	bic.w	r1, r3, #7
 800a612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a61a:	4a68      	ldr	r2, [pc, #416]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a61c:	430b      	orrs	r3, r1
 800a61e:	6593      	str	r3, [r2, #88]	; 0x58
 800a620:	e003      	b.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a622:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a626:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a632:	f002 0320 	and.w	r3, r2, #32
 800a636:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a63a:	2300      	movs	r3, #0
 800a63c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a640:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a644:	460b      	mov	r3, r1
 800a646:	4313      	orrs	r3, r2
 800a648:	d055      	beq.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a64e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a652:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a656:	d033      	beq.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a65c:	d82c      	bhi.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a65e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a662:	d02f      	beq.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a668:	d826      	bhi.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a66a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a66e:	d02b      	beq.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a670:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a674:	d820      	bhi.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a67a:	d012      	beq.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a67c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a680:	d81a      	bhi.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a682:	2b00      	cmp	r3, #0
 800a684:	d022      	beq.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a68a:	d115      	bne.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a68c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a690:	3308      	adds	r3, #8
 800a692:	2100      	movs	r1, #0
 800a694:	4618      	mov	r0, r3
 800a696:	f001 fd8f 	bl	800c1b8 <RCCEx_PLL2_Config>
 800a69a:	4603      	mov	r3, r0
 800a69c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a6a0:	e015      	b.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6a6:	3328      	adds	r3, #40	; 0x28
 800a6a8:	2102      	movs	r1, #2
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f001 fe36 	bl	800c31c <RCCEx_PLL3_Config>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a6b6:	e00a      	b.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a6be:	e006      	b.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a6c0:	bf00      	nop
 800a6c2:	e004      	b.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a6c4:	bf00      	nop
 800a6c6:	e002      	b.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a6c8:	bf00      	nop
 800a6ca:	e000      	b.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a6cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10b      	bne.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a6d6:	4b39      	ldr	r3, [pc, #228]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a6d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a6de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6e6:	4a35      	ldr	r2, [pc, #212]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a6e8:	430b      	orrs	r3, r1
 800a6ea:	6553      	str	r3, [r2, #84]	; 0x54
 800a6ec:	e003      	b.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a6f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a706:	2300      	movs	r3, #0
 800a708:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a70c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a710:	460b      	mov	r3, r1
 800a712:	4313      	orrs	r3, r2
 800a714:	d058      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a71a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a71e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a722:	d033      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a724:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a728:	d82c      	bhi.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a72a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a72e:	d02f      	beq.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a734:	d826      	bhi.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a736:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a73a:	d02b      	beq.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a73c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a740:	d820      	bhi.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a746:	d012      	beq.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a74c:	d81a      	bhi.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d022      	beq.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a756:	d115      	bne.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a75c:	3308      	adds	r3, #8
 800a75e:	2100      	movs	r1, #0
 800a760:	4618      	mov	r0, r3
 800a762:	f001 fd29 	bl	800c1b8 <RCCEx_PLL2_Config>
 800a766:	4603      	mov	r3, r0
 800a768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a76c:	e015      	b.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a76e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a772:	3328      	adds	r3, #40	; 0x28
 800a774:	2102      	movs	r1, #2
 800a776:	4618      	mov	r0, r3
 800a778:	f001 fdd0 	bl	800c31c <RCCEx_PLL3_Config>
 800a77c:	4603      	mov	r3, r0
 800a77e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a782:	e00a      	b.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a78a:	e006      	b.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a78c:	bf00      	nop
 800a78e:	e004      	b.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a790:	bf00      	nop
 800a792:	e002      	b.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a794:	bf00      	nop
 800a796:	e000      	b.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a79a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10e      	bne.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a7a2:	4b06      	ldr	r3, [pc, #24]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7a6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a7b2:	4a02      	ldr	r2, [pc, #8]	; (800a7bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a7b4:	430b      	orrs	r3, r1
 800a7b6:	6593      	str	r3, [r2, #88]	; 0x58
 800a7b8:	e006      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a7ba:	bf00      	nop
 800a7bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a7c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a7d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a7d8:	2300      	movs	r3, #0
 800a7da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a7de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	d055      	beq.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a7f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a7f4:	d033      	beq.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a7f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a7fa:	d82c      	bhi.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a7fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a800:	d02f      	beq.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a806:	d826      	bhi.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a808:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a80c:	d02b      	beq.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a80e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a812:	d820      	bhi.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a818:	d012      	beq.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a81a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a81e:	d81a      	bhi.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a820:	2b00      	cmp	r3, #0
 800a822:	d022      	beq.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a828:	d115      	bne.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a82a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a82e:	3308      	adds	r3, #8
 800a830:	2100      	movs	r1, #0
 800a832:	4618      	mov	r0, r3
 800a834:	f001 fcc0 	bl	800c1b8 <RCCEx_PLL2_Config>
 800a838:	4603      	mov	r3, r0
 800a83a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a83e:	e015      	b.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a844:	3328      	adds	r3, #40	; 0x28
 800a846:	2102      	movs	r1, #2
 800a848:	4618      	mov	r0, r3
 800a84a:	f001 fd67 	bl	800c31c <RCCEx_PLL3_Config>
 800a84e:	4603      	mov	r3, r0
 800a850:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a854:	e00a      	b.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a85c:	e006      	b.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a85e:	bf00      	nop
 800a860:	e004      	b.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a862:	bf00      	nop
 800a864:	e002      	b.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a866:	bf00      	nop
 800a868:	e000      	b.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a86a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a86c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a870:	2b00      	cmp	r3, #0
 800a872:	d10b      	bne.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a874:	4ba1      	ldr	r3, [pc, #644]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a878:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a87c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a880:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a884:	4a9d      	ldr	r2, [pc, #628]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a886:	430b      	orrs	r3, r1
 800a888:	6593      	str	r3, [r2, #88]	; 0x58
 800a88a:	e003      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a88c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a890:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89c:	f002 0308 	and.w	r3, r2, #8
 800a8a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a8aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	d01e      	beq.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8c0:	d10c      	bne.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a8c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8c6:	3328      	adds	r3, #40	; 0x28
 800a8c8:	2102      	movs	r1, #2
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f001 fd26 	bl	800c31c <RCCEx_PLL3_Config>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d002      	beq.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a8dc:	4b87      	ldr	r3, [pc, #540]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a8e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8ec:	4a83      	ldr	r2, [pc, #524]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8ee:	430b      	orrs	r3, r1
 800a8f0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	f002 0310 	and.w	r3, r2, #16
 800a8fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a902:	2300      	movs	r3, #0
 800a904:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a908:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a90c:	460b      	mov	r3, r1
 800a90e:	4313      	orrs	r3, r2
 800a910:	d01e      	beq.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a91a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a91e:	d10c      	bne.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a924:	3328      	adds	r3, #40	; 0x28
 800a926:	2102      	movs	r1, #2
 800a928:	4618      	mov	r0, r3
 800a92a:	f001 fcf7 	bl	800c31c <RCCEx_PLL3_Config>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a93a:	4b70      	ldr	r3, [pc, #448]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a93c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a93e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a946:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a94a:	4a6c      	ldr	r2, [pc, #432]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a94c:	430b      	orrs	r3, r1
 800a94e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a958:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a95c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a960:	2300      	movs	r3, #0
 800a962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a966:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a96a:	460b      	mov	r3, r1
 800a96c:	4313      	orrs	r3, r2
 800a96e:	d03e      	beq.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a974:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a978:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a97c:	d022      	beq.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a97e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a982:	d81b      	bhi.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a984:	2b00      	cmp	r3, #0
 800a986:	d003      	beq.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a98c:	d00b      	beq.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a98e:	e015      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a994:	3308      	adds	r3, #8
 800a996:	2100      	movs	r1, #0
 800a998:	4618      	mov	r0, r3
 800a99a:	f001 fc0d 	bl	800c1b8 <RCCEx_PLL2_Config>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a9a4:	e00f      	b.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9aa:	3328      	adds	r3, #40	; 0x28
 800a9ac:	2102      	movs	r1, #2
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f001 fcb4 	bl	800c31c <RCCEx_PLL3_Config>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a9ba:	e004      	b.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a9c2:	e000      	b.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a9c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d10b      	bne.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a9ce:	4b4b      	ldr	r3, [pc, #300]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a9d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a9de:	4a47      	ldr	r2, [pc, #284]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a9e0:	430b      	orrs	r3, r1
 800a9e2:	6593      	str	r3, [r2, #88]	; 0x58
 800a9e4:	e003      	b.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a9ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a9fa:	67bb      	str	r3, [r7, #120]	; 0x78
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aa00:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800aa04:	460b      	mov	r3, r1
 800aa06:	4313      	orrs	r3, r2
 800aa08:	d03b      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800aa0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa16:	d01f      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800aa18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa1c:	d818      	bhi.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800aa1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa22:	d003      	beq.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800aa24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa28:	d007      	beq.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800aa2a:	e011      	b.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa2c:	4b33      	ldr	r3, [pc, #204]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa30:	4a32      	ldr	r2, [pc, #200]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800aa38:	e00f      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa3e:	3328      	adds	r3, #40	; 0x28
 800aa40:	2101      	movs	r1, #1
 800aa42:	4618      	mov	r0, r3
 800aa44:	f001 fc6a 	bl	800c31c <RCCEx_PLL3_Config>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800aa4e:	e004      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa56:	e000      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800aa58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d10b      	bne.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aa62:	4b26      	ldr	r3, [pc, #152]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa66:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800aa6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa72:	4a22      	ldr	r2, [pc, #136]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aa74:	430b      	orrs	r3, r1
 800aa76:	6553      	str	r3, [r2, #84]	; 0x54
 800aa78:	e003      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800aa82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800aa8e:	673b      	str	r3, [r7, #112]	; 0x70
 800aa90:	2300      	movs	r3, #0
 800aa92:	677b      	str	r3, [r7, #116]	; 0x74
 800aa94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800aa98:	460b      	mov	r3, r1
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	d034      	beq.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800aa9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d003      	beq.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800aaa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaac:	d007      	beq.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800aaae:	e011      	b.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aab0:	4b12      	ldr	r3, [pc, #72]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab4:	4a11      	ldr	r2, [pc, #68]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aabc:	e00e      	b.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aabe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aac2:	3308      	adds	r3, #8
 800aac4:	2102      	movs	r1, #2
 800aac6:	4618      	mov	r0, r3
 800aac8:	f001 fb76 	bl	800c1b8 <RCCEx_PLL2_Config>
 800aacc:	4603      	mov	r3, r0
 800aace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aad2:	e003      	b.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800aad4:	2301      	movs	r3, #1
 800aad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aada:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aadc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d10d      	bne.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aae4:	4b05      	ldr	r3, [pc, #20]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aae8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aaec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaf2:	4a02      	ldr	r2, [pc, #8]	; (800aafc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aaf4:	430b      	orrs	r3, r1
 800aaf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aaf8:	e006      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800aafa:	bf00      	nop
 800aafc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ab08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab10:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ab14:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab16:	2300      	movs	r3, #0
 800ab18:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab1a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ab1e:	460b      	mov	r3, r1
 800ab20:	4313      	orrs	r3, r2
 800ab22:	d00c      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ab24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab28:	3328      	adds	r3, #40	; 0x28
 800ab2a:	2102      	movs	r1, #2
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f001 fbf5 	bl	800c31c <RCCEx_PLL3_Config>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d002      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ab3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab46:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ab4a:	663b      	str	r3, [r7, #96]	; 0x60
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	667b      	str	r3, [r7, #100]	; 0x64
 800ab50:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ab54:	460b      	mov	r3, r1
 800ab56:	4313      	orrs	r3, r2
 800ab58:	d038      	beq.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ab5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab66:	d018      	beq.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ab68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab6c:	d811      	bhi.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ab6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab72:	d014      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ab74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab78:	d80b      	bhi.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d011      	beq.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ab7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab82:	d106      	bne.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab84:	4bc3      	ldr	r3, [pc, #780]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab88:	4ac2      	ldr	r2, [pc, #776]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ab8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ab90:	e008      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab92:	2301      	movs	r3, #1
 800ab94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab98:	e004      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ab9a:	bf00      	nop
 800ab9c:	e002      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ab9e:	bf00      	nop
 800aba0:	e000      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800aba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aba4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d10b      	bne.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800abac:	4bb9      	ldr	r3, [pc, #740]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abb0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800abb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abbc:	4ab5      	ldr	r2, [pc, #724]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abbe:	430b      	orrs	r3, r1
 800abc0:	6553      	str	r3, [r2, #84]	; 0x54
 800abc2:	e003      	b.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800abcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800abd8:	65bb      	str	r3, [r7, #88]	; 0x58
 800abda:	2300      	movs	r3, #0
 800abdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abde:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800abe2:	460b      	mov	r3, r1
 800abe4:	4313      	orrs	r3, r2
 800abe6:	d009      	beq.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800abe8:	4baa      	ldr	r3, [pc, #680]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800abf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abf6:	4aa7      	ldr	r2, [pc, #668]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800abf8:	430b      	orrs	r3, r1
 800abfa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800abfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac04:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800ac08:	653b      	str	r3, [r7, #80]	; 0x50
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	657b      	str	r3, [r7, #84]	; 0x54
 800ac0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ac12:	460b      	mov	r3, r1
 800ac14:	4313      	orrs	r3, r2
 800ac16:	d00a      	beq.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ac18:	4b9e      	ldr	r3, [pc, #632]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800ac20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ac28:	4a9a      	ldr	r2, [pc, #616]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac2a:	430b      	orrs	r3, r1
 800ac2c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ac2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac36:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ac3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac40:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ac44:	460b      	mov	r3, r1
 800ac46:	4313      	orrs	r3, r2
 800ac48:	d009      	beq.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ac4a:	4b92      	ldr	r3, [pc, #584]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac4e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ac52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac58:	4a8e      	ldr	r2, [pc, #568]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac5a:	430b      	orrs	r3, r1
 800ac5c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ac5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac66:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ac6a:	643b      	str	r3, [r7, #64]	; 0x40
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	647b      	str	r3, [r7, #68]	; 0x44
 800ac70:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ac74:	460b      	mov	r3, r1
 800ac76:	4313      	orrs	r3, r2
 800ac78:	d00e      	beq.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ac7a:	4b86      	ldr	r3, [pc, #536]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac7c:	691b      	ldr	r3, [r3, #16]
 800ac7e:	4a85      	ldr	r2, [pc, #532]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ac84:	6113      	str	r3, [r2, #16]
 800ac86:	4b83      	ldr	r3, [pc, #524]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac88:	6919      	ldr	r1, [r3, #16]
 800ac8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ac92:	4a80      	ldr	r2, [pc, #512]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ac94:	430b      	orrs	r3, r1
 800ac96:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ac98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800aca4:	63bb      	str	r3, [r7, #56]	; 0x38
 800aca6:	2300      	movs	r3, #0
 800aca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acaa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800acae:	460b      	mov	r3, r1
 800acb0:	4313      	orrs	r3, r2
 800acb2:	d009      	beq.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800acb4:	4b77      	ldr	r3, [pc, #476]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acb8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800acbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acc2:	4a74      	ldr	r2, [pc, #464]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acc4:	430b      	orrs	r3, r1
 800acc6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800acc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800accc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800acd4:	633b      	str	r3, [r7, #48]	; 0x30
 800acd6:	2300      	movs	r3, #0
 800acd8:	637b      	str	r3, [r7, #52]	; 0x34
 800acda:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800acde:	460b      	mov	r3, r1
 800ace0:	4313      	orrs	r3, r2
 800ace2:	d00a      	beq.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ace4:	4b6b      	ldr	r3, [pc, #428]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ace6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ace8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800acec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acf4:	4a67      	ldr	r2, [pc, #412]	; (800ae94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800acf6:	430b      	orrs	r3, r1
 800acf8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800acfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad02:	2100      	movs	r1, #0
 800ad04:	62b9      	str	r1, [r7, #40]	; 0x28
 800ad06:	f003 0301 	and.w	r3, r3, #1
 800ad0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad0c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ad10:	460b      	mov	r3, r1
 800ad12:	4313      	orrs	r3, r2
 800ad14:	d011      	beq.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad1a:	3308      	adds	r3, #8
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f001 fa4a 	bl	800c1b8 <RCCEx_PLL2_Config>
 800ad24:	4603      	mov	r3, r0
 800ad26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ad2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d003      	beq.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ad3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad42:	2100      	movs	r1, #0
 800ad44:	6239      	str	r1, [r7, #32]
 800ad46:	f003 0302 	and.w	r3, r3, #2
 800ad4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad4c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ad50:	460b      	mov	r3, r1
 800ad52:	4313      	orrs	r3, r2
 800ad54:	d011      	beq.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad5a:	3308      	adds	r3, #8
 800ad5c:	2101      	movs	r1, #1
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f001 fa2a 	bl	800c1b8 <RCCEx_PLL2_Config>
 800ad64:	4603      	mov	r3, r0
 800ad66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ad6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d003      	beq.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ad7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad82:	2100      	movs	r1, #0
 800ad84:	61b9      	str	r1, [r7, #24]
 800ad86:	f003 0304 	and.w	r3, r3, #4
 800ad8a:	61fb      	str	r3, [r7, #28]
 800ad8c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ad90:	460b      	mov	r3, r1
 800ad92:	4313      	orrs	r3, r2
 800ad94:	d011      	beq.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad9a:	3308      	adds	r3, #8
 800ad9c:	2102      	movs	r1, #2
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f001 fa0a 	bl	800c1b8 <RCCEx_PLL2_Config>
 800ada4:	4603      	mov	r3, r0
 800ada6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800adaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d003      	beq.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800adba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc2:	2100      	movs	r1, #0
 800adc4:	6139      	str	r1, [r7, #16]
 800adc6:	f003 0308 	and.w	r3, r3, #8
 800adca:	617b      	str	r3, [r7, #20]
 800adcc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800add0:	460b      	mov	r3, r1
 800add2:	4313      	orrs	r3, r2
 800add4:	d011      	beq.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800add6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adda:	3328      	adds	r3, #40	; 0x28
 800addc:	2100      	movs	r1, #0
 800adde:	4618      	mov	r0, r3
 800ade0:	f001 fa9c 	bl	800c31c <RCCEx_PLL3_Config>
 800ade4:	4603      	mov	r3, r0
 800ade6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800adea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800adfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae02:	2100      	movs	r1, #0
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	f003 0310 	and.w	r3, r3, #16
 800ae0a:	60fb      	str	r3, [r7, #12]
 800ae0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ae10:	460b      	mov	r3, r1
 800ae12:	4313      	orrs	r3, r2
 800ae14:	d011      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae1a:	3328      	adds	r3, #40	; 0x28
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f001 fa7c 	bl	800c31c <RCCEx_PLL3_Config>
 800ae24:	4603      	mov	r3, r0
 800ae26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ae2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d003      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ae3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	2100      	movs	r1, #0
 800ae44:	6039      	str	r1, [r7, #0]
 800ae46:	f003 0320 	and.w	r3, r3, #32
 800ae4a:	607b      	str	r3, [r7, #4]
 800ae4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ae50:	460b      	mov	r3, r1
 800ae52:	4313      	orrs	r3, r2
 800ae54:	d011      	beq.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ae56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae5a:	3328      	adds	r3, #40	; 0x28
 800ae5c:	2102      	movs	r1, #2
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f001 fa5c 	bl	800c31c <RCCEx_PLL3_Config>
 800ae64:	4603      	mov	r3, r0
 800ae66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ae6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d003      	beq.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ae7a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d101      	bne.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	e000      	b.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae94:	58024400 	.word	0x58024400

0800ae98 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b090      	sub	sp, #64	; 0x40
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800aea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aea6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800aeaa:	430b      	orrs	r3, r1
 800aeac:	f040 8094 	bne.w	800afd8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800aeb0:	4b9e      	ldr	r3, [pc, #632]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aeb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeb4:	f003 0307 	and.w	r3, r3, #7
 800aeb8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aeba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aebc:	2b04      	cmp	r3, #4
 800aebe:	f200 8087 	bhi.w	800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800aec2:	a201      	add	r2, pc, #4	; (adr r2, 800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800aec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec8:	0800aedd 	.word	0x0800aedd
 800aecc:	0800af05 	.word	0x0800af05
 800aed0:	0800af2d 	.word	0x0800af2d
 800aed4:	0800afc9 	.word	0x0800afc9
 800aed8:	0800af55 	.word	0x0800af55
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aedc:	4b93      	ldr	r3, [pc, #588]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aee8:	d108      	bne.n	800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aeea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aeee:	4618      	mov	r0, r3
 800aef0:	f001 f810 	bl	800bf14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aef8:	f000 bd45 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aefc:	2300      	movs	r3, #0
 800aefe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af00:	f000 bd41 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af04:	4b89      	ldr	r3, [pc, #548]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af10:	d108      	bne.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af12:	f107 0318 	add.w	r3, r7, #24
 800af16:	4618      	mov	r0, r3
 800af18:	f000 fd54 	bl	800b9c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af20:	f000 bd31 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af24:	2300      	movs	r3, #0
 800af26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af28:	f000 bd2d 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af2c:	4b7f      	ldr	r3, [pc, #508]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af38:	d108      	bne.n	800af4c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af3a:	f107 030c 	add.w	r3, r7, #12
 800af3e:	4618      	mov	r0, r3
 800af40:	f000 fe94 	bl	800bc6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af48:	f000 bd1d 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af4c:	2300      	movs	r3, #0
 800af4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af50:	f000 bd19 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800af54:	4b75      	ldr	r3, [pc, #468]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af5c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af5e:	4b73      	ldr	r3, [pc, #460]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f003 0304 	and.w	r3, r3, #4
 800af66:	2b04      	cmp	r3, #4
 800af68:	d10c      	bne.n	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800af6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d109      	bne.n	800af84 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af70:	4b6e      	ldr	r3, [pc, #440]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	08db      	lsrs	r3, r3, #3
 800af76:	f003 0303 	and.w	r3, r3, #3
 800af7a:	4a6d      	ldr	r2, [pc, #436]	; (800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800af7c:	fa22 f303 	lsr.w	r3, r2, r3
 800af80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af82:	e01f      	b.n	800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af84:	4b69      	ldr	r3, [pc, #420]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af90:	d106      	bne.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800af92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af98:	d102      	bne.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af9a:	4b66      	ldr	r3, [pc, #408]	; (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800af9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af9e:	e011      	b.n	800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800afa0:	4b62      	ldr	r3, [pc, #392]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afac:	d106      	bne.n	800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800afae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afb4:	d102      	bne.n	800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800afb6:	4b60      	ldr	r3, [pc, #384]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800afb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afba:	e003      	b.n	800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800afbc:	2300      	movs	r3, #0
 800afbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800afc0:	f000 bce1 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800afc4:	f000 bcdf 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800afc8:	4b5c      	ldr	r3, [pc, #368]	; (800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800afca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afcc:	f000 bcdb 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800afd0:	2300      	movs	r3, #0
 800afd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afd4:	f000 bcd7 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800afd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afdc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800afe0:	430b      	orrs	r3, r1
 800afe2:	f040 80ad 	bne.w	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800afe6:	4b51      	ldr	r3, [pc, #324]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800afe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800afee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aff6:	d056      	beq.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800affe:	f200 8090 	bhi.w	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b004:	2bc0      	cmp	r3, #192	; 0xc0
 800b006:	f000 8088 	beq.w	800b11a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00c:	2bc0      	cmp	r3, #192	; 0xc0
 800b00e:	f200 8088 	bhi.w	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b014:	2b80      	cmp	r3, #128	; 0x80
 800b016:	d032      	beq.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01a:	2b80      	cmp	r3, #128	; 0x80
 800b01c:	f200 8081 	bhi.w	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b022:	2b00      	cmp	r3, #0
 800b024:	d003      	beq.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b028:	2b40      	cmp	r3, #64	; 0x40
 800b02a:	d014      	beq.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b02c:	e079      	b.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b02e:	4b3f      	ldr	r3, [pc, #252]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b03a:	d108      	bne.n	800b04e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b03c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b040:	4618      	mov	r0, r3
 800b042:	f000 ff67 	bl	800bf14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b048:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b04a:	f000 bc9c 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b04e:	2300      	movs	r3, #0
 800b050:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b052:	f000 bc98 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b056:	4b35      	ldr	r3, [pc, #212]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b05e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b062:	d108      	bne.n	800b076 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b064:	f107 0318 	add.w	r3, r7, #24
 800b068:	4618      	mov	r0, r3
 800b06a:	f000 fcab 	bl	800b9c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b06e:	69bb      	ldr	r3, [r7, #24]
 800b070:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b072:	f000 bc88 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b076:	2300      	movs	r3, #0
 800b078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b07a:	f000 bc84 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b07e:	4b2b      	ldr	r3, [pc, #172]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b08a:	d108      	bne.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b08c:	f107 030c 	add.w	r3, r7, #12
 800b090:	4618      	mov	r0, r3
 800b092:	f000 fdeb 	bl	800bc6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b09a:	f000 bc74 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0a2:	f000 bc70 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b0a6:	4b21      	ldr	r3, [pc, #132]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b0ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b0b0:	4b1e      	ldr	r3, [pc, #120]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f003 0304 	and.w	r3, r3, #4
 800b0b8:	2b04      	cmp	r3, #4
 800b0ba:	d10c      	bne.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d109      	bne.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0c2:	4b1a      	ldr	r3, [pc, #104]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	08db      	lsrs	r3, r3, #3
 800b0c8:	f003 0303 	and.w	r3, r3, #3
 800b0cc:	4a18      	ldr	r2, [pc, #96]	; (800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b0ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0d4:	e01f      	b.n	800b116 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b0d6:	4b15      	ldr	r3, [pc, #84]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0e2:	d106      	bne.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0ea:	d102      	bne.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b0ec:	4b11      	ldr	r3, [pc, #68]	; (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0f0:	e011      	b.n	800b116 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b0f2:	4b0e      	ldr	r3, [pc, #56]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0fe:	d106      	bne.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b106:	d102      	bne.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b108:	4b0b      	ldr	r3, [pc, #44]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b10a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b10c:	e003      	b.n	800b116 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b112:	f000 bc38 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b116:	f000 bc36 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b11a:	4b08      	ldr	r3, [pc, #32]	; (800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b11c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b11e:	f000 bc32 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b126:	f000 bc2e 	b.w	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b12a:	bf00      	nop
 800b12c:	58024400 	.word	0x58024400
 800b130:	03d09000 	.word	0x03d09000
 800b134:	003d0900 	.word	0x003d0900
 800b138:	00f42400 	.word	0x00f42400
 800b13c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b140:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b144:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b148:	430b      	orrs	r3, r1
 800b14a:	f040 809c 	bne.w	800b286 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b14e:	4b9e      	ldr	r3, [pc, #632]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b152:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b156:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b15e:	d054      	beq.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b162:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b166:	f200 808b 	bhi.w	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b170:	f000 8083 	beq.w	800b27a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b176:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b17a:	f200 8081 	bhi.w	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b184:	d02f      	beq.n	800b1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b18c:	d878      	bhi.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b190:	2b00      	cmp	r3, #0
 800b192:	d004      	beq.n	800b19e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b196:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b19a:	d012      	beq.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b19c:	e070      	b.n	800b280 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b19e:	4b8a      	ldr	r3, [pc, #552]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1aa:	d107      	bne.n	800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 feaf 	bl	800bf14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1ba:	e3e4      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1c0:	e3e1      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1c2:	4b81      	ldr	r3, [pc, #516]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1ce:	d107      	bne.n	800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1d0:	f107 0318 	add.w	r3, r7, #24
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f000 fbf5 	bl	800b9c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1de:	e3d2      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1e4:	e3cf      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1e6:	4b78      	ldr	r3, [pc, #480]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1f2:	d107      	bne.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1f4:	f107 030c 	add.w	r3, r7, #12
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f000 fd37 	bl	800bc6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b202:	e3c0      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b204:	2300      	movs	r3, #0
 800b206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b208:	e3bd      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b20a:	4b6f      	ldr	r3, [pc, #444]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b20c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b20e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b212:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b214:	4b6c      	ldr	r3, [pc, #432]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f003 0304 	and.w	r3, r3, #4
 800b21c:	2b04      	cmp	r3, #4
 800b21e:	d10c      	bne.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b222:	2b00      	cmp	r3, #0
 800b224:	d109      	bne.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b226:	4b68      	ldr	r3, [pc, #416]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	08db      	lsrs	r3, r3, #3
 800b22c:	f003 0303 	and.w	r3, r3, #3
 800b230:	4a66      	ldr	r2, [pc, #408]	; (800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b232:	fa22 f303 	lsr.w	r3, r2, r3
 800b236:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b238:	e01e      	b.n	800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b23a:	4b63      	ldr	r3, [pc, #396]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b246:	d106      	bne.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b24a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b24e:	d102      	bne.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b250:	4b5f      	ldr	r3, [pc, #380]	; (800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b252:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b254:	e010      	b.n	800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b256:	4b5c      	ldr	r3, [pc, #368]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b25e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b262:	d106      	bne.n	800b272 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b266:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b26a:	d102      	bne.n	800b272 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b26c:	4b59      	ldr	r3, [pc, #356]	; (800b3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b26e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b270:	e002      	b.n	800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b272:	2300      	movs	r3, #0
 800b274:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b276:	e386      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b278:	e385      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b27a:	4b57      	ldr	r3, [pc, #348]	; (800b3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b27c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b27e:	e382      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b280:	2300      	movs	r3, #0
 800b282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b284:	e37f      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b28a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b28e:	430b      	orrs	r3, r1
 800b290:	f040 80a7 	bne.w	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b294:	4b4c      	ldr	r3, [pc, #304]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b298:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b29c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b2a4:	d055      	beq.n	800b352 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b2ac:	f200 8096 	bhi.w	800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b2b6:	f000 8084 	beq.w	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b2c0:	f200 808c 	bhi.w	800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2ca:	d030      	beq.n	800b32e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2d2:	f200 8083 	bhi.w	800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d004      	beq.n	800b2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b2e2:	d012      	beq.n	800b30a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b2e4:	e07a      	b.n	800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2e6:	4b38      	ldr	r3, [pc, #224]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2f2:	d107      	bne.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f000 fe0b 	bl	800bf14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b300:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b302:	e340      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b304:	2300      	movs	r3, #0
 800b306:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b308:	e33d      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b30a:	4b2f      	ldr	r3, [pc, #188]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b312:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b316:	d107      	bne.n	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b318:	f107 0318 	add.w	r3, r7, #24
 800b31c:	4618      	mov	r0, r3
 800b31e:	f000 fb51 	bl	800b9c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b326:	e32e      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b328:	2300      	movs	r3, #0
 800b32a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b32c:	e32b      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b32e:	4b26      	ldr	r3, [pc, #152]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b336:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b33a:	d107      	bne.n	800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b33c:	f107 030c 	add.w	r3, r7, #12
 800b340:	4618      	mov	r0, r3
 800b342:	f000 fc93 	bl	800bc6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b34a:	e31c      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b34c:	2300      	movs	r3, #0
 800b34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b350:	e319      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b352:	4b1d      	ldr	r3, [pc, #116]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b356:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b35a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b35c:	4b1a      	ldr	r3, [pc, #104]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f003 0304 	and.w	r3, r3, #4
 800b364:	2b04      	cmp	r3, #4
 800b366:	d10c      	bne.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d109      	bne.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b36e:	4b16      	ldr	r3, [pc, #88]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	08db      	lsrs	r3, r3, #3
 800b374:	f003 0303 	and.w	r3, r3, #3
 800b378:	4a14      	ldr	r2, [pc, #80]	; (800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b37a:	fa22 f303 	lsr.w	r3, r2, r3
 800b37e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b380:	e01e      	b.n	800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b382:	4b11      	ldr	r3, [pc, #68]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b38a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b38e:	d106      	bne.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b392:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b396:	d102      	bne.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b398:	4b0d      	ldr	r3, [pc, #52]	; (800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b39a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b39c:	e010      	b.n	800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b39e:	4b0a      	ldr	r3, [pc, #40]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3aa:	d106      	bne.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3b2:	d102      	bne.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b3b4:	4b07      	ldr	r3, [pc, #28]	; (800b3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3b8:	e002      	b.n	800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b3be:	e2e2      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b3c0:	e2e1      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b3c2:	4b05      	ldr	r3, [pc, #20]	; (800b3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3c6:	e2de      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b3c8:	58024400 	.word	0x58024400
 800b3cc:	03d09000 	.word	0x03d09000
 800b3d0:	003d0900 	.word	0x003d0900
 800b3d4:	00f42400 	.word	0x00f42400
 800b3d8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3e0:	e2d1      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b3e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3e6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b3ea:	430b      	orrs	r3, r1
 800b3ec:	f040 809c 	bne.w	800b528 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b3f0:	4b93      	ldr	r3, [pc, #588]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b3f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3f4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b3f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b400:	d054      	beq.n	800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b408:	f200 808b 	bhi.w	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b412:	f000 8083 	beq.w	800b51c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b418:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b41c:	f200 8081 	bhi.w	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b426:	d02f      	beq.n	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b42e:	d878      	bhi.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b432:	2b00      	cmp	r3, #0
 800b434:	d004      	beq.n	800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b43c:	d012      	beq.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b43e:	e070      	b.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b440:	4b7f      	ldr	r3, [pc, #508]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b448:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b44c:	d107      	bne.n	800b45e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b44e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b452:	4618      	mov	r0, r3
 800b454:	f000 fd5e 	bl	800bf14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b45c:	e293      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b45e:	2300      	movs	r3, #0
 800b460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b462:	e290      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b464:	4b76      	ldr	r3, [pc, #472]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b46c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b470:	d107      	bne.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b472:	f107 0318 	add.w	r3, r7, #24
 800b476:	4618      	mov	r0, r3
 800b478:	f000 faa4 	bl	800b9c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b480:	e281      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b482:	2300      	movs	r3, #0
 800b484:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b486:	e27e      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b488:	4b6d      	ldr	r3, [pc, #436]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b494:	d107      	bne.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b496:	f107 030c 	add.w	r3, r7, #12
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 fbe6 	bl	800bc6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4a4:	e26f      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4aa:	e26c      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b4ac:	4b64      	ldr	r3, [pc, #400]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b4ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b4b4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b4b6:	4b62      	ldr	r3, [pc, #392]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f003 0304 	and.w	r3, r3, #4
 800b4be:	2b04      	cmp	r3, #4
 800b4c0:	d10c      	bne.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d109      	bne.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4c8:	4b5d      	ldr	r3, [pc, #372]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	08db      	lsrs	r3, r3, #3
 800b4ce:	f003 0303 	and.w	r3, r3, #3
 800b4d2:	4a5c      	ldr	r2, [pc, #368]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b4d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4da:	e01e      	b.n	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4dc:	4b58      	ldr	r3, [pc, #352]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4e8:	d106      	bne.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4f0:	d102      	bne.n	800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b4f2:	4b55      	ldr	r3, [pc, #340]	; (800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4f6:	e010      	b.n	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4f8:	4b51      	ldr	r3, [pc, #324]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b504:	d106      	bne.n	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b50c:	d102      	bne.n	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b50e:	4b4f      	ldr	r3, [pc, #316]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b510:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b512:	e002      	b.n	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b514:	2300      	movs	r3, #0
 800b516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b518:	e235      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b51a:	e234      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b51c:	4b4c      	ldr	r3, [pc, #304]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b520:	e231      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b522:	2300      	movs	r3, #0
 800b524:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b526:	e22e      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b52c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b530:	430b      	orrs	r3, r1
 800b532:	f040 808f 	bne.w	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b536:	4b42      	ldr	r3, [pc, #264]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b53a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b53e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b542:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b546:	d06b      	beq.n	800b620 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b54e:	d874      	bhi.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b552:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b556:	d056      	beq.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b55e:	d86c      	bhi.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b562:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b566:	d03b      	beq.n	800b5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b56e:	d864      	bhi.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b572:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b576:	d021      	beq.n	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b57e:	d85c      	bhi.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b582:	2b00      	cmp	r3, #0
 800b584:	d004      	beq.n	800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b58c:	d004      	beq.n	800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b58e:	e054      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b590:	f7fe fa4c 	bl	8009a2c <HAL_RCC_GetPCLK1Freq>
 800b594:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b596:	e1f6      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b598:	4b29      	ldr	r3, [pc, #164]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5a4:	d107      	bne.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5a6:	f107 0318 	add.w	r3, r7, #24
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f000 fa0a 	bl	800b9c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5b4:	e1e7      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5ba:	e1e4      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5bc:	4b20      	ldr	r3, [pc, #128]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5c8:	d107      	bne.n	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5ca:	f107 030c 	add.w	r3, r7, #12
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f000 fb4c 	bl	800bc6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5d8:	e1d5      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5de:	e1d2      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b5e0:	4b17      	ldr	r3, [pc, #92]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f003 0304 	and.w	r3, r3, #4
 800b5e8:	2b04      	cmp	r3, #4
 800b5ea:	d109      	bne.n	800b600 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5ec:	4b14      	ldr	r3, [pc, #80]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	08db      	lsrs	r3, r3, #3
 800b5f2:	f003 0303 	and.w	r3, r3, #3
 800b5f6:	4a13      	ldr	r2, [pc, #76]	; (800b644 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b5f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5fe:	e1c2      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b600:	2300      	movs	r3, #0
 800b602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b604:	e1bf      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b606:	4b0e      	ldr	r3, [pc, #56]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b60e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b612:	d102      	bne.n	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b614:	4b0c      	ldr	r3, [pc, #48]	; (800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b616:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b618:	e1b5      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b61a:	2300      	movs	r3, #0
 800b61c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b61e:	e1b2      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b620:	4b07      	ldr	r3, [pc, #28]	; (800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b62c:	d102      	bne.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b62e:	4b07      	ldr	r3, [pc, #28]	; (800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b630:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b632:	e1a8      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b634:	2300      	movs	r3, #0
 800b636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b638:	e1a5      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b63a:	2300      	movs	r3, #0
 800b63c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b63e:	e1a2      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b640:	58024400 	.word	0x58024400
 800b644:	03d09000 	.word	0x03d09000
 800b648:	003d0900 	.word	0x003d0900
 800b64c:	00f42400 	.word	0x00f42400
 800b650:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b654:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b658:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b65c:	430b      	orrs	r3, r1
 800b65e:	d173      	bne.n	800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b660:	4b9c      	ldr	r3, [pc, #624]	; (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b664:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b668:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b670:	d02f      	beq.n	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b674:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b678:	d863      	bhi.n	800b742 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d004      	beq.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b686:	d012      	beq.n	800b6ae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b688:	e05b      	b.n	800b742 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b68a:	4b92      	ldr	r3, [pc, #584]	; (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b696:	d107      	bne.n	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b698:	f107 0318 	add.w	r3, r7, #24
 800b69c:	4618      	mov	r0, r3
 800b69e:	f000 f991 	bl	800b9c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b6a2:	69bb      	ldr	r3, [r7, #24]
 800b6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6a6:	e16e      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6ac:	e16b      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6ae:	4b89      	ldr	r3, [pc, #548]	; (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6ba:	d107      	bne.n	800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6bc:	f107 030c 	add.w	r3, r7, #12
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f000 fad3 	bl	800bc6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6ca:	e15c      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6d0:	e159      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b6d2:	4b80      	ldr	r3, [pc, #512]	; (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b6d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b6da:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b6dc:	4b7d      	ldr	r3, [pc, #500]	; (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f003 0304 	and.w	r3, r3, #4
 800b6e4:	2b04      	cmp	r3, #4
 800b6e6:	d10c      	bne.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b6e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d109      	bne.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6ee:	4b79      	ldr	r3, [pc, #484]	; (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	08db      	lsrs	r3, r3, #3
 800b6f4:	f003 0303 	and.w	r3, r3, #3
 800b6f8:	4a77      	ldr	r2, [pc, #476]	; (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b6fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b700:	e01e      	b.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b702:	4b74      	ldr	r3, [pc, #464]	; (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b70a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b70e:	d106      	bne.n	800b71e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b716:	d102      	bne.n	800b71e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b718:	4b70      	ldr	r3, [pc, #448]	; (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b71a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b71c:	e010      	b.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b71e:	4b6d      	ldr	r3, [pc, #436]	; (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b726:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b72a:	d106      	bne.n	800b73a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b732:	d102      	bne.n	800b73a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b734:	4b6a      	ldr	r3, [pc, #424]	; (800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b736:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b738:	e002      	b.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b73a:	2300      	movs	r3, #0
 800b73c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b73e:	e122      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b740:	e121      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b742:	2300      	movs	r3, #0
 800b744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b746:	e11e      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b74c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b750:	430b      	orrs	r3, r1
 800b752:	d133      	bne.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b754:	4b5f      	ldr	r3, [pc, #380]	; (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b75c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b760:	2b00      	cmp	r3, #0
 800b762:	d004      	beq.n	800b76e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b76a:	d012      	beq.n	800b792 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b76c:	e023      	b.n	800b7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b76e:	4b59      	ldr	r3, [pc, #356]	; (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b776:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b77a:	d107      	bne.n	800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b77c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b780:	4618      	mov	r0, r3
 800b782:	f000 fbc7 	bl	800bf14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b788:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b78a:	e0fc      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b78c:	2300      	movs	r3, #0
 800b78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b790:	e0f9      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b792:	4b50      	ldr	r3, [pc, #320]	; (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b79a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b79e:	d107      	bne.n	800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7a0:	f107 0318 	add.w	r3, r7, #24
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f000 f90d 	bl	800b9c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b7aa:	6a3b      	ldr	r3, [r7, #32]
 800b7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7ae:	e0ea      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7b4:	e0e7      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7ba:	e0e4      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b7bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7c0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b7c4:	430b      	orrs	r3, r1
 800b7c6:	f040 808d 	bne.w	800b8e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b7ca:	4b42      	ldr	r3, [pc, #264]	; (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b7cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7ce:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b7d2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7da:	d06b      	beq.n	800b8b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7e2:	d874      	bhi.n	800b8ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7ea:	d056      	beq.n	800b89a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7f2:	d86c      	bhi.n	800b8ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b7fa:	d03b      	beq.n	800b874 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b802:	d864      	bhi.n	800b8ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b80a:	d021      	beq.n	800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b812:	d85c      	bhi.n	800b8ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b816:	2b00      	cmp	r3, #0
 800b818:	d004      	beq.n	800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b820:	d004      	beq.n	800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b822:	e054      	b.n	800b8ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b824:	f000 f8b8 	bl	800b998 <HAL_RCCEx_GetD3PCLK1Freq>
 800b828:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b82a:	e0ac      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b82c:	4b29      	ldr	r3, [pc, #164]	; (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b838:	d107      	bne.n	800b84a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b83a:	f107 0318 	add.w	r3, r7, #24
 800b83e:	4618      	mov	r0, r3
 800b840:	f000 f8c0 	bl	800b9c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b848:	e09d      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b84a:	2300      	movs	r3, #0
 800b84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b84e:	e09a      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b850:	4b20      	ldr	r3, [pc, #128]	; (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b85c:	d107      	bne.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b85e:	f107 030c 	add.w	r3, r7, #12
 800b862:	4618      	mov	r0, r3
 800b864:	f000 fa02 	bl	800bc6c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b86c:	e08b      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b86e:	2300      	movs	r3, #0
 800b870:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b872:	e088      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b874:	4b17      	ldr	r3, [pc, #92]	; (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 0304 	and.w	r3, r3, #4
 800b87c:	2b04      	cmp	r3, #4
 800b87e:	d109      	bne.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b880:	4b14      	ldr	r3, [pc, #80]	; (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	08db      	lsrs	r3, r3, #3
 800b886:	f003 0303 	and.w	r3, r3, #3
 800b88a:	4a13      	ldr	r2, [pc, #76]	; (800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b88c:	fa22 f303 	lsr.w	r3, r2, r3
 800b890:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b892:	e078      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b894:	2300      	movs	r3, #0
 800b896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b898:	e075      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b89a:	4b0e      	ldr	r3, [pc, #56]	; (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a6:	d102      	bne.n	800b8ae <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b8a8:	4b0c      	ldr	r3, [pc, #48]	; (800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8ac:	e06b      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8b2:	e068      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b8b4:	4b07      	ldr	r3, [pc, #28]	; (800b8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8c0:	d102      	bne.n	800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b8c2:	4b07      	ldr	r3, [pc, #28]	; (800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8c6:	e05e      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8cc:	e05b      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8d2:	e058      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b8d4:	58024400 	.word	0x58024400
 800b8d8:	03d09000 	.word	0x03d09000
 800b8dc:	003d0900 	.word	0x003d0900
 800b8e0:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b8e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8e8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b8ec:	430b      	orrs	r3, r1
 800b8ee:	d148      	bne.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b8f0:	4b27      	ldr	r3, [pc, #156]	; (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b8f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b8f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b900:	d02a      	beq.n	800b958 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b908:	d838      	bhi.n	800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d004      	beq.n	800b91a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b912:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b916:	d00d      	beq.n	800b934 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b918:	e030      	b.n	800b97c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b91a:	4b1d      	ldr	r3, [pc, #116]	; (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b926:	d102      	bne.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b928:	4b1a      	ldr	r3, [pc, #104]	; (800b994 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b92a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b92c:	e02b      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b92e:	2300      	movs	r3, #0
 800b930:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b932:	e028      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b934:	4b16      	ldr	r3, [pc, #88]	; (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b93c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b940:	d107      	bne.n	800b952 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b946:	4618      	mov	r0, r3
 800b948:	f000 fae4 	bl	800bf14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b950:	e019      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b952:	2300      	movs	r3, #0
 800b954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b956:	e016      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b958:	4b0d      	ldr	r3, [pc, #52]	; (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b960:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b964:	d107      	bne.n	800b976 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b966:	f107 0318 	add.w	r3, r7, #24
 800b96a:	4618      	mov	r0, r3
 800b96c:	f000 f82a 	bl	800b9c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b974:	e007      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b976:	2300      	movs	r3, #0
 800b978:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b97a:	e004      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b97c:	2300      	movs	r3, #0
 800b97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b980:	e001      	b.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b982:	2300      	movs	r3, #0
 800b984:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3740      	adds	r7, #64	; 0x40
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	58024400 	.word	0x58024400
 800b994:	00f42400 	.word	0x00f42400

0800b998 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b99c:	f7fe f816 	bl	80099cc <HAL_RCC_GetHCLKFreq>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	4b06      	ldr	r3, [pc, #24]	; (800b9bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b9a4:	6a1b      	ldr	r3, [r3, #32]
 800b9a6:	091b      	lsrs	r3, r3, #4
 800b9a8:	f003 0307 	and.w	r3, r3, #7
 800b9ac:	4904      	ldr	r1, [pc, #16]	; (800b9c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b9ae:	5ccb      	ldrb	r3, [r1, r3]
 800b9b0:	f003 031f 	and.w	r3, r3, #31
 800b9b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	58024400 	.word	0x58024400
 800b9c0:	0801047c 	.word	0x0801047c

0800b9c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b089      	sub	sp, #36	; 0x24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9cc:	4ba1      	ldr	r3, [pc, #644]	; (800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d0:	f003 0303 	and.w	r3, r3, #3
 800b9d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b9d6:	4b9f      	ldr	r3, [pc, #636]	; (800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9da:	0b1b      	lsrs	r3, r3, #12
 800b9dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b9e2:	4b9c      	ldr	r3, [pc, #624]	; (800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e6:	091b      	lsrs	r3, r3, #4
 800b9e8:	f003 0301 	and.w	r3, r3, #1
 800b9ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b9ee:	4b99      	ldr	r3, [pc, #612]	; (800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9f2:	08db      	lsrs	r3, r3, #3
 800b9f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9f8:	693a      	ldr	r2, [r7, #16]
 800b9fa:	fb02 f303 	mul.w	r3, r2, r3
 800b9fe:	ee07 3a90 	vmov	s15, r3
 800ba02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	f000 8111 	beq.w	800bc34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	2b02      	cmp	r3, #2
 800ba16:	f000 8083 	beq.w	800bb20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	f200 80a1 	bhi.w	800bb64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d003      	beq.n	800ba30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d056      	beq.n	800badc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ba2e:	e099      	b.n	800bb64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba30:	4b88      	ldr	r3, [pc, #544]	; (800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f003 0320 	and.w	r3, r3, #32
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d02d      	beq.n	800ba98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba3c:	4b85      	ldr	r3, [pc, #532]	; (800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	08db      	lsrs	r3, r3, #3
 800ba42:	f003 0303 	and.w	r3, r3, #3
 800ba46:	4a84      	ldr	r2, [pc, #528]	; (800bc58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ba48:	fa22 f303 	lsr.w	r3, r2, r3
 800ba4c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	ee07 3a90 	vmov	s15, r3
 800ba54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	ee07 3a90 	vmov	s15, r3
 800ba5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba66:	4b7b      	ldr	r3, [pc, #492]	; (800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba6e:	ee07 3a90 	vmov	s15, r3
 800ba72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba76:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bc5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ba7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ba96:	e087      	b.n	800bba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	ee07 3a90 	vmov	s15, r3
 800ba9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baa2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800baa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baaa:	4b6a      	ldr	r3, [pc, #424]	; (800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800baac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bab2:	ee07 3a90 	vmov	s15, r3
 800bab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baba:	ed97 6a03 	vldr	s12, [r7, #12]
 800babe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bc5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bada:	e065      	b.n	800bba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	ee07 3a90 	vmov	s15, r3
 800bae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bae6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bc64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800baea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baee:	4b59      	ldr	r3, [pc, #356]	; (800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800baf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baf6:	ee07 3a90 	vmov	s15, r3
 800bafa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bafe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb02:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bc5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb1e:	e043      	b.n	800bba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	ee07 3a90 	vmov	s15, r3
 800bb26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bc68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bb2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb32:	4b48      	ldr	r3, [pc, #288]	; (800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb3a:	ee07 3a90 	vmov	s15, r3
 800bb3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb42:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb46:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bc5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb62:	e021      	b.n	800bba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	ee07 3a90 	vmov	s15, r3
 800bb6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bc64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb76:	4b37      	ldr	r3, [pc, #220]	; (800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb7e:	ee07 3a90 	vmov	s15, r3
 800bb82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb86:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bc5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bba6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bba8:	4b2a      	ldr	r3, [pc, #168]	; (800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbac:	0a5b      	lsrs	r3, r3, #9
 800bbae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbb2:	ee07 3a90 	vmov	s15, r3
 800bbb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbc2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbce:	ee17 2a90 	vmov	r2, s15
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bbd6:	4b1f      	ldr	r3, [pc, #124]	; (800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbda:	0c1b      	lsrs	r3, r3, #16
 800bbdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbe0:	ee07 3a90 	vmov	s15, r3
 800bbe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbe8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbf0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbfc:	ee17 2a90 	vmov	r2, s15
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bc04:	4b13      	ldr	r3, [pc, #76]	; (800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc08:	0e1b      	lsrs	r3, r3, #24
 800bc0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc0e:	ee07 3a90 	vmov	s15, r3
 800bc12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc2a:	ee17 2a90 	vmov	r2, s15
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bc32:	e008      	b.n	800bc46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	609a      	str	r2, [r3, #8]
}
 800bc46:	bf00      	nop
 800bc48:	3724      	adds	r7, #36	; 0x24
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop
 800bc54:	58024400 	.word	0x58024400
 800bc58:	03d09000 	.word	0x03d09000
 800bc5c:	46000000 	.word	0x46000000
 800bc60:	4c742400 	.word	0x4c742400
 800bc64:	4a742400 	.word	0x4a742400
 800bc68:	4b742400 	.word	0x4b742400

0800bc6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b089      	sub	sp, #36	; 0x24
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc74:	4ba1      	ldr	r3, [pc, #644]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc78:	f003 0303 	and.w	r3, r3, #3
 800bc7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bc7e:	4b9f      	ldr	r3, [pc, #636]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc82:	0d1b      	lsrs	r3, r3, #20
 800bc84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bc8a:	4b9c      	ldr	r3, [pc, #624]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8e:	0a1b      	lsrs	r3, r3, #8
 800bc90:	f003 0301 	and.w	r3, r3, #1
 800bc94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bc96:	4b99      	ldr	r3, [pc, #612]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc9a:	08db      	lsrs	r3, r3, #3
 800bc9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bca0:	693a      	ldr	r2, [r7, #16]
 800bca2:	fb02 f303 	mul.w	r3, r2, r3
 800bca6:	ee07 3a90 	vmov	s15, r3
 800bcaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f000 8111 	beq.w	800bedc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bcba:	69bb      	ldr	r3, [r7, #24]
 800bcbc:	2b02      	cmp	r3, #2
 800bcbe:	f000 8083 	beq.w	800bdc8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bcc2:	69bb      	ldr	r3, [r7, #24]
 800bcc4:	2b02      	cmp	r3, #2
 800bcc6:	f200 80a1 	bhi.w	800be0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d003      	beq.n	800bcd8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d056      	beq.n	800bd84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bcd6:	e099      	b.n	800be0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcd8:	4b88      	ldr	r3, [pc, #544]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f003 0320 	and.w	r3, r3, #32
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d02d      	beq.n	800bd40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bce4:	4b85      	ldr	r3, [pc, #532]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	08db      	lsrs	r3, r3, #3
 800bcea:	f003 0303 	and.w	r3, r3, #3
 800bcee:	4a84      	ldr	r2, [pc, #528]	; (800bf00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bcf0:	fa22 f303 	lsr.w	r3, r2, r3
 800bcf4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	ee07 3a90 	vmov	s15, r3
 800bcfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	ee07 3a90 	vmov	s15, r3
 800bd06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd0e:	4b7b      	ldr	r3, [pc, #492]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd16:	ee07 3a90 	vmov	s15, r3
 800bd1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd22:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bd3e:	e087      	b.n	800be50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	ee07 3a90 	vmov	s15, r3
 800bd46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bd4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd52:	4b6a      	ldr	r3, [pc, #424]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd5a:	ee07 3a90 	vmov	s15, r3
 800bd5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd62:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd66:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bd6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd82:	e065      	b.n	800be50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	ee07 3a90 	vmov	s15, r3
 800bd8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bd92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd96:	4b59      	ldr	r3, [pc, #356]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd9e:	ee07 3a90 	vmov	s15, r3
 800bda2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bda6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdaa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdc6:	e043      	b.n	800be50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	ee07 3a90 	vmov	s15, r3
 800bdce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdd2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bf10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bdd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdda:	4b48      	ldr	r3, [pc, #288]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bde2:	ee07 3a90 	vmov	s15, r3
 800bde6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdea:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdee:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be0a:	e021      	b.n	800be50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	ee07 3a90 	vmov	s15, r3
 800be12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800be1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be1e:	4b37      	ldr	r3, [pc, #220]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be26:	ee07 3a90 	vmov	s15, r3
 800be2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800be32:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be4e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800be50:	4b2a      	ldr	r3, [pc, #168]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be54:	0a5b      	lsrs	r3, r3, #9
 800be56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be5a:	ee07 3a90 	vmov	s15, r3
 800be5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800be6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be76:	ee17 2a90 	vmov	r2, s15
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800be7e:	4b1f      	ldr	r3, [pc, #124]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be82:	0c1b      	lsrs	r3, r3, #16
 800be84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be88:	ee07 3a90 	vmov	s15, r3
 800be8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be94:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be98:	edd7 6a07 	vldr	s13, [r7, #28]
 800be9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bea4:	ee17 2a90 	vmov	r2, s15
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800beac:	4b13      	ldr	r3, [pc, #76]	; (800befc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb0:	0e1b      	lsrs	r3, r3, #24
 800beb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beb6:	ee07 3a90 	vmov	s15, r3
 800beba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bebe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bec2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bec6:	edd7 6a07 	vldr	s13, [r7, #28]
 800beca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bed2:	ee17 2a90 	vmov	r2, s15
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800beda:	e008      	b.n	800beee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	609a      	str	r2, [r3, #8]
}
 800beee:	bf00      	nop
 800bef0:	3724      	adds	r7, #36	; 0x24
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	58024400 	.word	0x58024400
 800bf00:	03d09000 	.word	0x03d09000
 800bf04:	46000000 	.word	0x46000000
 800bf08:	4c742400 	.word	0x4c742400
 800bf0c:	4a742400 	.word	0x4a742400
 800bf10:	4b742400 	.word	0x4b742400

0800bf14 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b089      	sub	sp, #36	; 0x24
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf1c:	4ba0      	ldr	r3, [pc, #640]	; (800c1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf20:	f003 0303 	and.w	r3, r3, #3
 800bf24:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bf26:	4b9e      	ldr	r3, [pc, #632]	; (800c1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf2a:	091b      	lsrs	r3, r3, #4
 800bf2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf30:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bf32:	4b9b      	ldr	r3, [pc, #620]	; (800c1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf36:	f003 0301 	and.w	r3, r3, #1
 800bf3a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bf3c:	4b98      	ldr	r3, [pc, #608]	; (800c1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf40:	08db      	lsrs	r3, r3, #3
 800bf42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf46:	693a      	ldr	r2, [r7, #16]
 800bf48:	fb02 f303 	mul.w	r3, r2, r3
 800bf4c:	ee07 3a90 	vmov	s15, r3
 800bf50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf54:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	f000 8111 	beq.w	800c182 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	f000 8083 	beq.w	800c06e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	2b02      	cmp	r3, #2
 800bf6c:	f200 80a1 	bhi.w	800c0b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d003      	beq.n	800bf7e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d056      	beq.n	800c02a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bf7c:	e099      	b.n	800c0b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf7e:	4b88      	ldr	r3, [pc, #544]	; (800c1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f003 0320 	and.w	r3, r3, #32
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d02d      	beq.n	800bfe6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf8a:	4b85      	ldr	r3, [pc, #532]	; (800c1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	08db      	lsrs	r3, r3, #3
 800bf90:	f003 0303 	and.w	r3, r3, #3
 800bf94:	4a83      	ldr	r2, [pc, #524]	; (800c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bf96:	fa22 f303 	lsr.w	r3, r2, r3
 800bf9a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	ee07 3a90 	vmov	s15, r3
 800bfa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	ee07 3a90 	vmov	s15, r3
 800bfac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfb4:	4b7a      	ldr	r3, [pc, #488]	; (800c1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfbc:	ee07 3a90 	vmov	s15, r3
 800bfc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfc4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfc8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bfcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfe0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bfe4:	e087      	b.n	800c0f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	ee07 3a90 	vmov	s15, r3
 800bfec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c1ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bff4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bff8:	4b69      	ldr	r3, [pc, #420]	; (800c1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c000:	ee07 3a90 	vmov	s15, r3
 800c004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c008:	ed97 6a03 	vldr	s12, [r7, #12]
 800c00c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c010:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c014:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c018:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c01c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c020:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c024:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c028:	e065      	b.n	800c0f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	ee07 3a90 	vmov	s15, r3
 800c030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c034:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c03c:	4b58      	ldr	r3, [pc, #352]	; (800c1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c044:	ee07 3a90 	vmov	s15, r3
 800c048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c04c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c050:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c054:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c058:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c05c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c060:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c064:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c068:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c06c:	e043      	b.n	800c0f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	ee07 3a90 	vmov	s15, r3
 800c074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c078:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c1b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c07c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c080:	4b47      	ldr	r3, [pc, #284]	; (800c1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c088:	ee07 3a90 	vmov	s15, r3
 800c08c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c090:	ed97 6a03 	vldr	s12, [r7, #12]
 800c094:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c098:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c09c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0b0:	e021      	b.n	800c0f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	ee07 3a90 	vmov	s15, r3
 800c0b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0bc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c1ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c0c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0c4:	4b36      	ldr	r3, [pc, #216]	; (800c1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0cc:	ee07 3a90 	vmov	s15, r3
 800c0d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c0f6:	4b2a      	ldr	r3, [pc, #168]	; (800c1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0fa:	0a5b      	lsrs	r3, r3, #9
 800c0fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c100:	ee07 3a90 	vmov	s15, r3
 800c104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c108:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c10c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c110:	edd7 6a07 	vldr	s13, [r7, #28]
 800c114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c11c:	ee17 2a90 	vmov	r2, s15
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c124:	4b1e      	ldr	r3, [pc, #120]	; (800c1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c128:	0c1b      	lsrs	r3, r3, #16
 800c12a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c12e:	ee07 3a90 	vmov	s15, r3
 800c132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c13a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c13e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c14a:	ee17 2a90 	vmov	r2, s15
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c152:	4b13      	ldr	r3, [pc, #76]	; (800c1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c156:	0e1b      	lsrs	r3, r3, #24
 800c158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c15c:	ee07 3a90 	vmov	s15, r3
 800c160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c164:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c168:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c16c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c178:	ee17 2a90 	vmov	r2, s15
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c180:	e008      	b.n	800c194 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2200      	movs	r2, #0
 800c18c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	609a      	str	r2, [r3, #8]
}
 800c194:	bf00      	nop
 800c196:	3724      	adds	r7, #36	; 0x24
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr
 800c1a0:	58024400 	.word	0x58024400
 800c1a4:	03d09000 	.word	0x03d09000
 800c1a8:	46000000 	.word	0x46000000
 800c1ac:	4c742400 	.word	0x4c742400
 800c1b0:	4a742400 	.word	0x4a742400
 800c1b4:	4b742400 	.word	0x4b742400

0800c1b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c1c6:	4b53      	ldr	r3, [pc, #332]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ca:	f003 0303 	and.w	r3, r3, #3
 800c1ce:	2b03      	cmp	r3, #3
 800c1d0:	d101      	bne.n	800c1d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e099      	b.n	800c30a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c1d6:	4b4f      	ldr	r3, [pc, #316]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a4e      	ldr	r2, [pc, #312]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c1dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c1e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1e2:	f7f7 ff83 	bl	80040ec <HAL_GetTick>
 800c1e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1e8:	e008      	b.n	800c1fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c1ea:	f7f7 ff7f 	bl	80040ec <HAL_GetTick>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	2b02      	cmp	r3, #2
 800c1f6:	d901      	bls.n	800c1fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c1f8:	2303      	movs	r3, #3
 800c1fa:	e086      	b.n	800c30a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1fc:	4b45      	ldr	r3, [pc, #276]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c204:	2b00      	cmp	r3, #0
 800c206:	d1f0      	bne.n	800c1ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c208:	4b42      	ldr	r3, [pc, #264]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c20c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	031b      	lsls	r3, r3, #12
 800c216:	493f      	ldr	r1, [pc, #252]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c218:	4313      	orrs	r3, r2
 800c21a:	628b      	str	r3, [r1, #40]	; 0x28
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	3b01      	subs	r3, #1
 800c222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	3b01      	subs	r3, #1
 800c22c:	025b      	lsls	r3, r3, #9
 800c22e:	b29b      	uxth	r3, r3
 800c230:	431a      	orrs	r2, r3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	3b01      	subs	r3, #1
 800c238:	041b      	lsls	r3, r3, #16
 800c23a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c23e:	431a      	orrs	r2, r3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	691b      	ldr	r3, [r3, #16]
 800c244:	3b01      	subs	r3, #1
 800c246:	061b      	lsls	r3, r3, #24
 800c248:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c24c:	4931      	ldr	r1, [pc, #196]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c24e:	4313      	orrs	r3, r2
 800c250:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c252:	4b30      	ldr	r3, [pc, #192]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c256:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	695b      	ldr	r3, [r3, #20]
 800c25e:	492d      	ldr	r1, [pc, #180]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c260:	4313      	orrs	r3, r2
 800c262:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c264:	4b2b      	ldr	r3, [pc, #172]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c268:	f023 0220 	bic.w	r2, r3, #32
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	699b      	ldr	r3, [r3, #24]
 800c270:	4928      	ldr	r1, [pc, #160]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c272:	4313      	orrs	r3, r2
 800c274:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c276:	4b27      	ldr	r3, [pc, #156]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c27a:	4a26      	ldr	r2, [pc, #152]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c27c:	f023 0310 	bic.w	r3, r3, #16
 800c280:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c282:	4b24      	ldr	r3, [pc, #144]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c286:	4b24      	ldr	r3, [pc, #144]	; (800c318 <RCCEx_PLL2_Config+0x160>)
 800c288:	4013      	ands	r3, r2
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	69d2      	ldr	r2, [r2, #28]
 800c28e:	00d2      	lsls	r2, r2, #3
 800c290:	4920      	ldr	r1, [pc, #128]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c292:	4313      	orrs	r3, r2
 800c294:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c296:	4b1f      	ldr	r3, [pc, #124]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29a:	4a1e      	ldr	r2, [pc, #120]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c29c:	f043 0310 	orr.w	r3, r3, #16
 800c2a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d106      	bne.n	800c2b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c2a8:	4b1a      	ldr	r3, [pc, #104]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ac:	4a19      	ldr	r2, [pc, #100]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c2ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c2b4:	e00f      	b.n	800c2d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d106      	bne.n	800c2ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c2bc:	4b15      	ldr	r3, [pc, #84]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c0:	4a14      	ldr	r2, [pc, #80]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c2c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c2c8:	e005      	b.n	800c2d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c2ca:	4b12      	ldr	r3, [pc, #72]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ce:	4a11      	ldr	r2, [pc, #68]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c2d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c2d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c2d6:	4b0f      	ldr	r3, [pc, #60]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a0e      	ldr	r2, [pc, #56]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c2dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c2e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2e2:	f7f7 ff03 	bl	80040ec <HAL_GetTick>
 800c2e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2e8:	e008      	b.n	800c2fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c2ea:	f7f7 feff 	bl	80040ec <HAL_GetTick>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	1ad3      	subs	r3, r2, r3
 800c2f4:	2b02      	cmp	r3, #2
 800c2f6:	d901      	bls.n	800c2fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c2f8:	2303      	movs	r3, #3
 800c2fa:	e006      	b.n	800c30a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2fc:	4b05      	ldr	r3, [pc, #20]	; (800c314 <RCCEx_PLL2_Config+0x15c>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c304:	2b00      	cmp	r3, #0
 800c306:	d0f0      	beq.n	800c2ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c308:	7bfb      	ldrb	r3, [r7, #15]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	58024400 	.word	0x58024400
 800c318:	ffff0007 	.word	0xffff0007

0800c31c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c326:	2300      	movs	r3, #0
 800c328:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c32a:	4b53      	ldr	r3, [pc, #332]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c32e:	f003 0303 	and.w	r3, r3, #3
 800c332:	2b03      	cmp	r3, #3
 800c334:	d101      	bne.n	800c33a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c336:	2301      	movs	r3, #1
 800c338:	e099      	b.n	800c46e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c33a:	4b4f      	ldr	r3, [pc, #316]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a4e      	ldr	r2, [pc, #312]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c346:	f7f7 fed1 	bl	80040ec <HAL_GetTick>
 800c34a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c34c:	e008      	b.n	800c360 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c34e:	f7f7 fecd 	bl	80040ec <HAL_GetTick>
 800c352:	4602      	mov	r2, r0
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	1ad3      	subs	r3, r2, r3
 800c358:	2b02      	cmp	r3, #2
 800c35a:	d901      	bls.n	800c360 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c35c:	2303      	movs	r3, #3
 800c35e:	e086      	b.n	800c46e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c360:	4b45      	ldr	r3, [pc, #276]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1f0      	bne.n	800c34e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c36c:	4b42      	ldr	r3, [pc, #264]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c370:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	051b      	lsls	r3, r3, #20
 800c37a:	493f      	ldr	r1, [pc, #252]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c37c:	4313      	orrs	r3, r2
 800c37e:	628b      	str	r3, [r1, #40]	; 0x28
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	3b01      	subs	r3, #1
 800c386:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	3b01      	subs	r3, #1
 800c390:	025b      	lsls	r3, r3, #9
 800c392:	b29b      	uxth	r3, r3
 800c394:	431a      	orrs	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	3b01      	subs	r3, #1
 800c39c:	041b      	lsls	r3, r3, #16
 800c39e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c3a2:	431a      	orrs	r2, r3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	061b      	lsls	r3, r3, #24
 800c3ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c3b0:	4931      	ldr	r1, [pc, #196]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c3b6:	4b30      	ldr	r3, [pc, #192]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	695b      	ldr	r3, [r3, #20]
 800c3c2:	492d      	ldr	r1, [pc, #180]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c3c8:	4b2b      	ldr	r3, [pc, #172]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	699b      	ldr	r3, [r3, #24]
 800c3d4:	4928      	ldr	r1, [pc, #160]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c3da:	4b27      	ldr	r3, [pc, #156]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3de:	4a26      	ldr	r2, [pc, #152]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c3e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c3e6:	4b24      	ldr	r3, [pc, #144]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c3e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3ea:	4b24      	ldr	r3, [pc, #144]	; (800c47c <RCCEx_PLL3_Config+0x160>)
 800c3ec:	4013      	ands	r3, r2
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	69d2      	ldr	r2, [r2, #28]
 800c3f2:	00d2      	lsls	r2, r2, #3
 800c3f4:	4920      	ldr	r1, [pc, #128]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c3fa:	4b1f      	ldr	r3, [pc, #124]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3fe:	4a1e      	ldr	r2, [pc, #120]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c404:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d106      	bne.n	800c41a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c40c:	4b1a      	ldr	r3, [pc, #104]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c410:	4a19      	ldr	r2, [pc, #100]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c412:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c416:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c418:	e00f      	b.n	800c43a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d106      	bne.n	800c42e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c420:	4b15      	ldr	r3, [pc, #84]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c424:	4a14      	ldr	r2, [pc, #80]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c426:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c42a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c42c:	e005      	b.n	800c43a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c42e:	4b12      	ldr	r3, [pc, #72]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c432:	4a11      	ldr	r2, [pc, #68]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c438:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c43a:	4b0f      	ldr	r3, [pc, #60]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a0e      	ldr	r2, [pc, #56]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c446:	f7f7 fe51 	bl	80040ec <HAL_GetTick>
 800c44a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c44c:	e008      	b.n	800c460 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c44e:	f7f7 fe4d 	bl	80040ec <HAL_GetTick>
 800c452:	4602      	mov	r2, r0
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	1ad3      	subs	r3, r2, r3
 800c458:	2b02      	cmp	r3, #2
 800c45a:	d901      	bls.n	800c460 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c45c:	2303      	movs	r3, #3
 800c45e:	e006      	b.n	800c46e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c460:	4b05      	ldr	r3, [pc, #20]	; (800c478 <RCCEx_PLL3_Config+0x15c>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d0f0      	beq.n	800c44e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3710      	adds	r7, #16
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	58024400 	.word	0x58024400
 800c47c:	ffff0007 	.word	0xffff0007

0800c480 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c488:	2301      	movs	r3, #1
 800c48a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d071      	beq.n	800c576 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d106      	bne.n	800c4ac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f7f5 fcbe 	bl	8001e28 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2202      	movs	r2, #2
 800c4b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	f003 0310 	and.w	r3, r3, #16
 800c4be:	2b10      	cmp	r3, #16
 800c4c0:	d050      	beq.n	800c564 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	22ca      	movs	r2, #202	; 0xca
 800c4c8:	625a      	str	r2, [r3, #36]	; 0x24
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2253      	movs	r2, #83	; 0x53
 800c4d0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 f87a 	bl	800c5cc <RTC_EnterInitMode>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c4dc:	7bfb      	ldrb	r3, [r7, #15]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d124      	bne.n	800c52c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6899      	ldr	r1, [r3, #8]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	4b24      	ldr	r3, [pc, #144]	; (800c580 <HAL_RTC_Init+0x100>)
 800c4ee:	400b      	ands	r3, r1
 800c4f0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	6899      	ldr	r1, [r3, #8]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685a      	ldr	r2, [r3, #4]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	691b      	ldr	r3, [r3, #16]
 800c500:	431a      	orrs	r2, r3
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	699b      	ldr	r3, [r3, #24]
 800c506:	431a      	orrs	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	430a      	orrs	r2, r1
 800c50e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	0419      	lsls	r1, r3, #16
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	68da      	ldr	r2, [r3, #12]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	430a      	orrs	r2, r1
 800c520:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 f886 	bl	800c634 <RTC_ExitInitMode>
 800c528:	4603      	mov	r3, r0
 800c52a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800c52c:	7bfb      	ldrb	r3, [r7, #15]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d113      	bne.n	800c55a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f022 0203 	bic.w	r2, r2, #3
 800c540:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	69da      	ldr	r2, [r3, #28]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	695b      	ldr	r3, [r3, #20]
 800c550:	431a      	orrs	r2, r3
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	430a      	orrs	r2, r1
 800c558:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	22ff      	movs	r2, #255	; 0xff
 800c560:	625a      	str	r2, [r3, #36]	; 0x24
 800c562:	e001      	b.n	800c568 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c564:	2300      	movs	r3, #0
 800c566:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c568:	7bfb      	ldrb	r3, [r7, #15]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d103      	bne.n	800c576 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2201      	movs	r2, #1
 800c572:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c576:	7bfb      	ldrb	r3, [r7, #15]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	ff8fffbf 	.word	0xff8fffbf

0800c584 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a0d      	ldr	r2, [pc, #52]	; (800c5c8 <HAL_RTC_WaitForSynchro+0x44>)
 800c592:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800c594:	f7f7 fdaa 	bl	80040ec <HAL_GetTick>
 800c598:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c59a:	e009      	b.n	800c5b0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c59c:	f7f7 fda6 	bl	80040ec <HAL_GetTick>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	1ad3      	subs	r3, r2, r3
 800c5a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c5aa:	d901      	bls.n	800c5b0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800c5ac:	2303      	movs	r3, #3
 800c5ae:	e007      	b.n	800c5c0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	f003 0320 	and.w	r3, r3, #32
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d0ee      	beq.n	800c59c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	0003ff5f 	.word	0x0003ff5f

0800c5cc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d120      	bne.n	800c628 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c5f0:	f7f7 fd7c 	bl	80040ec <HAL_GetTick>
 800c5f4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c5f6:	e00d      	b.n	800c614 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c5f8:	f7f7 fd78 	bl	80040ec <HAL_GetTick>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c606:	d905      	bls.n	800c614 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c608:	2303      	movs	r3, #3
 800c60a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2203      	movs	r2, #3
 800c610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d102      	bne.n	800c628 <RTC_EnterInitMode+0x5c>
 800c622:	7bfb      	ldrb	r3, [r7, #15]
 800c624:	2b03      	cmp	r3, #3
 800c626:	d1e7      	bne.n	800c5f8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800c628:	7bfb      	ldrb	r3, [r7, #15]
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3710      	adds	r7, #16
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
	...

0800c634 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c63c:	2300      	movs	r3, #0
 800c63e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800c640:	4b1a      	ldr	r3, [pc, #104]	; (800c6ac <RTC_ExitInitMode+0x78>)
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	4a19      	ldr	r2, [pc, #100]	; (800c6ac <RTC_ExitInitMode+0x78>)
 800c646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c64a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c64c:	4b17      	ldr	r3, [pc, #92]	; (800c6ac <RTC_ExitInitMode+0x78>)
 800c64e:	689b      	ldr	r3, [r3, #8]
 800c650:	f003 0320 	and.w	r3, r3, #32
 800c654:	2b00      	cmp	r3, #0
 800c656:	d10c      	bne.n	800c672 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f7ff ff93 	bl	800c584 <HAL_RTC_WaitForSynchro>
 800c65e:	4603      	mov	r3, r0
 800c660:	2b00      	cmp	r3, #0
 800c662:	d01e      	beq.n	800c6a2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2203      	movs	r2, #3
 800c668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c66c:	2303      	movs	r3, #3
 800c66e:	73fb      	strb	r3, [r7, #15]
 800c670:	e017      	b.n	800c6a2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c672:	4b0e      	ldr	r3, [pc, #56]	; (800c6ac <RTC_ExitInitMode+0x78>)
 800c674:	689b      	ldr	r3, [r3, #8]
 800c676:	4a0d      	ldr	r2, [pc, #52]	; (800c6ac <RTC_ExitInitMode+0x78>)
 800c678:	f023 0320 	bic.w	r3, r3, #32
 800c67c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7ff ff80 	bl	800c584 <HAL_RTC_WaitForSynchro>
 800c684:	4603      	mov	r3, r0
 800c686:	2b00      	cmp	r3, #0
 800c688:	d005      	beq.n	800c696 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2203      	movs	r2, #3
 800c68e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c692:	2303      	movs	r3, #3
 800c694:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c696:	4b05      	ldr	r3, [pc, #20]	; (800c6ac <RTC_ExitInitMode+0x78>)
 800c698:	689b      	ldr	r3, [r3, #8]
 800c69a:	4a04      	ldr	r2, [pc, #16]	; (800c6ac <RTC_ExitInitMode+0x78>)
 800c69c:	f043 0320 	orr.w	r3, r3, #32
 800c6a0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3710      	adds	r7, #16
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	58004000 	.word	0x58004000

0800c6b0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d101      	bne.n	800c6c4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e02b      	b.n	800c71c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d106      	bne.n	800c6de <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f7f4 fc99 	bl	8001010 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2202      	movs	r2, #2
 800c6e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	4610      	mov	r0, r2
 800c6f2:	f003 fdc5 	bl	8010280 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6818      	ldr	r0, [r3, #0]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	461a      	mov	r2, r3
 800c700:	6839      	ldr	r1, [r7, #0]
 800c702:	f003 fe19 	bl	8010338 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800c706:	4b07      	ldr	r3, [pc, #28]	; (800c724 <HAL_SDRAM_Init+0x74>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4a06      	ldr	r2, [pc, #24]	; (800c724 <HAL_SDRAM_Init+0x74>)
 800c70c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c710:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2201      	movs	r2, #1
 800c716:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c71a:	2300      	movs	r3, #0
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	52004000 	.word	0x52004000

0800c728 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d101      	bne.n	800c73a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c736:	2301      	movs	r3, #1
 800c738:	e10f      	b.n	800c95a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a87      	ldr	r2, [pc, #540]	; (800c964 <HAL_SPI_Init+0x23c>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d00f      	beq.n	800c76a <HAL_SPI_Init+0x42>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a86      	ldr	r2, [pc, #536]	; (800c968 <HAL_SPI_Init+0x240>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d00a      	beq.n	800c76a <HAL_SPI_Init+0x42>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a84      	ldr	r2, [pc, #528]	; (800c96c <HAL_SPI_Init+0x244>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d005      	beq.n	800c76a <HAL_SPI_Init+0x42>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	2b0f      	cmp	r3, #15
 800c764:	d901      	bls.n	800c76a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c766:	2301      	movs	r3, #1
 800c768:	e0f7      	b.n	800c95a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 f900 	bl	800c970 <SPI_GetPacketSize>
 800c770:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a7b      	ldr	r2, [pc, #492]	; (800c964 <HAL_SPI_Init+0x23c>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d00c      	beq.n	800c796 <HAL_SPI_Init+0x6e>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a79      	ldr	r2, [pc, #484]	; (800c968 <HAL_SPI_Init+0x240>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d007      	beq.n	800c796 <HAL_SPI_Init+0x6e>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4a78      	ldr	r2, [pc, #480]	; (800c96c <HAL_SPI_Init+0x244>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d002      	beq.n	800c796 <HAL_SPI_Init+0x6e>
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2b08      	cmp	r3, #8
 800c794:	d811      	bhi.n	800c7ba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c79a:	4a72      	ldr	r2, [pc, #456]	; (800c964 <HAL_SPI_Init+0x23c>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d009      	beq.n	800c7b4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a70      	ldr	r2, [pc, #448]	; (800c968 <HAL_SPI_Init+0x240>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d004      	beq.n	800c7b4 <HAL_SPI_Init+0x8c>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a6f      	ldr	r2, [pc, #444]	; (800c96c <HAL_SPI_Init+0x244>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d104      	bne.n	800c7be <HAL_SPI_Init+0x96>
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2b10      	cmp	r3, #16
 800c7b8:	d901      	bls.n	800c7be <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	e0cd      	b.n	800c95a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d106      	bne.n	800c7d8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7f5 fcb2 	bl	800213c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2202      	movs	r2, #2
 800c7dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f022 0201 	bic.w	r2, r2, #1
 800c7ee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c7fa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	699b      	ldr	r3, [r3, #24]
 800c800:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c804:	d119      	bne.n	800c83a <HAL_SPI_Init+0x112>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c80e:	d103      	bne.n	800c818 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c814:	2b00      	cmp	r3, #0
 800c816:	d008      	beq.n	800c82a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d10c      	bne.n	800c83a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c824:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c828:	d107      	bne.n	800c83a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c838:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00f      	beq.n	800c866 <HAL_SPI_Init+0x13e>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	68db      	ldr	r3, [r3, #12]
 800c84a:	2b06      	cmp	r3, #6
 800c84c:	d90b      	bls.n	800c866 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	430a      	orrs	r2, r1
 800c862:	601a      	str	r2, [r3, #0]
 800c864:	e007      	b.n	800c876 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c874:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	69da      	ldr	r2, [r3, #28]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c87e:	431a      	orrs	r2, r3
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	431a      	orrs	r2, r3
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c888:	ea42 0103 	orr.w	r1, r2, r3
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	68da      	ldr	r2, [r3, #12]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	430a      	orrs	r2, r1
 800c896:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a0:	431a      	orrs	r2, r3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a6:	431a      	orrs	r2, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	699b      	ldr	r3, [r3, #24]
 800c8ac:	431a      	orrs	r2, r3
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	691b      	ldr	r3, [r3, #16]
 800c8b2:	431a      	orrs	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	695b      	ldr	r3, [r3, #20]
 800c8b8:	431a      	orrs	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6a1b      	ldr	r3, [r3, #32]
 800c8be:	431a      	orrs	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	431a      	orrs	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8ca:	431a      	orrs	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	431a      	orrs	r2, r3
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8d6:	ea42 0103 	orr.w	r1, r2, r3
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	430a      	orrs	r2, r1
 800c8e4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d113      	bne.n	800c916 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c900:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c914:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f022 0201 	bic.w	r2, r2, #1
 800c924:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d00a      	beq.n	800c948 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	430a      	orrs	r2, r1
 800c946:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c958:	2300      	movs	r3, #0
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3710      	adds	r7, #16
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	bf00      	nop
 800c964:	40013000 	.word	0x40013000
 800c968:	40003800 	.word	0x40003800
 800c96c:	40003c00 	.word	0x40003c00

0800c970 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c970:	b480      	push	{r7}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c97c:	095b      	lsrs	r3, r3, #5
 800c97e:	3301      	adds	r3, #1
 800c980:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	3301      	adds	r3, #1
 800c988:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	3307      	adds	r3, #7
 800c98e:	08db      	lsrs	r3, r3, #3
 800c990:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	68fa      	ldr	r2, [r7, #12]
 800c996:	fb02 f303 	mul.w	r3, r2, r3
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3714      	adds	r7, #20
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr

0800c9a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b082      	sub	sp, #8
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d101      	bne.n	800c9b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e049      	b.n	800ca4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d106      	bne.n	800c9d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f7f6 fb11 	bl	8002ff4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2202      	movs	r2, #2
 800c9d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	3304      	adds	r3, #4
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	4610      	mov	r0, r2
 800c9e6:	f000 fdc5 	bl	800d574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2201      	movs	r2, #1
 800ca06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2201      	movs	r2, #1
 800ca16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2201      	movs	r2, #1
 800ca26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2201      	movs	r2, #1
 800ca36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2201      	movs	r2, #1
 800ca46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca4a:	2300      	movs	r3, #0
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3708      	adds	r7, #8
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d101      	bne.n	800ca66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ca62:	2301      	movs	r3, #1
 800ca64:	e049      	b.n	800cafa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d106      	bne.n	800ca80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2200      	movs	r2, #0
 800ca76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7f6 fc9e 	bl	80033bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2202      	movs	r2, #2
 800ca84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	3304      	adds	r3, #4
 800ca90:	4619      	mov	r1, r3
 800ca92:	4610      	mov	r0, r2
 800ca94:	f000 fd6e 	bl	800d574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2201      	movs	r2, #1
 800caac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2201      	movs	r2, #1
 800cab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2201      	movs	r2, #1
 800cabc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2201      	movs	r2, #1
 800cac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2201      	movs	r2, #1
 800cacc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2201      	movs	r2, #1
 800cad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2201      	movs	r2, #1
 800cadc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2201      	movs	r2, #1
 800cae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2201      	movs	r2, #1
 800caec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2201      	movs	r2, #1
 800caf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3708      	adds	r7, #8
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b082      	sub	sp, #8
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d101      	bne.n	800cb14 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800cb10:	2301      	movs	r3, #1
 800cb12:	e049      	b.n	800cba8 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d106      	bne.n	800cb2e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2200      	movs	r2, #0
 800cb24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f7f6 fb15 	bl	8003158 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2202      	movs	r2, #2
 800cb32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	3304      	adds	r3, #4
 800cb3e:	4619      	mov	r1, r3
 800cb40:	4610      	mov	r0, r2
 800cb42:	f000 fd17 	bl	800d574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2201      	movs	r2, #1
 800cb4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2201      	movs	r2, #1
 800cb52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2201      	movs	r2, #1
 800cb5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2201      	movs	r2, #1
 800cb62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2201      	movs	r2, #1
 800cb72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2201      	movs	r2, #1
 800cb82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2201      	movs	r2, #1
 800cb92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2201      	movs	r2, #1
 800cb9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2201      	movs	r2, #1
 800cba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b086      	sub	sp, #24
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d101      	bne.n	800cbc4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	e08f      	b.n	800cce4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d106      	bne.n	800cbde <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7f6 fc11 	bl	8003400 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2202      	movs	r2, #2
 800cbe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	6899      	ldr	r1, [r3, #8]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	4b3e      	ldr	r3, [pc, #248]	; (800ccec <HAL_TIM_Encoder_Init+0x13c>)
 800cbf2:	400b      	ands	r3, r1
 800cbf4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	3304      	adds	r3, #4
 800cbfe:	4619      	mov	r1, r3
 800cc00:	4610      	mov	r0, r2
 800cc02:	f000 fcb7 	bl	800d574 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	689b      	ldr	r3, [r3, #8]
 800cc0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	699b      	ldr	r3, [r3, #24]
 800cc14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	6a1b      	ldr	r3, [r3, #32]
 800cc1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	697a      	ldr	r2, [r7, #20]
 800cc24:	4313      	orrs	r3, r2
 800cc26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cc28:	693a      	ldr	r2, [r7, #16]
 800cc2a:	4b31      	ldr	r3, [pc, #196]	; (800ccf0 <HAL_TIM_Encoder_Init+0x140>)
 800cc2c:	4013      	ands	r3, r2
 800cc2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	689a      	ldr	r2, [r3, #8]
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	699b      	ldr	r3, [r3, #24]
 800cc38:	021b      	lsls	r3, r3, #8
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	693a      	ldr	r2, [r7, #16]
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800cc42:	693a      	ldr	r2, [r7, #16]
 800cc44:	4b2b      	ldr	r3, [pc, #172]	; (800ccf4 <HAL_TIM_Encoder_Init+0x144>)
 800cc46:	4013      	ands	r3, r2
 800cc48:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cc4a:	693a      	ldr	r2, [r7, #16]
 800cc4c:	4b2a      	ldr	r3, [pc, #168]	; (800ccf8 <HAL_TIM_Encoder_Init+0x148>)
 800cc4e:	4013      	ands	r3, r2
 800cc50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	68da      	ldr	r2, [r3, #12]
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	69db      	ldr	r3, [r3, #28]
 800cc5a:	021b      	lsls	r3, r3, #8
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	693a      	ldr	r2, [r7, #16]
 800cc60:	4313      	orrs	r3, r2
 800cc62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	691b      	ldr	r3, [r3, #16]
 800cc68:	011a      	lsls	r2, r3, #4
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	6a1b      	ldr	r3, [r3, #32]
 800cc6e:	031b      	lsls	r3, r3, #12
 800cc70:	4313      	orrs	r3, r2
 800cc72:	693a      	ldr	r2, [r7, #16]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800cc7e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800cc86:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	685a      	ldr	r2, [r3, #4]
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	695b      	ldr	r3, [r3, #20]
 800cc90:	011b      	lsls	r3, r3, #4
 800cc92:	4313      	orrs	r3, r2
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	4313      	orrs	r3, r2
 800cc98:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	697a      	ldr	r2, [r7, #20]
 800cca0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	693a      	ldr	r2, [r7, #16]
 800cca8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	68fa      	ldr	r2, [r7, #12]
 800ccb0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2201      	movs	r2, #1
 800ccce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2201      	movs	r2, #1
 800ccde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cce2:	2300      	movs	r3, #0
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3718      	adds	r7, #24
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}
 800ccec:	fffebff8 	.word	0xfffebff8
 800ccf0:	fffffcfc 	.word	0xfffffcfc
 800ccf4:	fffff3f3 	.word	0xfffff3f3
 800ccf8:	ffff0f0f 	.word	0xffff0f0f

0800ccfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	691b      	ldr	r3, [r3, #16]
 800cd0a:	f003 0302 	and.w	r3, r3, #2
 800cd0e:	2b02      	cmp	r3, #2
 800cd10:	d122      	bne.n	800cd58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	f003 0302 	and.w	r3, r3, #2
 800cd1c:	2b02      	cmp	r3, #2
 800cd1e:	d11b      	bne.n	800cd58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f06f 0202 	mvn.w	r2, #2
 800cd28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	699b      	ldr	r3, [r3, #24]
 800cd36:	f003 0303 	and.w	r3, r3, #3
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d003      	beq.n	800cd46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 fbfa 	bl	800d538 <HAL_TIM_IC_CaptureCallback>
 800cd44:	e005      	b.n	800cd52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f000 fbec 	bl	800d524 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 fbfd 	bl	800d54c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2200      	movs	r2, #0
 800cd56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	691b      	ldr	r3, [r3, #16]
 800cd5e:	f003 0304 	and.w	r3, r3, #4
 800cd62:	2b04      	cmp	r3, #4
 800cd64:	d122      	bne.n	800cdac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	68db      	ldr	r3, [r3, #12]
 800cd6c:	f003 0304 	and.w	r3, r3, #4
 800cd70:	2b04      	cmp	r3, #4
 800cd72:	d11b      	bne.n	800cdac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f06f 0204 	mvn.w	r2, #4
 800cd7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2202      	movs	r2, #2
 800cd82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	699b      	ldr	r3, [r3, #24]
 800cd8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d003      	beq.n	800cd9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 fbd0 	bl	800d538 <HAL_TIM_IC_CaptureCallback>
 800cd98:	e005      	b.n	800cda6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 fbc2 	bl	800d524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 fbd3 	bl	800d54c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	691b      	ldr	r3, [r3, #16]
 800cdb2:	f003 0308 	and.w	r3, r3, #8
 800cdb6:	2b08      	cmp	r3, #8
 800cdb8:	d122      	bne.n	800ce00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	f003 0308 	and.w	r3, r3, #8
 800cdc4:	2b08      	cmp	r3, #8
 800cdc6:	d11b      	bne.n	800ce00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f06f 0208 	mvn.w	r2, #8
 800cdd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2204      	movs	r2, #4
 800cdd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	69db      	ldr	r3, [r3, #28]
 800cdde:	f003 0303 	and.w	r3, r3, #3
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d003      	beq.n	800cdee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 fba6 	bl	800d538 <HAL_TIM_IC_CaptureCallback>
 800cdec:	e005      	b.n	800cdfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 fb98 	bl	800d524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f000 fba9 	bl	800d54c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	691b      	ldr	r3, [r3, #16]
 800ce06:	f003 0310 	and.w	r3, r3, #16
 800ce0a:	2b10      	cmp	r3, #16
 800ce0c:	d122      	bne.n	800ce54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	f003 0310 	and.w	r3, r3, #16
 800ce18:	2b10      	cmp	r3, #16
 800ce1a:	d11b      	bne.n	800ce54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f06f 0210 	mvn.w	r2, #16
 800ce24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2208      	movs	r2, #8
 800ce2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	69db      	ldr	r3, [r3, #28]
 800ce32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d003      	beq.n	800ce42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 fb7c 	bl	800d538 <HAL_TIM_IC_CaptureCallback>
 800ce40:	e005      	b.n	800ce4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 fb6e 	bl	800d524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 fb7f 	bl	800d54c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	691b      	ldr	r3, [r3, #16]
 800ce5a:	f003 0301 	and.w	r3, r3, #1
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d10e      	bne.n	800ce80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	f003 0301 	and.w	r3, r3, #1
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d107      	bne.n	800ce80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f06f 0201 	mvn.w	r2, #1
 800ce78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 fb48 	bl	800d510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce8a:	2b80      	cmp	r3, #128	; 0x80
 800ce8c:	d10e      	bne.n	800ceac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce98:	2b80      	cmp	r3, #128	; 0x80
 800ce9a:	d107      	bne.n	800ceac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f001 fa1e 	bl	800e2e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	691b      	ldr	r3, [r3, #16]
 800ceb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ceba:	d10e      	bne.n	800ceda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cec6:	2b80      	cmp	r3, #128	; 0x80
 800cec8:	d107      	bne.n	800ceda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ced2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f001 fa11 	bl	800e2fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	691b      	ldr	r3, [r3, #16]
 800cee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cee4:	2b40      	cmp	r3, #64	; 0x40
 800cee6:	d10e      	bne.n	800cf06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cef2:	2b40      	cmp	r3, #64	; 0x40
 800cef4:	d107      	bne.n	800cf06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cefe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 fb2d 	bl	800d560 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	691b      	ldr	r3, [r3, #16]
 800cf0c:	f003 0320 	and.w	r3, r3, #32
 800cf10:	2b20      	cmp	r3, #32
 800cf12:	d10e      	bne.n	800cf32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	f003 0320 	and.w	r3, r3, #32
 800cf1e:	2b20      	cmp	r3, #32
 800cf20:	d107      	bne.n	800cf32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	f06f 0220 	mvn.w	r2, #32
 800cf2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f001 f9d1 	bl	800e2d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cf32:	bf00      	nop
 800cf34:	3708      	adds	r7, #8
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b086      	sub	sp, #24
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	60f8      	str	r0, [r7, #12]
 800cf42:	60b9      	str	r1, [r7, #8]
 800cf44:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cf46:	2300      	movs	r3, #0
 800cf48:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d101      	bne.n	800cf58 <HAL_TIM_IC_ConfigChannel+0x1e>
 800cf54:	2302      	movs	r3, #2
 800cf56:	e088      	b.n	800d06a <HAL_TIM_IC_ConfigChannel+0x130>
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d11b      	bne.n	800cf9e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800cf76:	f000 ff57 	bl	800de28 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	699a      	ldr	r2, [r3, #24]
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f022 020c 	bic.w	r2, r2, #12
 800cf88:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	6999      	ldr	r1, [r3, #24]
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	689a      	ldr	r2, [r3, #8]
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	430a      	orrs	r2, r1
 800cf9a:	619a      	str	r2, [r3, #24]
 800cf9c:	e060      	b.n	800d060 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2b04      	cmp	r3, #4
 800cfa2:	d11c      	bne.n	800cfde <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800cfb4:	f000 ffdb 	bl	800df6e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	699a      	ldr	r2, [r3, #24]
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800cfc6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	6999      	ldr	r1, [r3, #24]
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	689b      	ldr	r3, [r3, #8]
 800cfd2:	021a      	lsls	r2, r3, #8
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	430a      	orrs	r2, r1
 800cfda:	619a      	str	r2, [r3, #24]
 800cfdc:	e040      	b.n	800d060 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2b08      	cmp	r3, #8
 800cfe2:	d11b      	bne.n	800d01c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800cff4:	f001 f828 	bl	800e048 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	69da      	ldr	r2, [r3, #28]
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f022 020c 	bic.w	r2, r2, #12
 800d006:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	69d9      	ldr	r1, [r3, #28]
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	689a      	ldr	r2, [r3, #8]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	430a      	orrs	r2, r1
 800d018:	61da      	str	r2, [r3, #28]
 800d01a:	e021      	b.n	800d060 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2b0c      	cmp	r3, #12
 800d020:	d11c      	bne.n	800d05c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800d032:	f001 f845 	bl	800e0c0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	69da      	ldr	r2, [r3, #28]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d044:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	69d9      	ldr	r1, [r3, #28]
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	021a      	lsls	r2, r3, #8
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	430a      	orrs	r2, r1
 800d058:	61da      	str	r2, [r3, #28]
 800d05a:	e001      	b.n	800d060 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800d05c:	2301      	movs	r3, #1
 800d05e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2200      	movs	r2, #0
 800d064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d068:	7dfb      	ldrb	r3, [r7, #23]
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3718      	adds	r7, #24
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
	...

0800d074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b086      	sub	sp, #24
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d080:	2300      	movs	r3, #0
 800d082:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d101      	bne.n	800d092 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d08e:	2302      	movs	r3, #2
 800d090:	e0ff      	b.n	800d292 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2201      	movs	r2, #1
 800d096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2b14      	cmp	r3, #20
 800d09e:	f200 80f0 	bhi.w	800d282 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d0a2:	a201      	add	r2, pc, #4	; (adr r2, 800d0a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0a8:	0800d0fd 	.word	0x0800d0fd
 800d0ac:	0800d283 	.word	0x0800d283
 800d0b0:	0800d283 	.word	0x0800d283
 800d0b4:	0800d283 	.word	0x0800d283
 800d0b8:	0800d13d 	.word	0x0800d13d
 800d0bc:	0800d283 	.word	0x0800d283
 800d0c0:	0800d283 	.word	0x0800d283
 800d0c4:	0800d283 	.word	0x0800d283
 800d0c8:	0800d17f 	.word	0x0800d17f
 800d0cc:	0800d283 	.word	0x0800d283
 800d0d0:	0800d283 	.word	0x0800d283
 800d0d4:	0800d283 	.word	0x0800d283
 800d0d8:	0800d1bf 	.word	0x0800d1bf
 800d0dc:	0800d283 	.word	0x0800d283
 800d0e0:	0800d283 	.word	0x0800d283
 800d0e4:	0800d283 	.word	0x0800d283
 800d0e8:	0800d201 	.word	0x0800d201
 800d0ec:	0800d283 	.word	0x0800d283
 800d0f0:	0800d283 	.word	0x0800d283
 800d0f4:	0800d283 	.word	0x0800d283
 800d0f8:	0800d241 	.word	0x0800d241
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	68b9      	ldr	r1, [r7, #8]
 800d102:	4618      	mov	r0, r3
 800d104:	f000 fad0 	bl	800d6a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	699a      	ldr	r2, [r3, #24]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f042 0208 	orr.w	r2, r2, #8
 800d116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	699a      	ldr	r2, [r3, #24]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f022 0204 	bic.w	r2, r2, #4
 800d126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	6999      	ldr	r1, [r3, #24]
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	691a      	ldr	r2, [r3, #16]
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	430a      	orrs	r2, r1
 800d138:	619a      	str	r2, [r3, #24]
      break;
 800d13a:	e0a5      	b.n	800d288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	68b9      	ldr	r1, [r7, #8]
 800d142:	4618      	mov	r0, r3
 800d144:	f000 fb40 	bl	800d7c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	699a      	ldr	r2, [r3, #24]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	699a      	ldr	r2, [r3, #24]
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	6999      	ldr	r1, [r3, #24]
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	021a      	lsls	r2, r3, #8
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	430a      	orrs	r2, r1
 800d17a:	619a      	str	r2, [r3, #24]
      break;
 800d17c:	e084      	b.n	800d288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	68b9      	ldr	r1, [r7, #8]
 800d184:	4618      	mov	r0, r3
 800d186:	f000 fba9 	bl	800d8dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	69da      	ldr	r2, [r3, #28]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f042 0208 	orr.w	r2, r2, #8
 800d198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	69da      	ldr	r2, [r3, #28]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f022 0204 	bic.w	r2, r2, #4
 800d1a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	69d9      	ldr	r1, [r3, #28]
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	691a      	ldr	r2, [r3, #16]
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	430a      	orrs	r2, r1
 800d1ba:	61da      	str	r2, [r3, #28]
      break;
 800d1bc:	e064      	b.n	800d288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	68b9      	ldr	r1, [r7, #8]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f000 fc11 	bl	800d9ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	69da      	ldr	r2, [r3, #28]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	69da      	ldr	r2, [r3, #28]
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	69d9      	ldr	r1, [r3, #28]
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	691b      	ldr	r3, [r3, #16]
 800d1f4:	021a      	lsls	r2, r3, #8
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	430a      	orrs	r2, r1
 800d1fc:	61da      	str	r2, [r3, #28]
      break;
 800d1fe:	e043      	b.n	800d288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	68b9      	ldr	r1, [r7, #8]
 800d206:	4618      	mov	r0, r3
 800d208:	f000 fc5a 	bl	800dac0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f042 0208 	orr.w	r2, r2, #8
 800d21a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f022 0204 	bic.w	r2, r2, #4
 800d22a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	691a      	ldr	r2, [r3, #16]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	430a      	orrs	r2, r1
 800d23c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d23e:	e023      	b.n	800d288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	68b9      	ldr	r1, [r7, #8]
 800d246:	4618      	mov	r0, r3
 800d248:	f000 fc9e 	bl	800db88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d25a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d26a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	021a      	lsls	r2, r3, #8
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	430a      	orrs	r2, r1
 800d27e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d280:	e002      	b.n	800d288 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d282:	2301      	movs	r3, #1
 800d284:	75fb      	strb	r3, [r7, #23]
      break;
 800d286:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2200      	movs	r2, #0
 800d28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d290:	7dfb      	ldrb	r3, [r7, #23]
}
 800d292:	4618      	mov	r0, r3
 800d294:	3718      	adds	r7, #24
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop

0800d29c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d101      	bne.n	800d2b8 <HAL_TIM_ConfigClockSource+0x1c>
 800d2b4:	2302      	movs	r3, #2
 800d2b6:	e0dc      	b.n	800d472 <HAL_TIM_ConfigClockSource+0x1d6>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2202      	movs	r2, #2
 800d2c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d2d0:	68ba      	ldr	r2, [r7, #8]
 800d2d2:	4b6a      	ldr	r3, [pc, #424]	; (800d47c <HAL_TIM_ConfigClockSource+0x1e0>)
 800d2d4:	4013      	ands	r3, r2
 800d2d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d2de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	68ba      	ldr	r2, [r7, #8]
 800d2e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a64      	ldr	r2, [pc, #400]	; (800d480 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	f000 80a9 	beq.w	800d446 <HAL_TIM_ConfigClockSource+0x1aa>
 800d2f4:	4a62      	ldr	r2, [pc, #392]	; (800d480 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	f200 80ae 	bhi.w	800d458 <HAL_TIM_ConfigClockSource+0x1bc>
 800d2fc:	4a61      	ldr	r2, [pc, #388]	; (800d484 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	f000 80a1 	beq.w	800d446 <HAL_TIM_ConfigClockSource+0x1aa>
 800d304:	4a5f      	ldr	r2, [pc, #380]	; (800d484 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d306:	4293      	cmp	r3, r2
 800d308:	f200 80a6 	bhi.w	800d458 <HAL_TIM_ConfigClockSource+0x1bc>
 800d30c:	4a5e      	ldr	r2, [pc, #376]	; (800d488 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	f000 8099 	beq.w	800d446 <HAL_TIM_ConfigClockSource+0x1aa>
 800d314:	4a5c      	ldr	r2, [pc, #368]	; (800d488 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d316:	4293      	cmp	r3, r2
 800d318:	f200 809e 	bhi.w	800d458 <HAL_TIM_ConfigClockSource+0x1bc>
 800d31c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d320:	f000 8091 	beq.w	800d446 <HAL_TIM_ConfigClockSource+0x1aa>
 800d324:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d328:	f200 8096 	bhi.w	800d458 <HAL_TIM_ConfigClockSource+0x1bc>
 800d32c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d330:	f000 8089 	beq.w	800d446 <HAL_TIM_ConfigClockSource+0x1aa>
 800d334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d338:	f200 808e 	bhi.w	800d458 <HAL_TIM_ConfigClockSource+0x1bc>
 800d33c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d340:	d03e      	beq.n	800d3c0 <HAL_TIM_ConfigClockSource+0x124>
 800d342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d346:	f200 8087 	bhi.w	800d458 <HAL_TIM_ConfigClockSource+0x1bc>
 800d34a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d34e:	f000 8086 	beq.w	800d45e <HAL_TIM_ConfigClockSource+0x1c2>
 800d352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d356:	d87f      	bhi.n	800d458 <HAL_TIM_ConfigClockSource+0x1bc>
 800d358:	2b70      	cmp	r3, #112	; 0x70
 800d35a:	d01a      	beq.n	800d392 <HAL_TIM_ConfigClockSource+0xf6>
 800d35c:	2b70      	cmp	r3, #112	; 0x70
 800d35e:	d87b      	bhi.n	800d458 <HAL_TIM_ConfigClockSource+0x1bc>
 800d360:	2b60      	cmp	r3, #96	; 0x60
 800d362:	d050      	beq.n	800d406 <HAL_TIM_ConfigClockSource+0x16a>
 800d364:	2b60      	cmp	r3, #96	; 0x60
 800d366:	d877      	bhi.n	800d458 <HAL_TIM_ConfigClockSource+0x1bc>
 800d368:	2b50      	cmp	r3, #80	; 0x50
 800d36a:	d03c      	beq.n	800d3e6 <HAL_TIM_ConfigClockSource+0x14a>
 800d36c:	2b50      	cmp	r3, #80	; 0x50
 800d36e:	d873      	bhi.n	800d458 <HAL_TIM_ConfigClockSource+0x1bc>
 800d370:	2b40      	cmp	r3, #64	; 0x40
 800d372:	d058      	beq.n	800d426 <HAL_TIM_ConfigClockSource+0x18a>
 800d374:	2b40      	cmp	r3, #64	; 0x40
 800d376:	d86f      	bhi.n	800d458 <HAL_TIM_ConfigClockSource+0x1bc>
 800d378:	2b30      	cmp	r3, #48	; 0x30
 800d37a:	d064      	beq.n	800d446 <HAL_TIM_ConfigClockSource+0x1aa>
 800d37c:	2b30      	cmp	r3, #48	; 0x30
 800d37e:	d86b      	bhi.n	800d458 <HAL_TIM_ConfigClockSource+0x1bc>
 800d380:	2b20      	cmp	r3, #32
 800d382:	d060      	beq.n	800d446 <HAL_TIM_ConfigClockSource+0x1aa>
 800d384:	2b20      	cmp	r3, #32
 800d386:	d867      	bhi.n	800d458 <HAL_TIM_ConfigClockSource+0x1bc>
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d05c      	beq.n	800d446 <HAL_TIM_ConfigClockSource+0x1aa>
 800d38c:	2b10      	cmp	r3, #16
 800d38e:	d05a      	beq.n	800d446 <HAL_TIM_ConfigClockSource+0x1aa>
 800d390:	e062      	b.n	800d458 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d3a2:	f000 fee9 	bl	800e178 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	689b      	ldr	r3, [r3, #8]
 800d3ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d3b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	68ba      	ldr	r2, [r7, #8]
 800d3bc:	609a      	str	r2, [r3, #8]
      break;
 800d3be:	e04f      	b.n	800d460 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d3d0:	f000 fed2 	bl	800e178 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	689a      	ldr	r2, [r3, #8]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d3e2:	609a      	str	r2, [r3, #8]
      break;
 800d3e4:	e03c      	b.n	800d460 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	f000 fd8c 	bl	800df10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2150      	movs	r1, #80	; 0x50
 800d3fe:	4618      	mov	r0, r3
 800d400:	f000 fe9c 	bl	800e13c <TIM_ITRx_SetConfig>
      break;
 800d404:	e02c      	b.n	800d460 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d412:	461a      	mov	r2, r3
 800d414:	f000 fde8 	bl	800dfe8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2160      	movs	r1, #96	; 0x60
 800d41e:	4618      	mov	r0, r3
 800d420:	f000 fe8c 	bl	800e13c <TIM_ITRx_SetConfig>
      break;
 800d424:	e01c      	b.n	800d460 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d432:	461a      	mov	r2, r3
 800d434:	f000 fd6c 	bl	800df10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	2140      	movs	r1, #64	; 0x40
 800d43e:	4618      	mov	r0, r3
 800d440:	f000 fe7c 	bl	800e13c <TIM_ITRx_SetConfig>
      break;
 800d444:	e00c      	b.n	800d460 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4619      	mov	r1, r3
 800d450:	4610      	mov	r0, r2
 800d452:	f000 fe73 	bl	800e13c <TIM_ITRx_SetConfig>
      break;
 800d456:	e003      	b.n	800d460 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d458:	2301      	movs	r3, #1
 800d45a:	73fb      	strb	r3, [r7, #15]
      break;
 800d45c:	e000      	b.n	800d460 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d45e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2201      	movs	r2, #1
 800d464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d470:	7bfb      	ldrb	r3, [r7, #15]
}
 800d472:	4618      	mov	r0, r3
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	ffceff88 	.word	0xffceff88
 800d480:	00100040 	.word	0x00100040
 800d484:	00100030 	.word	0x00100030
 800d488:	00100020 	.word	0x00100020

0800d48c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d101      	bne.n	800d4a4 <HAL_TIM_SlaveConfigSynchro+0x18>
 800d4a0:	2302      	movs	r3, #2
 800d4a2:	e031      	b.n	800d508 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2202      	movs	r2, #2
 800d4b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800d4b4:	6839      	ldr	r1, [r7, #0]
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 fbcc 	bl	800dc54 <TIM_SlaveTimer_SetConfig>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d009      	beq.n	800d4d6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	e018      	b.n	800d508 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	68da      	ldr	r2, [r3, #12]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4e4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	68da      	ldr	r2, [r3, #12]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d4f4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2200      	movs	r2, #0
 800d502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d506:	2300      	movs	r3, #0
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3708      	adds	r7, #8
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d518:	bf00      	nop
 800d51a:	370c      	adds	r7, #12
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr

0800d524 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d52c:	bf00      	nop
 800d52e:	370c      	adds	r7, #12
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr

0800d538 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d538:	b480      	push	{r7}
 800d53a:	b083      	sub	sp, #12
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d540:	bf00      	nop
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54a:	4770      	bx	lr

0800d54c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d54c:	b480      	push	{r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d554:	bf00      	nop
 800d556:	370c      	adds	r7, #12
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr

0800d560 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d560:	b480      	push	{r7}
 800d562:	b083      	sub	sp, #12
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d568:	bf00      	nop
 800d56a:	370c      	adds	r7, #12
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr

0800d574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d574:	b480      	push	{r7}
 800d576:	b085      	sub	sp, #20
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	4a40      	ldr	r2, [pc, #256]	; (800d688 <TIM_Base_SetConfig+0x114>)
 800d588:	4293      	cmp	r3, r2
 800d58a:	d013      	beq.n	800d5b4 <TIM_Base_SetConfig+0x40>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d592:	d00f      	beq.n	800d5b4 <TIM_Base_SetConfig+0x40>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	4a3d      	ldr	r2, [pc, #244]	; (800d68c <TIM_Base_SetConfig+0x118>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d00b      	beq.n	800d5b4 <TIM_Base_SetConfig+0x40>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4a3c      	ldr	r2, [pc, #240]	; (800d690 <TIM_Base_SetConfig+0x11c>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d007      	beq.n	800d5b4 <TIM_Base_SetConfig+0x40>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	4a3b      	ldr	r2, [pc, #236]	; (800d694 <TIM_Base_SetConfig+0x120>)
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	d003      	beq.n	800d5b4 <TIM_Base_SetConfig+0x40>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	4a3a      	ldr	r2, [pc, #232]	; (800d698 <TIM_Base_SetConfig+0x124>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d108      	bne.n	800d5c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	68fa      	ldr	r2, [r7, #12]
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	4a2f      	ldr	r2, [pc, #188]	; (800d688 <TIM_Base_SetConfig+0x114>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d01f      	beq.n	800d60e <TIM_Base_SetConfig+0x9a>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5d4:	d01b      	beq.n	800d60e <TIM_Base_SetConfig+0x9a>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	4a2c      	ldr	r2, [pc, #176]	; (800d68c <TIM_Base_SetConfig+0x118>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d017      	beq.n	800d60e <TIM_Base_SetConfig+0x9a>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	4a2b      	ldr	r2, [pc, #172]	; (800d690 <TIM_Base_SetConfig+0x11c>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d013      	beq.n	800d60e <TIM_Base_SetConfig+0x9a>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	4a2a      	ldr	r2, [pc, #168]	; (800d694 <TIM_Base_SetConfig+0x120>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d00f      	beq.n	800d60e <TIM_Base_SetConfig+0x9a>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4a29      	ldr	r2, [pc, #164]	; (800d698 <TIM_Base_SetConfig+0x124>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d00b      	beq.n	800d60e <TIM_Base_SetConfig+0x9a>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	4a28      	ldr	r2, [pc, #160]	; (800d69c <TIM_Base_SetConfig+0x128>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d007      	beq.n	800d60e <TIM_Base_SetConfig+0x9a>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	4a27      	ldr	r2, [pc, #156]	; (800d6a0 <TIM_Base_SetConfig+0x12c>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d003      	beq.n	800d60e <TIM_Base_SetConfig+0x9a>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	4a26      	ldr	r2, [pc, #152]	; (800d6a4 <TIM_Base_SetConfig+0x130>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d108      	bne.n	800d620 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	68fa      	ldr	r2, [r7, #12]
 800d61c:	4313      	orrs	r3, r2
 800d61e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	695b      	ldr	r3, [r3, #20]
 800d62a:	4313      	orrs	r3, r2
 800d62c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	68fa      	ldr	r2, [r7, #12]
 800d632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	689a      	ldr	r2, [r3, #8]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	4a10      	ldr	r2, [pc, #64]	; (800d688 <TIM_Base_SetConfig+0x114>)
 800d648:	4293      	cmp	r3, r2
 800d64a:	d00f      	beq.n	800d66c <TIM_Base_SetConfig+0xf8>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	4a12      	ldr	r2, [pc, #72]	; (800d698 <TIM_Base_SetConfig+0x124>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d00b      	beq.n	800d66c <TIM_Base_SetConfig+0xf8>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	4a11      	ldr	r2, [pc, #68]	; (800d69c <TIM_Base_SetConfig+0x128>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d007      	beq.n	800d66c <TIM_Base_SetConfig+0xf8>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	4a10      	ldr	r2, [pc, #64]	; (800d6a0 <TIM_Base_SetConfig+0x12c>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d003      	beq.n	800d66c <TIM_Base_SetConfig+0xf8>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	4a0f      	ldr	r2, [pc, #60]	; (800d6a4 <TIM_Base_SetConfig+0x130>)
 800d668:	4293      	cmp	r3, r2
 800d66a:	d103      	bne.n	800d674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	691a      	ldr	r2, [r3, #16]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2201      	movs	r2, #1
 800d678:	615a      	str	r2, [r3, #20]
}
 800d67a:	bf00      	nop
 800d67c:	3714      	adds	r7, #20
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr
 800d686:	bf00      	nop
 800d688:	40010000 	.word	0x40010000
 800d68c:	40000400 	.word	0x40000400
 800d690:	40000800 	.word	0x40000800
 800d694:	40000c00 	.word	0x40000c00
 800d698:	40010400 	.word	0x40010400
 800d69c:	40014000 	.word	0x40014000
 800d6a0:	40014400 	.word	0x40014400
 800d6a4:	40014800 	.word	0x40014800

0800d6a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b087      	sub	sp, #28
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6a1b      	ldr	r3, [r3, #32]
 800d6b6:	f023 0201 	bic.w	r2, r3, #1
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6a1b      	ldr	r3, [r3, #32]
 800d6c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	699b      	ldr	r3, [r3, #24]
 800d6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d6d0:	68fa      	ldr	r2, [r7, #12]
 800d6d2:	4b37      	ldr	r3, [pc, #220]	; (800d7b0 <TIM_OC1_SetConfig+0x108>)
 800d6d4:	4013      	ands	r3, r2
 800d6d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f023 0303 	bic.w	r3, r3, #3
 800d6de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	68fa      	ldr	r2, [r7, #12]
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	f023 0302 	bic.w	r3, r3, #2
 800d6f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	697a      	ldr	r2, [r7, #20]
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	4a2d      	ldr	r2, [pc, #180]	; (800d7b4 <TIM_OC1_SetConfig+0x10c>)
 800d700:	4293      	cmp	r3, r2
 800d702:	d00f      	beq.n	800d724 <TIM_OC1_SetConfig+0x7c>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	4a2c      	ldr	r2, [pc, #176]	; (800d7b8 <TIM_OC1_SetConfig+0x110>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d00b      	beq.n	800d724 <TIM_OC1_SetConfig+0x7c>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	4a2b      	ldr	r2, [pc, #172]	; (800d7bc <TIM_OC1_SetConfig+0x114>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d007      	beq.n	800d724 <TIM_OC1_SetConfig+0x7c>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	4a2a      	ldr	r2, [pc, #168]	; (800d7c0 <TIM_OC1_SetConfig+0x118>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d003      	beq.n	800d724 <TIM_OC1_SetConfig+0x7c>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	4a29      	ldr	r2, [pc, #164]	; (800d7c4 <TIM_OC1_SetConfig+0x11c>)
 800d720:	4293      	cmp	r3, r2
 800d722:	d10c      	bne.n	800d73e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	f023 0308 	bic.w	r3, r3, #8
 800d72a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	68db      	ldr	r3, [r3, #12]
 800d730:	697a      	ldr	r2, [r7, #20]
 800d732:	4313      	orrs	r3, r2
 800d734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	f023 0304 	bic.w	r3, r3, #4
 800d73c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	4a1c      	ldr	r2, [pc, #112]	; (800d7b4 <TIM_OC1_SetConfig+0x10c>)
 800d742:	4293      	cmp	r3, r2
 800d744:	d00f      	beq.n	800d766 <TIM_OC1_SetConfig+0xbe>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	4a1b      	ldr	r2, [pc, #108]	; (800d7b8 <TIM_OC1_SetConfig+0x110>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d00b      	beq.n	800d766 <TIM_OC1_SetConfig+0xbe>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	4a1a      	ldr	r2, [pc, #104]	; (800d7bc <TIM_OC1_SetConfig+0x114>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d007      	beq.n	800d766 <TIM_OC1_SetConfig+0xbe>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	4a19      	ldr	r2, [pc, #100]	; (800d7c0 <TIM_OC1_SetConfig+0x118>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d003      	beq.n	800d766 <TIM_OC1_SetConfig+0xbe>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	4a18      	ldr	r2, [pc, #96]	; (800d7c4 <TIM_OC1_SetConfig+0x11c>)
 800d762:	4293      	cmp	r3, r2
 800d764:	d111      	bne.n	800d78a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d76c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	695b      	ldr	r3, [r3, #20]
 800d77a:	693a      	ldr	r2, [r7, #16]
 800d77c:	4313      	orrs	r3, r2
 800d77e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	699b      	ldr	r3, [r3, #24]
 800d784:	693a      	ldr	r2, [r7, #16]
 800d786:	4313      	orrs	r3, r2
 800d788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	693a      	ldr	r2, [r7, #16]
 800d78e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	68fa      	ldr	r2, [r7, #12]
 800d794:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	685a      	ldr	r2, [r3, #4]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	697a      	ldr	r2, [r7, #20]
 800d7a2:	621a      	str	r2, [r3, #32]
}
 800d7a4:	bf00      	nop
 800d7a6:	371c      	adds	r7, #28
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr
 800d7b0:	fffeff8f 	.word	0xfffeff8f
 800d7b4:	40010000 	.word	0x40010000
 800d7b8:	40010400 	.word	0x40010400
 800d7bc:	40014000 	.word	0x40014000
 800d7c0:	40014400 	.word	0x40014400
 800d7c4:	40014800 	.word	0x40014800

0800d7c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b087      	sub	sp, #28
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6a1b      	ldr	r3, [r3, #32]
 800d7d6:	f023 0210 	bic.w	r2, r3, #16
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6a1b      	ldr	r3, [r3, #32]
 800d7e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	699b      	ldr	r3, [r3, #24]
 800d7ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d7f0:	68fa      	ldr	r2, [r7, #12]
 800d7f2:	4b34      	ldr	r3, [pc, #208]	; (800d8c4 <TIM_OC2_SetConfig+0xfc>)
 800d7f4:	4013      	ands	r3, r2
 800d7f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	021b      	lsls	r3, r3, #8
 800d806:	68fa      	ldr	r2, [r7, #12]
 800d808:	4313      	orrs	r3, r2
 800d80a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	f023 0320 	bic.w	r3, r3, #32
 800d812:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	689b      	ldr	r3, [r3, #8]
 800d818:	011b      	lsls	r3, r3, #4
 800d81a:	697a      	ldr	r2, [r7, #20]
 800d81c:	4313      	orrs	r3, r2
 800d81e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	4a29      	ldr	r2, [pc, #164]	; (800d8c8 <TIM_OC2_SetConfig+0x100>)
 800d824:	4293      	cmp	r3, r2
 800d826:	d003      	beq.n	800d830 <TIM_OC2_SetConfig+0x68>
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	4a28      	ldr	r2, [pc, #160]	; (800d8cc <TIM_OC2_SetConfig+0x104>)
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d10d      	bne.n	800d84c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	011b      	lsls	r3, r3, #4
 800d83e:	697a      	ldr	r2, [r7, #20]
 800d840:	4313      	orrs	r3, r2
 800d842:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d84a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	4a1e      	ldr	r2, [pc, #120]	; (800d8c8 <TIM_OC2_SetConfig+0x100>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d00f      	beq.n	800d874 <TIM_OC2_SetConfig+0xac>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	4a1d      	ldr	r2, [pc, #116]	; (800d8cc <TIM_OC2_SetConfig+0x104>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d00b      	beq.n	800d874 <TIM_OC2_SetConfig+0xac>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	4a1c      	ldr	r2, [pc, #112]	; (800d8d0 <TIM_OC2_SetConfig+0x108>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d007      	beq.n	800d874 <TIM_OC2_SetConfig+0xac>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	4a1b      	ldr	r2, [pc, #108]	; (800d8d4 <TIM_OC2_SetConfig+0x10c>)
 800d868:	4293      	cmp	r3, r2
 800d86a:	d003      	beq.n	800d874 <TIM_OC2_SetConfig+0xac>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	4a1a      	ldr	r2, [pc, #104]	; (800d8d8 <TIM_OC2_SetConfig+0x110>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d113      	bne.n	800d89c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d87a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d882:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	695b      	ldr	r3, [r3, #20]
 800d888:	009b      	lsls	r3, r3, #2
 800d88a:	693a      	ldr	r2, [r7, #16]
 800d88c:	4313      	orrs	r3, r2
 800d88e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	699b      	ldr	r3, [r3, #24]
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	693a      	ldr	r2, [r7, #16]
 800d898:	4313      	orrs	r3, r2
 800d89a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	693a      	ldr	r2, [r7, #16]
 800d8a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	68fa      	ldr	r2, [r7, #12]
 800d8a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	685a      	ldr	r2, [r3, #4]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	697a      	ldr	r2, [r7, #20]
 800d8b4:	621a      	str	r2, [r3, #32]
}
 800d8b6:	bf00      	nop
 800d8b8:	371c      	adds	r7, #28
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr
 800d8c2:	bf00      	nop
 800d8c4:	feff8fff 	.word	0xfeff8fff
 800d8c8:	40010000 	.word	0x40010000
 800d8cc:	40010400 	.word	0x40010400
 800d8d0:	40014000 	.word	0x40014000
 800d8d4:	40014400 	.word	0x40014400
 800d8d8:	40014800 	.word	0x40014800

0800d8dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b087      	sub	sp, #28
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6a1b      	ldr	r3, [r3, #32]
 800d8ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6a1b      	ldr	r3, [r3, #32]
 800d8f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	69db      	ldr	r3, [r3, #28]
 800d902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d904:	68fa      	ldr	r2, [r7, #12]
 800d906:	4b33      	ldr	r3, [pc, #204]	; (800d9d4 <TIM_OC3_SetConfig+0xf8>)
 800d908:	4013      	ands	r3, r2
 800d90a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f023 0303 	bic.w	r3, r3, #3
 800d912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	4313      	orrs	r3, r2
 800d91c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	689b      	ldr	r3, [r3, #8]
 800d92a:	021b      	lsls	r3, r3, #8
 800d92c:	697a      	ldr	r2, [r7, #20]
 800d92e:	4313      	orrs	r3, r2
 800d930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	4a28      	ldr	r2, [pc, #160]	; (800d9d8 <TIM_OC3_SetConfig+0xfc>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d003      	beq.n	800d942 <TIM_OC3_SetConfig+0x66>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	4a27      	ldr	r2, [pc, #156]	; (800d9dc <TIM_OC3_SetConfig+0x100>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d10d      	bne.n	800d95e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	68db      	ldr	r3, [r3, #12]
 800d94e:	021b      	lsls	r3, r3, #8
 800d950:	697a      	ldr	r2, [r7, #20]
 800d952:	4313      	orrs	r3, r2
 800d954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d95c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	4a1d      	ldr	r2, [pc, #116]	; (800d9d8 <TIM_OC3_SetConfig+0xfc>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d00f      	beq.n	800d986 <TIM_OC3_SetConfig+0xaa>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	4a1c      	ldr	r2, [pc, #112]	; (800d9dc <TIM_OC3_SetConfig+0x100>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d00b      	beq.n	800d986 <TIM_OC3_SetConfig+0xaa>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	4a1b      	ldr	r2, [pc, #108]	; (800d9e0 <TIM_OC3_SetConfig+0x104>)
 800d972:	4293      	cmp	r3, r2
 800d974:	d007      	beq.n	800d986 <TIM_OC3_SetConfig+0xaa>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	4a1a      	ldr	r2, [pc, #104]	; (800d9e4 <TIM_OC3_SetConfig+0x108>)
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d003      	beq.n	800d986 <TIM_OC3_SetConfig+0xaa>
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	4a19      	ldr	r2, [pc, #100]	; (800d9e8 <TIM_OC3_SetConfig+0x10c>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d113      	bne.n	800d9ae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d986:	693b      	ldr	r3, [r7, #16]
 800d988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d98c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	695b      	ldr	r3, [r3, #20]
 800d99a:	011b      	lsls	r3, r3, #4
 800d99c:	693a      	ldr	r2, [r7, #16]
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	699b      	ldr	r3, [r3, #24]
 800d9a6:	011b      	lsls	r3, r3, #4
 800d9a8:	693a      	ldr	r2, [r7, #16]
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	693a      	ldr	r2, [r7, #16]
 800d9b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	68fa      	ldr	r2, [r7, #12]
 800d9b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	685a      	ldr	r2, [r3, #4]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	697a      	ldr	r2, [r7, #20]
 800d9c6:	621a      	str	r2, [r3, #32]
}
 800d9c8:	bf00      	nop
 800d9ca:	371c      	adds	r7, #28
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr
 800d9d4:	fffeff8f 	.word	0xfffeff8f
 800d9d8:	40010000 	.word	0x40010000
 800d9dc:	40010400 	.word	0x40010400
 800d9e0:	40014000 	.word	0x40014000
 800d9e4:	40014400 	.word	0x40014400
 800d9e8:	40014800 	.word	0x40014800

0800d9ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b087      	sub	sp, #28
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6a1b      	ldr	r3, [r3, #32]
 800d9fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6a1b      	ldr	r3, [r3, #32]
 800da06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	69db      	ldr	r3, [r3, #28]
 800da12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800da14:	68fa      	ldr	r2, [r7, #12]
 800da16:	4b24      	ldr	r3, [pc, #144]	; (800daa8 <TIM_OC4_SetConfig+0xbc>)
 800da18:	4013      	ands	r3, r2
 800da1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	021b      	lsls	r3, r3, #8
 800da2a:	68fa      	ldr	r2, [r7, #12]
 800da2c:	4313      	orrs	r3, r2
 800da2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800da36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	689b      	ldr	r3, [r3, #8]
 800da3c:	031b      	lsls	r3, r3, #12
 800da3e:	693a      	ldr	r2, [r7, #16]
 800da40:	4313      	orrs	r3, r2
 800da42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	4a19      	ldr	r2, [pc, #100]	; (800daac <TIM_OC4_SetConfig+0xc0>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d00f      	beq.n	800da6c <TIM_OC4_SetConfig+0x80>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	4a18      	ldr	r2, [pc, #96]	; (800dab0 <TIM_OC4_SetConfig+0xc4>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d00b      	beq.n	800da6c <TIM_OC4_SetConfig+0x80>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	4a17      	ldr	r2, [pc, #92]	; (800dab4 <TIM_OC4_SetConfig+0xc8>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d007      	beq.n	800da6c <TIM_OC4_SetConfig+0x80>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	4a16      	ldr	r2, [pc, #88]	; (800dab8 <TIM_OC4_SetConfig+0xcc>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d003      	beq.n	800da6c <TIM_OC4_SetConfig+0x80>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	4a15      	ldr	r2, [pc, #84]	; (800dabc <TIM_OC4_SetConfig+0xd0>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d109      	bne.n	800da80 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800da72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	695b      	ldr	r3, [r3, #20]
 800da78:	019b      	lsls	r3, r3, #6
 800da7a:	697a      	ldr	r2, [r7, #20]
 800da7c:	4313      	orrs	r3, r2
 800da7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	697a      	ldr	r2, [r7, #20]
 800da84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	68fa      	ldr	r2, [r7, #12]
 800da8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	685a      	ldr	r2, [r3, #4]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	693a      	ldr	r2, [r7, #16]
 800da98:	621a      	str	r2, [r3, #32]
}
 800da9a:	bf00      	nop
 800da9c:	371c      	adds	r7, #28
 800da9e:	46bd      	mov	sp, r7
 800daa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa4:	4770      	bx	lr
 800daa6:	bf00      	nop
 800daa8:	feff8fff 	.word	0xfeff8fff
 800daac:	40010000 	.word	0x40010000
 800dab0:	40010400 	.word	0x40010400
 800dab4:	40014000 	.word	0x40014000
 800dab8:	40014400 	.word	0x40014400
 800dabc:	40014800 	.word	0x40014800

0800dac0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b087      	sub	sp, #28
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6a1b      	ldr	r3, [r3, #32]
 800dace:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6a1b      	ldr	r3, [r3, #32]
 800dada:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dae8:	68fa      	ldr	r2, [r7, #12]
 800daea:	4b21      	ldr	r3, [pc, #132]	; (800db70 <TIM_OC5_SetConfig+0xb0>)
 800daec:	4013      	ands	r3, r2
 800daee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	68fa      	ldr	r2, [r7, #12]
 800daf6:	4313      	orrs	r3, r2
 800daf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800db00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	689b      	ldr	r3, [r3, #8]
 800db06:	041b      	lsls	r3, r3, #16
 800db08:	693a      	ldr	r2, [r7, #16]
 800db0a:	4313      	orrs	r3, r2
 800db0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4a18      	ldr	r2, [pc, #96]	; (800db74 <TIM_OC5_SetConfig+0xb4>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d00f      	beq.n	800db36 <TIM_OC5_SetConfig+0x76>
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	4a17      	ldr	r2, [pc, #92]	; (800db78 <TIM_OC5_SetConfig+0xb8>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d00b      	beq.n	800db36 <TIM_OC5_SetConfig+0x76>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	4a16      	ldr	r2, [pc, #88]	; (800db7c <TIM_OC5_SetConfig+0xbc>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d007      	beq.n	800db36 <TIM_OC5_SetConfig+0x76>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	4a15      	ldr	r2, [pc, #84]	; (800db80 <TIM_OC5_SetConfig+0xc0>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	d003      	beq.n	800db36 <TIM_OC5_SetConfig+0x76>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	4a14      	ldr	r2, [pc, #80]	; (800db84 <TIM_OC5_SetConfig+0xc4>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d109      	bne.n	800db4a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800db3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	695b      	ldr	r3, [r3, #20]
 800db42:	021b      	lsls	r3, r3, #8
 800db44:	697a      	ldr	r2, [r7, #20]
 800db46:	4313      	orrs	r3, r2
 800db48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	697a      	ldr	r2, [r7, #20]
 800db4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	68fa      	ldr	r2, [r7, #12]
 800db54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	685a      	ldr	r2, [r3, #4]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	693a      	ldr	r2, [r7, #16]
 800db62:	621a      	str	r2, [r3, #32]
}
 800db64:	bf00      	nop
 800db66:	371c      	adds	r7, #28
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr
 800db70:	fffeff8f 	.word	0xfffeff8f
 800db74:	40010000 	.word	0x40010000
 800db78:	40010400 	.word	0x40010400
 800db7c:	40014000 	.word	0x40014000
 800db80:	40014400 	.word	0x40014400
 800db84:	40014800 	.word	0x40014800

0800db88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800db88:	b480      	push	{r7}
 800db8a:	b087      	sub	sp, #28
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6a1b      	ldr	r3, [r3, #32]
 800db96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6a1b      	ldr	r3, [r3, #32]
 800dba2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dbb0:	68fa      	ldr	r2, [r7, #12]
 800dbb2:	4b22      	ldr	r3, [pc, #136]	; (800dc3c <TIM_OC6_SetConfig+0xb4>)
 800dbb4:	4013      	ands	r3, r2
 800dbb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	021b      	lsls	r3, r3, #8
 800dbbe:	68fa      	ldr	r2, [r7, #12]
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dbca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	689b      	ldr	r3, [r3, #8]
 800dbd0:	051b      	lsls	r3, r3, #20
 800dbd2:	693a      	ldr	r2, [r7, #16]
 800dbd4:	4313      	orrs	r3, r2
 800dbd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	4a19      	ldr	r2, [pc, #100]	; (800dc40 <TIM_OC6_SetConfig+0xb8>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d00f      	beq.n	800dc00 <TIM_OC6_SetConfig+0x78>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	4a18      	ldr	r2, [pc, #96]	; (800dc44 <TIM_OC6_SetConfig+0xbc>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	d00b      	beq.n	800dc00 <TIM_OC6_SetConfig+0x78>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	4a17      	ldr	r2, [pc, #92]	; (800dc48 <TIM_OC6_SetConfig+0xc0>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d007      	beq.n	800dc00 <TIM_OC6_SetConfig+0x78>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	4a16      	ldr	r2, [pc, #88]	; (800dc4c <TIM_OC6_SetConfig+0xc4>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d003      	beq.n	800dc00 <TIM_OC6_SetConfig+0x78>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	4a15      	ldr	r2, [pc, #84]	; (800dc50 <TIM_OC6_SetConfig+0xc8>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d109      	bne.n	800dc14 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dc06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	695b      	ldr	r3, [r3, #20]
 800dc0c:	029b      	lsls	r3, r3, #10
 800dc0e:	697a      	ldr	r2, [r7, #20]
 800dc10:	4313      	orrs	r3, r2
 800dc12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	697a      	ldr	r2, [r7, #20]
 800dc18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	68fa      	ldr	r2, [r7, #12]
 800dc1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	685a      	ldr	r2, [r3, #4]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	693a      	ldr	r2, [r7, #16]
 800dc2c:	621a      	str	r2, [r3, #32]
}
 800dc2e:	bf00      	nop
 800dc30:	371c      	adds	r7, #28
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr
 800dc3a:	bf00      	nop
 800dc3c:	feff8fff 	.word	0xfeff8fff
 800dc40:	40010000 	.word	0x40010000
 800dc44:	40010400 	.word	0x40010400
 800dc48:	40014000 	.word	0x40014000
 800dc4c:	40014400 	.word	0x40014400
 800dc50:	40014800 	.word	0x40014800

0800dc54 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b086      	sub	sp, #24
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	689b      	ldr	r3, [r3, #8]
 800dc68:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dc6a:	693a      	ldr	r2, [r7, #16]
 800dc6c:	4b65      	ldr	r3, [pc, #404]	; (800de04 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800dc6e:	4013      	ands	r3, r2
 800dc70:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	693a      	ldr	r2, [r7, #16]
 800dc78:	4313      	orrs	r3, r2
 800dc7a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800dc7c:	693a      	ldr	r2, [r7, #16]
 800dc7e:	4b62      	ldr	r3, [pc, #392]	; (800de08 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800dc80:	4013      	ands	r3, r2
 800dc82:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	693a      	ldr	r2, [r7, #16]
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	693a      	ldr	r2, [r7, #16]
 800dc94:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	4a5c      	ldr	r2, [pc, #368]	; (800de0c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	f000 80ab 	beq.w	800ddf8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dca2:	4a5a      	ldr	r2, [pc, #360]	; (800de0c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800dca4:	4293      	cmp	r3, r2
 800dca6:	f200 80a4 	bhi.w	800ddf2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dcaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dcae:	f000 80a3 	beq.w	800ddf8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dcb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dcb6:	f200 809c 	bhi.w	800ddf2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dcba:	4a55      	ldr	r2, [pc, #340]	; (800de10 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	f000 809b 	beq.w	800ddf8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dcc2:	4a53      	ldr	r2, [pc, #332]	; (800de10 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	f200 8094 	bhi.w	800ddf2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dcca:	4a52      	ldr	r2, [pc, #328]	; (800de14 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	f000 8093 	beq.w	800ddf8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dcd2:	4a50      	ldr	r2, [pc, #320]	; (800de14 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	f200 808c 	bhi.w	800ddf2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dcda:	4a4f      	ldr	r2, [pc, #316]	; (800de18 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	f000 808b 	beq.w	800ddf8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dce2:	4a4d      	ldr	r2, [pc, #308]	; (800de18 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	f200 8084 	bhi.w	800ddf2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dcea:	4a4c      	ldr	r2, [pc, #304]	; (800de1c <TIM_SlaveTimer_SetConfig+0x1c8>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	f000 8083 	beq.w	800ddf8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dcf2:	4a4a      	ldr	r2, [pc, #296]	; (800de1c <TIM_SlaveTimer_SetConfig+0x1c8>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d87c      	bhi.n	800ddf2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dcf8:	4a49      	ldr	r2, [pc, #292]	; (800de20 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d07c      	beq.n	800ddf8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dcfe:	4a48      	ldr	r2, [pc, #288]	; (800de20 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d876      	bhi.n	800ddf2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dd04:	4a47      	ldr	r2, [pc, #284]	; (800de24 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d076      	beq.n	800ddf8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dd0a:	4a46      	ldr	r2, [pc, #280]	; (800de24 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d870      	bhi.n	800ddf2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dd10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dd14:	d070      	beq.n	800ddf8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dd16:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dd1a:	d86a      	bhi.n	800ddf2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dd1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd20:	d06a      	beq.n	800ddf8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dd22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd26:	d864      	bhi.n	800ddf2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dd28:	2b70      	cmp	r3, #112	; 0x70
 800dd2a:	d01a      	beq.n	800dd62 <TIM_SlaveTimer_SetConfig+0x10e>
 800dd2c:	2b70      	cmp	r3, #112	; 0x70
 800dd2e:	d860      	bhi.n	800ddf2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dd30:	2b60      	cmp	r3, #96	; 0x60
 800dd32:	d054      	beq.n	800ddde <TIM_SlaveTimer_SetConfig+0x18a>
 800dd34:	2b60      	cmp	r3, #96	; 0x60
 800dd36:	d85c      	bhi.n	800ddf2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dd38:	2b50      	cmp	r3, #80	; 0x50
 800dd3a:	d046      	beq.n	800ddca <TIM_SlaveTimer_SetConfig+0x176>
 800dd3c:	2b50      	cmp	r3, #80	; 0x50
 800dd3e:	d858      	bhi.n	800ddf2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dd40:	2b40      	cmp	r3, #64	; 0x40
 800dd42:	d019      	beq.n	800dd78 <TIM_SlaveTimer_SetConfig+0x124>
 800dd44:	2b40      	cmp	r3, #64	; 0x40
 800dd46:	d854      	bhi.n	800ddf2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dd48:	2b30      	cmp	r3, #48	; 0x30
 800dd4a:	d055      	beq.n	800ddf8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dd4c:	2b30      	cmp	r3, #48	; 0x30
 800dd4e:	d850      	bhi.n	800ddf2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dd50:	2b20      	cmp	r3, #32
 800dd52:	d051      	beq.n	800ddf8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dd54:	2b20      	cmp	r3, #32
 800dd56:	d84c      	bhi.n	800ddf2 <TIM_SlaveTimer_SetConfig+0x19e>
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d04d      	beq.n	800ddf8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dd5c:	2b10      	cmp	r3, #16
 800dd5e:	d04b      	beq.n	800ddf8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800dd60:	e047      	b.n	800ddf2 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800dd72:	f000 fa01 	bl	800e178 <TIM_ETR_SetConfig>
      break;
 800dd76:	e040      	b.n	800ddfa <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2b05      	cmp	r3, #5
 800dd7e:	d101      	bne.n	800dd84 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800dd80:	2301      	movs	r3, #1
 800dd82:	e03b      	b.n	800ddfc <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	6a1b      	ldr	r3, [r3, #32]
 800dd8a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	6a1a      	ldr	r2, [r3, #32]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f022 0201 	bic.w	r2, r2, #1
 800dd9a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	699b      	ldr	r3, [r3, #24]
 800dda2:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ddaa:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	691b      	ldr	r3, [r3, #16]
 800ddb0:	011b      	lsls	r3, r3, #4
 800ddb2:	68ba      	ldr	r2, [r7, #8]
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	68ba      	ldr	r2, [r7, #8]
 800ddbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	68fa      	ldr	r2, [r7, #12]
 800ddc6:	621a      	str	r2, [r3, #32]
      break;
 800ddc8:	e017      	b.n	800ddfa <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	f000 f89a 	bl	800df10 <TIM_TI1_ConfigInputStage>
      break;
 800dddc:	e00d      	b.n	800ddfa <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ddea:	461a      	mov	r2, r3
 800ddec:	f000 f8fc 	bl	800dfe8 <TIM_TI2_ConfigInputStage>
      break;
 800ddf0:	e003      	b.n	800ddfa <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	75fb      	strb	r3, [r7, #23]
      break;
 800ddf6:	e000      	b.n	800ddfa <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800ddf8:	bf00      	nop
  }

  return status;
 800ddfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3718      	adds	r7, #24
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}
 800de04:	ffcfff8f 	.word	0xffcfff8f
 800de08:	fffefff8 	.word	0xfffefff8
 800de0c:	00200010 	.word	0x00200010
 800de10:	00100070 	.word	0x00100070
 800de14:	00100060 	.word	0x00100060
 800de18:	00100050 	.word	0x00100050
 800de1c:	00100040 	.word	0x00100040
 800de20:	00100030 	.word	0x00100030
 800de24:	00100020 	.word	0x00100020

0800de28 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800de28:	b480      	push	{r7}
 800de2a:	b087      	sub	sp, #28
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	607a      	str	r2, [r7, #4]
 800de34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	6a1b      	ldr	r3, [r3, #32]
 800de3a:	f023 0201 	bic.w	r2, r3, #1
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	699b      	ldr	r3, [r3, #24]
 800de46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	6a1b      	ldr	r3, [r3, #32]
 800de4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	4a28      	ldr	r2, [pc, #160]	; (800def4 <TIM_TI1_SetConfig+0xcc>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d01b      	beq.n	800de8e <TIM_TI1_SetConfig+0x66>
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de5c:	d017      	beq.n	800de8e <TIM_TI1_SetConfig+0x66>
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	4a25      	ldr	r2, [pc, #148]	; (800def8 <TIM_TI1_SetConfig+0xd0>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d013      	beq.n	800de8e <TIM_TI1_SetConfig+0x66>
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	4a24      	ldr	r2, [pc, #144]	; (800defc <TIM_TI1_SetConfig+0xd4>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d00f      	beq.n	800de8e <TIM_TI1_SetConfig+0x66>
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	4a23      	ldr	r2, [pc, #140]	; (800df00 <TIM_TI1_SetConfig+0xd8>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d00b      	beq.n	800de8e <TIM_TI1_SetConfig+0x66>
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	4a22      	ldr	r2, [pc, #136]	; (800df04 <TIM_TI1_SetConfig+0xdc>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d007      	beq.n	800de8e <TIM_TI1_SetConfig+0x66>
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	4a21      	ldr	r2, [pc, #132]	; (800df08 <TIM_TI1_SetConfig+0xe0>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d003      	beq.n	800de8e <TIM_TI1_SetConfig+0x66>
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	4a20      	ldr	r2, [pc, #128]	; (800df0c <TIM_TI1_SetConfig+0xe4>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d101      	bne.n	800de92 <TIM_TI1_SetConfig+0x6a>
 800de8e:	2301      	movs	r3, #1
 800de90:	e000      	b.n	800de94 <TIM_TI1_SetConfig+0x6c>
 800de92:	2300      	movs	r3, #0
 800de94:	2b00      	cmp	r3, #0
 800de96:	d008      	beq.n	800deaa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	f023 0303 	bic.w	r3, r3, #3
 800de9e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800dea0:	697a      	ldr	r2, [r7, #20]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4313      	orrs	r3, r2
 800dea6:	617b      	str	r3, [r7, #20]
 800dea8:	e003      	b.n	800deb2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	f043 0301 	orr.w	r3, r3, #1
 800deb0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800deb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	011b      	lsls	r3, r3, #4
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	697a      	ldr	r2, [r7, #20]
 800dec2:	4313      	orrs	r3, r2
 800dec4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	f023 030a 	bic.w	r3, r3, #10
 800decc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	f003 030a 	and.w	r3, r3, #10
 800ded4:	693a      	ldr	r2, [r7, #16]
 800ded6:	4313      	orrs	r3, r2
 800ded8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	697a      	ldr	r2, [r7, #20]
 800dede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	693a      	ldr	r2, [r7, #16]
 800dee4:	621a      	str	r2, [r3, #32]
}
 800dee6:	bf00      	nop
 800dee8:	371c      	adds	r7, #28
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr
 800def2:	bf00      	nop
 800def4:	40010000 	.word	0x40010000
 800def8:	40000400 	.word	0x40000400
 800defc:	40000800 	.word	0x40000800
 800df00:	40000c00 	.word	0x40000c00
 800df04:	40010400 	.word	0x40010400
 800df08:	40001800 	.word	0x40001800
 800df0c:	40014000 	.word	0x40014000

0800df10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df10:	b480      	push	{r7}
 800df12:	b087      	sub	sp, #28
 800df14:	af00      	add	r7, sp, #0
 800df16:	60f8      	str	r0, [r7, #12]
 800df18:	60b9      	str	r1, [r7, #8]
 800df1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	6a1b      	ldr	r3, [r3, #32]
 800df20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	6a1b      	ldr	r3, [r3, #32]
 800df26:	f023 0201 	bic.w	r2, r3, #1
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	699b      	ldr	r3, [r3, #24]
 800df32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800df3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	011b      	lsls	r3, r3, #4
 800df40:	693a      	ldr	r2, [r7, #16]
 800df42:	4313      	orrs	r3, r2
 800df44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	f023 030a 	bic.w	r3, r3, #10
 800df4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800df4e:	697a      	ldr	r2, [r7, #20]
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	4313      	orrs	r3, r2
 800df54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	693a      	ldr	r2, [r7, #16]
 800df5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	697a      	ldr	r2, [r7, #20]
 800df60:	621a      	str	r2, [r3, #32]
}
 800df62:	bf00      	nop
 800df64:	371c      	adds	r7, #28
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr

0800df6e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800df6e:	b480      	push	{r7}
 800df70:	b087      	sub	sp, #28
 800df72:	af00      	add	r7, sp, #0
 800df74:	60f8      	str	r0, [r7, #12]
 800df76:	60b9      	str	r1, [r7, #8]
 800df78:	607a      	str	r2, [r7, #4]
 800df7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6a1b      	ldr	r3, [r3, #32]
 800df80:	f023 0210 	bic.w	r2, r3, #16
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	699b      	ldr	r3, [r3, #24]
 800df8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	6a1b      	ldr	r3, [r3, #32]
 800df92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	021b      	lsls	r3, r3, #8
 800dfa0:	697a      	ldr	r2, [r7, #20]
 800dfa2:	4313      	orrs	r3, r2
 800dfa4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dfac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	031b      	lsls	r3, r3, #12
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	697a      	ldr	r2, [r7, #20]
 800dfb6:	4313      	orrs	r3, r2
 800dfb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dfba:	693b      	ldr	r3, [r7, #16]
 800dfbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dfc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800dfc2:	68bb      	ldr	r3, [r7, #8]
 800dfc4:	011b      	lsls	r3, r3, #4
 800dfc6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800dfca:	693a      	ldr	r2, [r7, #16]
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	697a      	ldr	r2, [r7, #20]
 800dfd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	693a      	ldr	r2, [r7, #16]
 800dfda:	621a      	str	r2, [r3, #32]
}
 800dfdc:	bf00      	nop
 800dfde:	371c      	adds	r7, #28
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr

0800dfe8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b087      	sub	sp, #28
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	60f8      	str	r0, [r7, #12]
 800dff0:	60b9      	str	r1, [r7, #8]
 800dff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	6a1b      	ldr	r3, [r3, #32]
 800dff8:	f023 0210 	bic.w	r2, r3, #16
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	699b      	ldr	r3, [r3, #24]
 800e004:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	6a1b      	ldr	r3, [r3, #32]
 800e00a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e012:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	031b      	lsls	r3, r3, #12
 800e018:	697a      	ldr	r2, [r7, #20]
 800e01a:	4313      	orrs	r3, r2
 800e01c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e024:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	011b      	lsls	r3, r3, #4
 800e02a:	693a      	ldr	r2, [r7, #16]
 800e02c:	4313      	orrs	r3, r2
 800e02e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	697a      	ldr	r2, [r7, #20]
 800e034:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	693a      	ldr	r2, [r7, #16]
 800e03a:	621a      	str	r2, [r3, #32]
}
 800e03c:	bf00      	nop
 800e03e:	371c      	adds	r7, #28
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e048:	b480      	push	{r7}
 800e04a:	b087      	sub	sp, #28
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	607a      	str	r2, [r7, #4]
 800e054:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	6a1b      	ldr	r3, [r3, #32]
 800e05a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	69db      	ldr	r3, [r3, #28]
 800e066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	6a1b      	ldr	r3, [r3, #32]
 800e06c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	f023 0303 	bic.w	r3, r3, #3
 800e074:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800e076:	697a      	ldr	r2, [r7, #20]
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	4313      	orrs	r3, r2
 800e07c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e084:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	011b      	lsls	r3, r3, #4
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	697a      	ldr	r2, [r7, #20]
 800e08e:	4313      	orrs	r3, r2
 800e090:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800e098:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	021b      	lsls	r3, r3, #8
 800e09e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800e0a2:	693a      	ldr	r2, [r7, #16]
 800e0a4:	4313      	orrs	r3, r2
 800e0a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	697a      	ldr	r2, [r7, #20]
 800e0ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	693a      	ldr	r2, [r7, #16]
 800e0b2:	621a      	str	r2, [r3, #32]
}
 800e0b4:	bf00      	nop
 800e0b6:	371c      	adds	r7, #28
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr

0800e0c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b087      	sub	sp, #28
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	60f8      	str	r0, [r7, #12]
 800e0c8:	60b9      	str	r1, [r7, #8]
 800e0ca:	607a      	str	r2, [r7, #4]
 800e0cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	6a1b      	ldr	r3, [r3, #32]
 800e0d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	69db      	ldr	r3, [r3, #28]
 800e0de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	6a1b      	ldr	r3, [r3, #32]
 800e0e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	021b      	lsls	r3, r3, #8
 800e0f2:	697a      	ldr	r2, [r7, #20]
 800e0f4:	4313      	orrs	r3, r2
 800e0f6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e0fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	031b      	lsls	r3, r3, #12
 800e104:	b29b      	uxth	r3, r3
 800e106:	697a      	ldr	r2, [r7, #20]
 800e108:	4313      	orrs	r3, r2
 800e10a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800e112:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	031b      	lsls	r3, r3, #12
 800e118:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800e11c:	693a      	ldr	r2, [r7, #16]
 800e11e:	4313      	orrs	r3, r2
 800e120:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	697a      	ldr	r2, [r7, #20]
 800e126:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	693a      	ldr	r2, [r7, #16]
 800e12c:	621a      	str	r2, [r3, #32]
}
 800e12e:	bf00      	nop
 800e130:	371c      	adds	r7, #28
 800e132:	46bd      	mov	sp, r7
 800e134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e138:	4770      	bx	lr
	...

0800e13c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b085      	sub	sp, #20
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	689b      	ldr	r3, [r3, #8]
 800e14a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e14c:	68fa      	ldr	r2, [r7, #12]
 800e14e:	4b09      	ldr	r3, [pc, #36]	; (800e174 <TIM_ITRx_SetConfig+0x38>)
 800e150:	4013      	ands	r3, r2
 800e152:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e154:	683a      	ldr	r2, [r7, #0]
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	4313      	orrs	r3, r2
 800e15a:	f043 0307 	orr.w	r3, r3, #7
 800e15e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	68fa      	ldr	r2, [r7, #12]
 800e164:	609a      	str	r2, [r3, #8]
}
 800e166:	bf00      	nop
 800e168:	3714      	adds	r7, #20
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr
 800e172:	bf00      	nop
 800e174:	ffcfff8f 	.word	0xffcfff8f

0800e178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e178:	b480      	push	{r7}
 800e17a:	b087      	sub	sp, #28
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	607a      	str	r2, [r7, #4]
 800e184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	689b      	ldr	r3, [r3, #8]
 800e18a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	021a      	lsls	r2, r3, #8
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	431a      	orrs	r2, r3
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	697a      	ldr	r2, [r7, #20]
 800e1a2:	4313      	orrs	r3, r2
 800e1a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	697a      	ldr	r2, [r7, #20]
 800e1aa:	609a      	str	r2, [r3, #8]
}
 800e1ac:	bf00      	nop
 800e1ae:	371c      	adds	r7, #28
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr

0800e1b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b085      	sub	sp, #20
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d101      	bne.n	800e1d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e1cc:	2302      	movs	r3, #2
 800e1ce:	e06d      	b.n	800e2ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2202      	movs	r2, #2
 800e1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	689b      	ldr	r3, [r3, #8]
 800e1ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a30      	ldr	r2, [pc, #192]	; (800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d004      	beq.n	800e204 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4a2f      	ldr	r2, [pc, #188]	; (800e2bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d108      	bne.n	800e216 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e20a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	68fa      	ldr	r2, [r7, #12]
 800e212:	4313      	orrs	r3, r2
 800e214:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e21c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	4313      	orrs	r3, r2
 800e226:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	68fa      	ldr	r2, [r7, #12]
 800e22e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a20      	ldr	r2, [pc, #128]	; (800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d022      	beq.n	800e280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e242:	d01d      	beq.n	800e280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a1d      	ldr	r2, [pc, #116]	; (800e2c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d018      	beq.n	800e280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	4a1c      	ldr	r2, [pc, #112]	; (800e2c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e254:	4293      	cmp	r3, r2
 800e256:	d013      	beq.n	800e280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	4a1a      	ldr	r2, [pc, #104]	; (800e2c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e25e:	4293      	cmp	r3, r2
 800e260:	d00e      	beq.n	800e280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4a15      	ldr	r2, [pc, #84]	; (800e2bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	d009      	beq.n	800e280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a16      	ldr	r2, [pc, #88]	; (800e2cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e272:	4293      	cmp	r3, r2
 800e274:	d004      	beq.n	800e280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	4a15      	ldr	r2, [pc, #84]	; (800e2d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e27c:	4293      	cmp	r3, r2
 800e27e:	d10c      	bne.n	800e29a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e286:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	689b      	ldr	r3, [r3, #8]
 800e28c:	68ba      	ldr	r2, [r7, #8]
 800e28e:	4313      	orrs	r3, r2
 800e290:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	68ba      	ldr	r2, [r7, #8]
 800e298:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2201      	movs	r2, #1
 800e29e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e2aa:	2300      	movs	r3, #0
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3714      	adds	r7, #20
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b6:	4770      	bx	lr
 800e2b8:	40010000 	.word	0x40010000
 800e2bc:	40010400 	.word	0x40010400
 800e2c0:	40000400 	.word	0x40000400
 800e2c4:	40000800 	.word	0x40000800
 800e2c8:	40000c00 	.word	0x40000c00
 800e2cc:	40001800 	.word	0x40001800
 800e2d0:	40014000 	.word	0x40014000

0800e2d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e2dc:	bf00      	nop
 800e2de:	370c      	adds	r7, #12
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e2f0:	bf00      	nop
 800e2f2:	370c      	adds	r7, #12
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr

0800e2fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b083      	sub	sp, #12
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e304:	bf00      	nop
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d101      	bne.n	800e322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e31e:	2301      	movs	r3, #1
 800e320:	e042      	b.n	800e3a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d106      	bne.n	800e33a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2200      	movs	r2, #0
 800e330:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f7f5 fb39 	bl	80039ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2224      	movs	r2, #36	; 0x24
 800e33e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f022 0201 	bic.w	r2, r2, #1
 800e350:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f000 f82c 	bl	800e3b0 <UART_SetConfig>
 800e358:	4603      	mov	r3, r0
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	d101      	bne.n	800e362 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e35e:	2301      	movs	r3, #1
 800e360:	e022      	b.n	800e3a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e366:	2b00      	cmp	r3, #0
 800e368:	d002      	beq.n	800e370 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 fd88 	bl	800ee80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	685a      	ldr	r2, [r3, #4]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e37e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	689a      	ldr	r2, [r3, #8]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e38e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f042 0201 	orr.w	r2, r2, #1
 800e39e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f000 fe0f 	bl	800efc4 <UART_CheckIdleState>
 800e3a6:	4603      	mov	r3, r0
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3708      	adds	r7, #8
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e3b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e3b4:	b092      	sub	sp, #72	; 0x48
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	689a      	ldr	r2, [r3, #8]
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	691b      	ldr	r3, [r3, #16]
 800e3c8:	431a      	orrs	r2, r3
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	695b      	ldr	r3, [r3, #20]
 800e3ce:	431a      	orrs	r2, r3
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	69db      	ldr	r3, [r3, #28]
 800e3d4:	4313      	orrs	r3, r2
 800e3d6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	681a      	ldr	r2, [r3, #0]
 800e3de:	4bbe      	ldr	r3, [pc, #760]	; (800e6d8 <UART_SetConfig+0x328>)
 800e3e0:	4013      	ands	r3, r2
 800e3e2:	697a      	ldr	r2, [r7, #20]
 800e3e4:	6812      	ldr	r2, [r2, #0]
 800e3e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e3e8:	430b      	orrs	r3, r1
 800e3ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	685b      	ldr	r3, [r3, #4]
 800e3f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	68da      	ldr	r2, [r3, #12]
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	430a      	orrs	r2, r1
 800e400:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	699b      	ldr	r3, [r3, #24]
 800e406:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	4ab3      	ldr	r2, [pc, #716]	; (800e6dc <UART_SetConfig+0x32c>)
 800e40e:	4293      	cmp	r3, r2
 800e410:	d004      	beq.n	800e41c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	6a1b      	ldr	r3, [r3, #32]
 800e416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e418:	4313      	orrs	r3, r2
 800e41a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	689a      	ldr	r2, [r3, #8]
 800e422:	4baf      	ldr	r3, [pc, #700]	; (800e6e0 <UART_SetConfig+0x330>)
 800e424:	4013      	ands	r3, r2
 800e426:	697a      	ldr	r2, [r7, #20]
 800e428:	6812      	ldr	r2, [r2, #0]
 800e42a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e42c:	430b      	orrs	r3, r1
 800e42e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e436:	f023 010f 	bic.w	r1, r3, #15
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	430a      	orrs	r2, r1
 800e444:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	4aa6      	ldr	r2, [pc, #664]	; (800e6e4 <UART_SetConfig+0x334>)
 800e44c:	4293      	cmp	r3, r2
 800e44e:	d177      	bne.n	800e540 <UART_SetConfig+0x190>
 800e450:	4ba5      	ldr	r3, [pc, #660]	; (800e6e8 <UART_SetConfig+0x338>)
 800e452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e454:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e458:	2b28      	cmp	r3, #40	; 0x28
 800e45a:	d86d      	bhi.n	800e538 <UART_SetConfig+0x188>
 800e45c:	a201      	add	r2, pc, #4	; (adr r2, 800e464 <UART_SetConfig+0xb4>)
 800e45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e462:	bf00      	nop
 800e464:	0800e509 	.word	0x0800e509
 800e468:	0800e539 	.word	0x0800e539
 800e46c:	0800e539 	.word	0x0800e539
 800e470:	0800e539 	.word	0x0800e539
 800e474:	0800e539 	.word	0x0800e539
 800e478:	0800e539 	.word	0x0800e539
 800e47c:	0800e539 	.word	0x0800e539
 800e480:	0800e539 	.word	0x0800e539
 800e484:	0800e511 	.word	0x0800e511
 800e488:	0800e539 	.word	0x0800e539
 800e48c:	0800e539 	.word	0x0800e539
 800e490:	0800e539 	.word	0x0800e539
 800e494:	0800e539 	.word	0x0800e539
 800e498:	0800e539 	.word	0x0800e539
 800e49c:	0800e539 	.word	0x0800e539
 800e4a0:	0800e539 	.word	0x0800e539
 800e4a4:	0800e519 	.word	0x0800e519
 800e4a8:	0800e539 	.word	0x0800e539
 800e4ac:	0800e539 	.word	0x0800e539
 800e4b0:	0800e539 	.word	0x0800e539
 800e4b4:	0800e539 	.word	0x0800e539
 800e4b8:	0800e539 	.word	0x0800e539
 800e4bc:	0800e539 	.word	0x0800e539
 800e4c0:	0800e539 	.word	0x0800e539
 800e4c4:	0800e521 	.word	0x0800e521
 800e4c8:	0800e539 	.word	0x0800e539
 800e4cc:	0800e539 	.word	0x0800e539
 800e4d0:	0800e539 	.word	0x0800e539
 800e4d4:	0800e539 	.word	0x0800e539
 800e4d8:	0800e539 	.word	0x0800e539
 800e4dc:	0800e539 	.word	0x0800e539
 800e4e0:	0800e539 	.word	0x0800e539
 800e4e4:	0800e529 	.word	0x0800e529
 800e4e8:	0800e539 	.word	0x0800e539
 800e4ec:	0800e539 	.word	0x0800e539
 800e4f0:	0800e539 	.word	0x0800e539
 800e4f4:	0800e539 	.word	0x0800e539
 800e4f8:	0800e539 	.word	0x0800e539
 800e4fc:	0800e539 	.word	0x0800e539
 800e500:	0800e539 	.word	0x0800e539
 800e504:	0800e531 	.word	0x0800e531
 800e508:	2301      	movs	r3, #1
 800e50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e50e:	e222      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e510:	2304      	movs	r3, #4
 800e512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e516:	e21e      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e518:	2308      	movs	r3, #8
 800e51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e51e:	e21a      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e520:	2310      	movs	r3, #16
 800e522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e526:	e216      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e528:	2320      	movs	r3, #32
 800e52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e52e:	e212      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e530:	2340      	movs	r3, #64	; 0x40
 800e532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e536:	e20e      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e538:	2380      	movs	r3, #128	; 0x80
 800e53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e53e:	e20a      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	4a69      	ldr	r2, [pc, #420]	; (800e6ec <UART_SetConfig+0x33c>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d130      	bne.n	800e5ac <UART_SetConfig+0x1fc>
 800e54a:	4b67      	ldr	r3, [pc, #412]	; (800e6e8 <UART_SetConfig+0x338>)
 800e54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e54e:	f003 0307 	and.w	r3, r3, #7
 800e552:	2b05      	cmp	r3, #5
 800e554:	d826      	bhi.n	800e5a4 <UART_SetConfig+0x1f4>
 800e556:	a201      	add	r2, pc, #4	; (adr r2, 800e55c <UART_SetConfig+0x1ac>)
 800e558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e55c:	0800e575 	.word	0x0800e575
 800e560:	0800e57d 	.word	0x0800e57d
 800e564:	0800e585 	.word	0x0800e585
 800e568:	0800e58d 	.word	0x0800e58d
 800e56c:	0800e595 	.word	0x0800e595
 800e570:	0800e59d 	.word	0x0800e59d
 800e574:	2300      	movs	r3, #0
 800e576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e57a:	e1ec      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e57c:	2304      	movs	r3, #4
 800e57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e582:	e1e8      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e584:	2308      	movs	r3, #8
 800e586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e58a:	e1e4      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e58c:	2310      	movs	r3, #16
 800e58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e592:	e1e0      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e594:	2320      	movs	r3, #32
 800e596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e59a:	e1dc      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e59c:	2340      	movs	r3, #64	; 0x40
 800e59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5a2:	e1d8      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e5a4:	2380      	movs	r3, #128	; 0x80
 800e5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5aa:	e1d4      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4a4f      	ldr	r2, [pc, #316]	; (800e6f0 <UART_SetConfig+0x340>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d130      	bne.n	800e618 <UART_SetConfig+0x268>
 800e5b6:	4b4c      	ldr	r3, [pc, #304]	; (800e6e8 <UART_SetConfig+0x338>)
 800e5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5ba:	f003 0307 	and.w	r3, r3, #7
 800e5be:	2b05      	cmp	r3, #5
 800e5c0:	d826      	bhi.n	800e610 <UART_SetConfig+0x260>
 800e5c2:	a201      	add	r2, pc, #4	; (adr r2, 800e5c8 <UART_SetConfig+0x218>)
 800e5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c8:	0800e5e1 	.word	0x0800e5e1
 800e5cc:	0800e5e9 	.word	0x0800e5e9
 800e5d0:	0800e5f1 	.word	0x0800e5f1
 800e5d4:	0800e5f9 	.word	0x0800e5f9
 800e5d8:	0800e601 	.word	0x0800e601
 800e5dc:	0800e609 	.word	0x0800e609
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5e6:	e1b6      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e5e8:	2304      	movs	r3, #4
 800e5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ee:	e1b2      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e5f0:	2308      	movs	r3, #8
 800e5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5f6:	e1ae      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e5f8:	2310      	movs	r3, #16
 800e5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5fe:	e1aa      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e600:	2320      	movs	r3, #32
 800e602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e606:	e1a6      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e608:	2340      	movs	r3, #64	; 0x40
 800e60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e60e:	e1a2      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e610:	2380      	movs	r3, #128	; 0x80
 800e612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e616:	e19e      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a35      	ldr	r2, [pc, #212]	; (800e6f4 <UART_SetConfig+0x344>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d130      	bne.n	800e684 <UART_SetConfig+0x2d4>
 800e622:	4b31      	ldr	r3, [pc, #196]	; (800e6e8 <UART_SetConfig+0x338>)
 800e624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e626:	f003 0307 	and.w	r3, r3, #7
 800e62a:	2b05      	cmp	r3, #5
 800e62c:	d826      	bhi.n	800e67c <UART_SetConfig+0x2cc>
 800e62e:	a201      	add	r2, pc, #4	; (adr r2, 800e634 <UART_SetConfig+0x284>)
 800e630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e634:	0800e64d 	.word	0x0800e64d
 800e638:	0800e655 	.word	0x0800e655
 800e63c:	0800e65d 	.word	0x0800e65d
 800e640:	0800e665 	.word	0x0800e665
 800e644:	0800e66d 	.word	0x0800e66d
 800e648:	0800e675 	.word	0x0800e675
 800e64c:	2300      	movs	r3, #0
 800e64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e652:	e180      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e654:	2304      	movs	r3, #4
 800e656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e65a:	e17c      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e65c:	2308      	movs	r3, #8
 800e65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e662:	e178      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e664:	2310      	movs	r3, #16
 800e666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e66a:	e174      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e66c:	2320      	movs	r3, #32
 800e66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e672:	e170      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e674:	2340      	movs	r3, #64	; 0x40
 800e676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e67a:	e16c      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e67c:	2380      	movs	r3, #128	; 0x80
 800e67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e682:	e168      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4a1b      	ldr	r2, [pc, #108]	; (800e6f8 <UART_SetConfig+0x348>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d142      	bne.n	800e714 <UART_SetConfig+0x364>
 800e68e:	4b16      	ldr	r3, [pc, #88]	; (800e6e8 <UART_SetConfig+0x338>)
 800e690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e692:	f003 0307 	and.w	r3, r3, #7
 800e696:	2b05      	cmp	r3, #5
 800e698:	d838      	bhi.n	800e70c <UART_SetConfig+0x35c>
 800e69a:	a201      	add	r2, pc, #4	; (adr r2, 800e6a0 <UART_SetConfig+0x2f0>)
 800e69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6a0:	0800e6b9 	.word	0x0800e6b9
 800e6a4:	0800e6c1 	.word	0x0800e6c1
 800e6a8:	0800e6c9 	.word	0x0800e6c9
 800e6ac:	0800e6d1 	.word	0x0800e6d1
 800e6b0:	0800e6fd 	.word	0x0800e6fd
 800e6b4:	0800e705 	.word	0x0800e705
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6be:	e14a      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e6c0:	2304      	movs	r3, #4
 800e6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6c6:	e146      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e6c8:	2308      	movs	r3, #8
 800e6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ce:	e142      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e6d0:	2310      	movs	r3, #16
 800e6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6d6:	e13e      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e6d8:	cfff69f3 	.word	0xcfff69f3
 800e6dc:	58000c00 	.word	0x58000c00
 800e6e0:	11fff4ff 	.word	0x11fff4ff
 800e6e4:	40011000 	.word	0x40011000
 800e6e8:	58024400 	.word	0x58024400
 800e6ec:	40004400 	.word	0x40004400
 800e6f0:	40004800 	.word	0x40004800
 800e6f4:	40004c00 	.word	0x40004c00
 800e6f8:	40005000 	.word	0x40005000
 800e6fc:	2320      	movs	r3, #32
 800e6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e702:	e128      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e704:	2340      	movs	r3, #64	; 0x40
 800e706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e70a:	e124      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e70c:	2380      	movs	r3, #128	; 0x80
 800e70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e712:	e120      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4acb      	ldr	r2, [pc, #812]	; (800ea48 <UART_SetConfig+0x698>)
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d176      	bne.n	800e80c <UART_SetConfig+0x45c>
 800e71e:	4bcb      	ldr	r3, [pc, #812]	; (800ea4c <UART_SetConfig+0x69c>)
 800e720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e726:	2b28      	cmp	r3, #40	; 0x28
 800e728:	d86c      	bhi.n	800e804 <UART_SetConfig+0x454>
 800e72a:	a201      	add	r2, pc, #4	; (adr r2, 800e730 <UART_SetConfig+0x380>)
 800e72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e730:	0800e7d5 	.word	0x0800e7d5
 800e734:	0800e805 	.word	0x0800e805
 800e738:	0800e805 	.word	0x0800e805
 800e73c:	0800e805 	.word	0x0800e805
 800e740:	0800e805 	.word	0x0800e805
 800e744:	0800e805 	.word	0x0800e805
 800e748:	0800e805 	.word	0x0800e805
 800e74c:	0800e805 	.word	0x0800e805
 800e750:	0800e7dd 	.word	0x0800e7dd
 800e754:	0800e805 	.word	0x0800e805
 800e758:	0800e805 	.word	0x0800e805
 800e75c:	0800e805 	.word	0x0800e805
 800e760:	0800e805 	.word	0x0800e805
 800e764:	0800e805 	.word	0x0800e805
 800e768:	0800e805 	.word	0x0800e805
 800e76c:	0800e805 	.word	0x0800e805
 800e770:	0800e7e5 	.word	0x0800e7e5
 800e774:	0800e805 	.word	0x0800e805
 800e778:	0800e805 	.word	0x0800e805
 800e77c:	0800e805 	.word	0x0800e805
 800e780:	0800e805 	.word	0x0800e805
 800e784:	0800e805 	.word	0x0800e805
 800e788:	0800e805 	.word	0x0800e805
 800e78c:	0800e805 	.word	0x0800e805
 800e790:	0800e7ed 	.word	0x0800e7ed
 800e794:	0800e805 	.word	0x0800e805
 800e798:	0800e805 	.word	0x0800e805
 800e79c:	0800e805 	.word	0x0800e805
 800e7a0:	0800e805 	.word	0x0800e805
 800e7a4:	0800e805 	.word	0x0800e805
 800e7a8:	0800e805 	.word	0x0800e805
 800e7ac:	0800e805 	.word	0x0800e805
 800e7b0:	0800e7f5 	.word	0x0800e7f5
 800e7b4:	0800e805 	.word	0x0800e805
 800e7b8:	0800e805 	.word	0x0800e805
 800e7bc:	0800e805 	.word	0x0800e805
 800e7c0:	0800e805 	.word	0x0800e805
 800e7c4:	0800e805 	.word	0x0800e805
 800e7c8:	0800e805 	.word	0x0800e805
 800e7cc:	0800e805 	.word	0x0800e805
 800e7d0:	0800e7fd 	.word	0x0800e7fd
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7da:	e0bc      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e7dc:	2304      	movs	r3, #4
 800e7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7e2:	e0b8      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e7e4:	2308      	movs	r3, #8
 800e7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ea:	e0b4      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e7ec:	2310      	movs	r3, #16
 800e7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7f2:	e0b0      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e7f4:	2320      	movs	r3, #32
 800e7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7fa:	e0ac      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e7fc:	2340      	movs	r3, #64	; 0x40
 800e7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e802:	e0a8      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e804:	2380      	movs	r3, #128	; 0x80
 800e806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e80a:	e0a4      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4a8f      	ldr	r2, [pc, #572]	; (800ea50 <UART_SetConfig+0x6a0>)
 800e812:	4293      	cmp	r3, r2
 800e814:	d130      	bne.n	800e878 <UART_SetConfig+0x4c8>
 800e816:	4b8d      	ldr	r3, [pc, #564]	; (800ea4c <UART_SetConfig+0x69c>)
 800e818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e81a:	f003 0307 	and.w	r3, r3, #7
 800e81e:	2b05      	cmp	r3, #5
 800e820:	d826      	bhi.n	800e870 <UART_SetConfig+0x4c0>
 800e822:	a201      	add	r2, pc, #4	; (adr r2, 800e828 <UART_SetConfig+0x478>)
 800e824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e828:	0800e841 	.word	0x0800e841
 800e82c:	0800e849 	.word	0x0800e849
 800e830:	0800e851 	.word	0x0800e851
 800e834:	0800e859 	.word	0x0800e859
 800e838:	0800e861 	.word	0x0800e861
 800e83c:	0800e869 	.word	0x0800e869
 800e840:	2300      	movs	r3, #0
 800e842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e846:	e086      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e848:	2304      	movs	r3, #4
 800e84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e84e:	e082      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e850:	2308      	movs	r3, #8
 800e852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e856:	e07e      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e858:	2310      	movs	r3, #16
 800e85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e85e:	e07a      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e860:	2320      	movs	r3, #32
 800e862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e866:	e076      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e868:	2340      	movs	r3, #64	; 0x40
 800e86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e86e:	e072      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e870:	2380      	movs	r3, #128	; 0x80
 800e872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e876:	e06e      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	4a75      	ldr	r2, [pc, #468]	; (800ea54 <UART_SetConfig+0x6a4>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d130      	bne.n	800e8e4 <UART_SetConfig+0x534>
 800e882:	4b72      	ldr	r3, [pc, #456]	; (800ea4c <UART_SetConfig+0x69c>)
 800e884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e886:	f003 0307 	and.w	r3, r3, #7
 800e88a:	2b05      	cmp	r3, #5
 800e88c:	d826      	bhi.n	800e8dc <UART_SetConfig+0x52c>
 800e88e:	a201      	add	r2, pc, #4	; (adr r2, 800e894 <UART_SetConfig+0x4e4>)
 800e890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e894:	0800e8ad 	.word	0x0800e8ad
 800e898:	0800e8b5 	.word	0x0800e8b5
 800e89c:	0800e8bd 	.word	0x0800e8bd
 800e8a0:	0800e8c5 	.word	0x0800e8c5
 800e8a4:	0800e8cd 	.word	0x0800e8cd
 800e8a8:	0800e8d5 	.word	0x0800e8d5
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8b2:	e050      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e8b4:	2304      	movs	r3, #4
 800e8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ba:	e04c      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e8bc:	2308      	movs	r3, #8
 800e8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8c2:	e048      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e8c4:	2310      	movs	r3, #16
 800e8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8ca:	e044      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e8cc:	2320      	movs	r3, #32
 800e8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8d2:	e040      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e8d4:	2340      	movs	r3, #64	; 0x40
 800e8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8da:	e03c      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e8dc:	2380      	movs	r3, #128	; 0x80
 800e8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e8e2:	e038      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4a5b      	ldr	r2, [pc, #364]	; (800ea58 <UART_SetConfig+0x6a8>)
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d130      	bne.n	800e950 <UART_SetConfig+0x5a0>
 800e8ee:	4b57      	ldr	r3, [pc, #348]	; (800ea4c <UART_SetConfig+0x69c>)
 800e8f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8f2:	f003 0307 	and.w	r3, r3, #7
 800e8f6:	2b05      	cmp	r3, #5
 800e8f8:	d826      	bhi.n	800e948 <UART_SetConfig+0x598>
 800e8fa:	a201      	add	r2, pc, #4	; (adr r2, 800e900 <UART_SetConfig+0x550>)
 800e8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e900:	0800e919 	.word	0x0800e919
 800e904:	0800e921 	.word	0x0800e921
 800e908:	0800e929 	.word	0x0800e929
 800e90c:	0800e931 	.word	0x0800e931
 800e910:	0800e939 	.word	0x0800e939
 800e914:	0800e941 	.word	0x0800e941
 800e918:	2302      	movs	r3, #2
 800e91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e91e:	e01a      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e920:	2304      	movs	r3, #4
 800e922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e926:	e016      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e928:	2308      	movs	r3, #8
 800e92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e92e:	e012      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e930:	2310      	movs	r3, #16
 800e932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e936:	e00e      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e938:	2320      	movs	r3, #32
 800e93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e93e:	e00a      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e940:	2340      	movs	r3, #64	; 0x40
 800e942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e946:	e006      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e948:	2380      	movs	r3, #128	; 0x80
 800e94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e94e:	e002      	b.n	800e956 <UART_SetConfig+0x5a6>
 800e950:	2380      	movs	r3, #128	; 0x80
 800e952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	4a3f      	ldr	r2, [pc, #252]	; (800ea58 <UART_SetConfig+0x6a8>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	f040 80f8 	bne.w	800eb52 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e962:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e966:	2b20      	cmp	r3, #32
 800e968:	dc46      	bgt.n	800e9f8 <UART_SetConfig+0x648>
 800e96a:	2b02      	cmp	r3, #2
 800e96c:	f2c0 8082 	blt.w	800ea74 <UART_SetConfig+0x6c4>
 800e970:	3b02      	subs	r3, #2
 800e972:	2b1e      	cmp	r3, #30
 800e974:	d87e      	bhi.n	800ea74 <UART_SetConfig+0x6c4>
 800e976:	a201      	add	r2, pc, #4	; (adr r2, 800e97c <UART_SetConfig+0x5cc>)
 800e978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e97c:	0800e9ff 	.word	0x0800e9ff
 800e980:	0800ea75 	.word	0x0800ea75
 800e984:	0800ea07 	.word	0x0800ea07
 800e988:	0800ea75 	.word	0x0800ea75
 800e98c:	0800ea75 	.word	0x0800ea75
 800e990:	0800ea75 	.word	0x0800ea75
 800e994:	0800ea17 	.word	0x0800ea17
 800e998:	0800ea75 	.word	0x0800ea75
 800e99c:	0800ea75 	.word	0x0800ea75
 800e9a0:	0800ea75 	.word	0x0800ea75
 800e9a4:	0800ea75 	.word	0x0800ea75
 800e9a8:	0800ea75 	.word	0x0800ea75
 800e9ac:	0800ea75 	.word	0x0800ea75
 800e9b0:	0800ea75 	.word	0x0800ea75
 800e9b4:	0800ea27 	.word	0x0800ea27
 800e9b8:	0800ea75 	.word	0x0800ea75
 800e9bc:	0800ea75 	.word	0x0800ea75
 800e9c0:	0800ea75 	.word	0x0800ea75
 800e9c4:	0800ea75 	.word	0x0800ea75
 800e9c8:	0800ea75 	.word	0x0800ea75
 800e9cc:	0800ea75 	.word	0x0800ea75
 800e9d0:	0800ea75 	.word	0x0800ea75
 800e9d4:	0800ea75 	.word	0x0800ea75
 800e9d8:	0800ea75 	.word	0x0800ea75
 800e9dc:	0800ea75 	.word	0x0800ea75
 800e9e0:	0800ea75 	.word	0x0800ea75
 800e9e4:	0800ea75 	.word	0x0800ea75
 800e9e8:	0800ea75 	.word	0x0800ea75
 800e9ec:	0800ea75 	.word	0x0800ea75
 800e9f0:	0800ea75 	.word	0x0800ea75
 800e9f4:	0800ea67 	.word	0x0800ea67
 800e9f8:	2b40      	cmp	r3, #64	; 0x40
 800e9fa:	d037      	beq.n	800ea6c <UART_SetConfig+0x6bc>
 800e9fc:	e03a      	b.n	800ea74 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e9fe:	f7fc ffcb 	bl	800b998 <HAL_RCCEx_GetD3PCLK1Freq>
 800ea02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea04:	e03c      	b.n	800ea80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7fc ffda 	bl	800b9c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea14:	e034      	b.n	800ea80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea16:	f107 0318 	add.w	r3, r7, #24
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7fd f926 	bl	800bc6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea20:	69fb      	ldr	r3, [r7, #28]
 800ea22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea24:	e02c      	b.n	800ea80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea26:	4b09      	ldr	r3, [pc, #36]	; (800ea4c <UART_SetConfig+0x69c>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f003 0320 	and.w	r3, r3, #32
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d016      	beq.n	800ea60 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea32:	4b06      	ldr	r3, [pc, #24]	; (800ea4c <UART_SetConfig+0x69c>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	08db      	lsrs	r3, r3, #3
 800ea38:	f003 0303 	and.w	r3, r3, #3
 800ea3c:	4a07      	ldr	r2, [pc, #28]	; (800ea5c <UART_SetConfig+0x6ac>)
 800ea3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ea42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ea44:	e01c      	b.n	800ea80 <UART_SetConfig+0x6d0>
 800ea46:	bf00      	nop
 800ea48:	40011400 	.word	0x40011400
 800ea4c:	58024400 	.word	0x58024400
 800ea50:	40007800 	.word	0x40007800
 800ea54:	40007c00 	.word	0x40007c00
 800ea58:	58000c00 	.word	0x58000c00
 800ea5c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ea60:	4b9d      	ldr	r3, [pc, #628]	; (800ecd8 <UART_SetConfig+0x928>)
 800ea62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea64:	e00c      	b.n	800ea80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ea66:	4b9d      	ldr	r3, [pc, #628]	; (800ecdc <UART_SetConfig+0x92c>)
 800ea68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea6a:	e009      	b.n	800ea80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea72:	e005      	b.n	800ea80 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ea74:	2300      	movs	r3, #0
 800ea76:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ea7e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ea80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	f000 81de 	beq.w	800ee44 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea8c:	4a94      	ldr	r2, [pc, #592]	; (800ece0 <UART_SetConfig+0x930>)
 800ea8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea92:	461a      	mov	r2, r3
 800ea94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea96:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea9a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	685a      	ldr	r2, [r3, #4]
 800eaa0:	4613      	mov	r3, r2
 800eaa2:	005b      	lsls	r3, r3, #1
 800eaa4:	4413      	add	r3, r2
 800eaa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d305      	bcc.n	800eab8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d903      	bls.n	800eac0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800eab8:	2301      	movs	r3, #1
 800eaba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eabe:	e1c1      	b.n	800ee44 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eac2:	2200      	movs	r2, #0
 800eac4:	60bb      	str	r3, [r7, #8]
 800eac6:	60fa      	str	r2, [r7, #12]
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eacc:	4a84      	ldr	r2, [pc, #528]	; (800ece0 <UART_SetConfig+0x930>)
 800eace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	2200      	movs	r2, #0
 800ead6:	603b      	str	r3, [r7, #0]
 800ead8:	607a      	str	r2, [r7, #4]
 800eada:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eade:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eae2:	f7f1 fbf9 	bl	80002d8 <__aeabi_uldivmod>
 800eae6:	4602      	mov	r2, r0
 800eae8:	460b      	mov	r3, r1
 800eaea:	4610      	mov	r0, r2
 800eaec:	4619      	mov	r1, r3
 800eaee:	f04f 0200 	mov.w	r2, #0
 800eaf2:	f04f 0300 	mov.w	r3, #0
 800eaf6:	020b      	lsls	r3, r1, #8
 800eaf8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800eafc:	0202      	lsls	r2, r0, #8
 800eafe:	6979      	ldr	r1, [r7, #20]
 800eb00:	6849      	ldr	r1, [r1, #4]
 800eb02:	0849      	lsrs	r1, r1, #1
 800eb04:	2000      	movs	r0, #0
 800eb06:	460c      	mov	r4, r1
 800eb08:	4605      	mov	r5, r0
 800eb0a:	eb12 0804 	adds.w	r8, r2, r4
 800eb0e:	eb43 0905 	adc.w	r9, r3, r5
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	469a      	mov	sl, r3
 800eb1a:	4693      	mov	fp, r2
 800eb1c:	4652      	mov	r2, sl
 800eb1e:	465b      	mov	r3, fp
 800eb20:	4640      	mov	r0, r8
 800eb22:	4649      	mov	r1, r9
 800eb24:	f7f1 fbd8 	bl	80002d8 <__aeabi_uldivmod>
 800eb28:	4602      	mov	r2, r0
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	4613      	mov	r3, r2
 800eb2e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eb36:	d308      	bcc.n	800eb4a <UART_SetConfig+0x79a>
 800eb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb3e:	d204      	bcs.n	800eb4a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb46:	60da      	str	r2, [r3, #12]
 800eb48:	e17c      	b.n	800ee44 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eb50:	e178      	b.n	800ee44 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	69db      	ldr	r3, [r3, #28]
 800eb56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb5a:	f040 80c5 	bne.w	800ece8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800eb5e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eb62:	2b20      	cmp	r3, #32
 800eb64:	dc48      	bgt.n	800ebf8 <UART_SetConfig+0x848>
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	db7b      	blt.n	800ec62 <UART_SetConfig+0x8b2>
 800eb6a:	2b20      	cmp	r3, #32
 800eb6c:	d879      	bhi.n	800ec62 <UART_SetConfig+0x8b2>
 800eb6e:	a201      	add	r2, pc, #4	; (adr r2, 800eb74 <UART_SetConfig+0x7c4>)
 800eb70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb74:	0800ebff 	.word	0x0800ebff
 800eb78:	0800ec07 	.word	0x0800ec07
 800eb7c:	0800ec63 	.word	0x0800ec63
 800eb80:	0800ec63 	.word	0x0800ec63
 800eb84:	0800ec0f 	.word	0x0800ec0f
 800eb88:	0800ec63 	.word	0x0800ec63
 800eb8c:	0800ec63 	.word	0x0800ec63
 800eb90:	0800ec63 	.word	0x0800ec63
 800eb94:	0800ec1f 	.word	0x0800ec1f
 800eb98:	0800ec63 	.word	0x0800ec63
 800eb9c:	0800ec63 	.word	0x0800ec63
 800eba0:	0800ec63 	.word	0x0800ec63
 800eba4:	0800ec63 	.word	0x0800ec63
 800eba8:	0800ec63 	.word	0x0800ec63
 800ebac:	0800ec63 	.word	0x0800ec63
 800ebb0:	0800ec63 	.word	0x0800ec63
 800ebb4:	0800ec2f 	.word	0x0800ec2f
 800ebb8:	0800ec63 	.word	0x0800ec63
 800ebbc:	0800ec63 	.word	0x0800ec63
 800ebc0:	0800ec63 	.word	0x0800ec63
 800ebc4:	0800ec63 	.word	0x0800ec63
 800ebc8:	0800ec63 	.word	0x0800ec63
 800ebcc:	0800ec63 	.word	0x0800ec63
 800ebd0:	0800ec63 	.word	0x0800ec63
 800ebd4:	0800ec63 	.word	0x0800ec63
 800ebd8:	0800ec63 	.word	0x0800ec63
 800ebdc:	0800ec63 	.word	0x0800ec63
 800ebe0:	0800ec63 	.word	0x0800ec63
 800ebe4:	0800ec63 	.word	0x0800ec63
 800ebe8:	0800ec63 	.word	0x0800ec63
 800ebec:	0800ec63 	.word	0x0800ec63
 800ebf0:	0800ec63 	.word	0x0800ec63
 800ebf4:	0800ec55 	.word	0x0800ec55
 800ebf8:	2b40      	cmp	r3, #64	; 0x40
 800ebfa:	d02e      	beq.n	800ec5a <UART_SetConfig+0x8aa>
 800ebfc:	e031      	b.n	800ec62 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ebfe:	f7fa ff15 	bl	8009a2c <HAL_RCC_GetPCLK1Freq>
 800ec02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ec04:	e033      	b.n	800ec6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec06:	f7fa ff27 	bl	8009a58 <HAL_RCC_GetPCLK2Freq>
 800ec0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ec0c:	e02f      	b.n	800ec6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fc fed6 	bl	800b9c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ec18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec1c:	e027      	b.n	800ec6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec1e:	f107 0318 	add.w	r3, r7, #24
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7fd f822 	bl	800bc6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec2c:	e01f      	b.n	800ec6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec2e:	4b2d      	ldr	r3, [pc, #180]	; (800ece4 <UART_SetConfig+0x934>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f003 0320 	and.w	r3, r3, #32
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d009      	beq.n	800ec4e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ec3a:	4b2a      	ldr	r3, [pc, #168]	; (800ece4 <UART_SetConfig+0x934>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	08db      	lsrs	r3, r3, #3
 800ec40:	f003 0303 	and.w	r3, r3, #3
 800ec44:	4a24      	ldr	r2, [pc, #144]	; (800ecd8 <UART_SetConfig+0x928>)
 800ec46:	fa22 f303 	lsr.w	r3, r2, r3
 800ec4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec4c:	e00f      	b.n	800ec6e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ec4e:	4b22      	ldr	r3, [pc, #136]	; (800ecd8 <UART_SetConfig+0x928>)
 800ec50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec52:	e00c      	b.n	800ec6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec54:	4b21      	ldr	r3, [pc, #132]	; (800ecdc <UART_SetConfig+0x92c>)
 800ec56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec58:	e009      	b.n	800ec6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec60:	e005      	b.n	800ec6e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ec62:	2300      	movs	r3, #0
 800ec64:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ec66:	2301      	movs	r3, #1
 800ec68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ec6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ec6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	f000 80e7 	beq.w	800ee44 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec7a:	4a19      	ldr	r2, [pc, #100]	; (800ece0 <UART_SetConfig+0x930>)
 800ec7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec80:	461a      	mov	r2, r3
 800ec82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec84:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec88:	005a      	lsls	r2, r3, #1
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	085b      	lsrs	r3, r3, #1
 800ec90:	441a      	add	r2, r3
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec9a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec9e:	2b0f      	cmp	r3, #15
 800eca0:	d916      	bls.n	800ecd0 <UART_SetConfig+0x920>
 800eca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eca8:	d212      	bcs.n	800ecd0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ecaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecac:	b29b      	uxth	r3, r3
 800ecae:	f023 030f 	bic.w	r3, r3, #15
 800ecb2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ecb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb6:	085b      	lsrs	r3, r3, #1
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	f003 0307 	and.w	r3, r3, #7
 800ecbe:	b29a      	uxth	r2, r3
 800ecc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ecc2:	4313      	orrs	r3, r2
 800ecc4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800eccc:	60da      	str	r2, [r3, #12]
 800ecce:	e0b9      	b.n	800ee44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ecd6:	e0b5      	b.n	800ee44 <UART_SetConfig+0xa94>
 800ecd8:	03d09000 	.word	0x03d09000
 800ecdc:	003d0900 	.word	0x003d0900
 800ece0:	08010494 	.word	0x08010494
 800ece4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ece8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ecec:	2b20      	cmp	r3, #32
 800ecee:	dc49      	bgt.n	800ed84 <UART_SetConfig+0x9d4>
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	db7c      	blt.n	800edee <UART_SetConfig+0xa3e>
 800ecf4:	2b20      	cmp	r3, #32
 800ecf6:	d87a      	bhi.n	800edee <UART_SetConfig+0xa3e>
 800ecf8:	a201      	add	r2, pc, #4	; (adr r2, 800ed00 <UART_SetConfig+0x950>)
 800ecfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecfe:	bf00      	nop
 800ed00:	0800ed8b 	.word	0x0800ed8b
 800ed04:	0800ed93 	.word	0x0800ed93
 800ed08:	0800edef 	.word	0x0800edef
 800ed0c:	0800edef 	.word	0x0800edef
 800ed10:	0800ed9b 	.word	0x0800ed9b
 800ed14:	0800edef 	.word	0x0800edef
 800ed18:	0800edef 	.word	0x0800edef
 800ed1c:	0800edef 	.word	0x0800edef
 800ed20:	0800edab 	.word	0x0800edab
 800ed24:	0800edef 	.word	0x0800edef
 800ed28:	0800edef 	.word	0x0800edef
 800ed2c:	0800edef 	.word	0x0800edef
 800ed30:	0800edef 	.word	0x0800edef
 800ed34:	0800edef 	.word	0x0800edef
 800ed38:	0800edef 	.word	0x0800edef
 800ed3c:	0800edef 	.word	0x0800edef
 800ed40:	0800edbb 	.word	0x0800edbb
 800ed44:	0800edef 	.word	0x0800edef
 800ed48:	0800edef 	.word	0x0800edef
 800ed4c:	0800edef 	.word	0x0800edef
 800ed50:	0800edef 	.word	0x0800edef
 800ed54:	0800edef 	.word	0x0800edef
 800ed58:	0800edef 	.word	0x0800edef
 800ed5c:	0800edef 	.word	0x0800edef
 800ed60:	0800edef 	.word	0x0800edef
 800ed64:	0800edef 	.word	0x0800edef
 800ed68:	0800edef 	.word	0x0800edef
 800ed6c:	0800edef 	.word	0x0800edef
 800ed70:	0800edef 	.word	0x0800edef
 800ed74:	0800edef 	.word	0x0800edef
 800ed78:	0800edef 	.word	0x0800edef
 800ed7c:	0800edef 	.word	0x0800edef
 800ed80:	0800ede1 	.word	0x0800ede1
 800ed84:	2b40      	cmp	r3, #64	; 0x40
 800ed86:	d02e      	beq.n	800ede6 <UART_SetConfig+0xa36>
 800ed88:	e031      	b.n	800edee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed8a:	f7fa fe4f 	bl	8009a2c <HAL_RCC_GetPCLK1Freq>
 800ed8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed90:	e033      	b.n	800edfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed92:	f7fa fe61 	bl	8009a58 <HAL_RCC_GetPCLK2Freq>
 800ed96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ed98:	e02f      	b.n	800edfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7fc fe10 	bl	800b9c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eda8:	e027      	b.n	800edfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800edaa:	f107 0318 	add.w	r3, r7, #24
 800edae:	4618      	mov	r0, r3
 800edb0:	f7fc ff5c 	bl	800bc6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edb8:	e01f      	b.n	800edfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800edba:	4b2d      	ldr	r3, [pc, #180]	; (800ee70 <UART_SetConfig+0xac0>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f003 0320 	and.w	r3, r3, #32
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d009      	beq.n	800edda <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800edc6:	4b2a      	ldr	r3, [pc, #168]	; (800ee70 <UART_SetConfig+0xac0>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	08db      	lsrs	r3, r3, #3
 800edcc:	f003 0303 	and.w	r3, r3, #3
 800edd0:	4a28      	ldr	r2, [pc, #160]	; (800ee74 <UART_SetConfig+0xac4>)
 800edd2:	fa22 f303 	lsr.w	r3, r2, r3
 800edd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800edd8:	e00f      	b.n	800edfa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800edda:	4b26      	ldr	r3, [pc, #152]	; (800ee74 <UART_SetConfig+0xac4>)
 800eddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edde:	e00c      	b.n	800edfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ede0:	4b25      	ldr	r3, [pc, #148]	; (800ee78 <UART_SetConfig+0xac8>)
 800ede2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ede4:	e009      	b.n	800edfa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ede6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800edea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edec:	e005      	b.n	800edfa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800edee:	2300      	movs	r3, #0
 800edf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800edf2:	2301      	movs	r3, #1
 800edf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800edf8:	bf00      	nop
    }

    if (pclk != 0U)
 800edfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d021      	beq.n	800ee44 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee04:	4a1d      	ldr	r2, [pc, #116]	; (800ee7c <UART_SetConfig+0xacc>)
 800ee06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee0e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	085b      	lsrs	r3, r3, #1
 800ee18:	441a      	add	r2, r3
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	685b      	ldr	r3, [r3, #4]
 800ee1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee22:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ee24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee26:	2b0f      	cmp	r3, #15
 800ee28:	d909      	bls.n	800ee3e <UART_SetConfig+0xa8e>
 800ee2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee30:	d205      	bcs.n	800ee3e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ee32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee34:	b29a      	uxth	r2, r3
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	60da      	str	r2, [r3, #12]
 800ee3c:	e002      	b.n	800ee44 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ee3e:	2301      	movs	r3, #1
 800ee40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	2201      	movs	r2, #1
 800ee48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	2201      	movs	r2, #1
 800ee50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	2200      	movs	r2, #0
 800ee58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ee60:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	3748      	adds	r7, #72	; 0x48
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ee6e:	bf00      	nop
 800ee70:	58024400 	.word	0x58024400
 800ee74:	03d09000 	.word	0x03d09000
 800ee78:	003d0900 	.word	0x003d0900
 800ee7c:	08010494 	.word	0x08010494

0800ee80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ee80:	b480      	push	{r7}
 800ee82:	b083      	sub	sp, #12
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee8c:	f003 0301 	and.w	r3, r3, #1
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d00a      	beq.n	800eeaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	430a      	orrs	r2, r1
 800eea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeae:	f003 0302 	and.w	r3, r3, #2
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d00a      	beq.n	800eecc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	685b      	ldr	r3, [r3, #4]
 800eebc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	430a      	orrs	r2, r1
 800eeca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eed0:	f003 0304 	and.w	r3, r3, #4
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d00a      	beq.n	800eeee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	430a      	orrs	r2, r1
 800eeec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eef2:	f003 0308 	and.w	r3, r3, #8
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d00a      	beq.n	800ef10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	430a      	orrs	r2, r1
 800ef0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef14:	f003 0310 	and.w	r3, r3, #16
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d00a      	beq.n	800ef32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	689b      	ldr	r3, [r3, #8]
 800ef22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	430a      	orrs	r2, r1
 800ef30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef36:	f003 0320 	and.w	r3, r3, #32
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d00a      	beq.n	800ef54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	689b      	ldr	r3, [r3, #8]
 800ef44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	430a      	orrs	r2, r1
 800ef52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d01a      	beq.n	800ef96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	430a      	orrs	r2, r1
 800ef74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ef7e:	d10a      	bne.n	800ef96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	430a      	orrs	r2, r1
 800ef94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d00a      	beq.n	800efb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	685b      	ldr	r3, [r3, #4]
 800efa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	430a      	orrs	r2, r1
 800efb6:	605a      	str	r2, [r3, #4]
  }
}
 800efb8:	bf00      	nop
 800efba:	370c      	adds	r7, #12
 800efbc:	46bd      	mov	sp, r7
 800efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc2:	4770      	bx	lr

0800efc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b098      	sub	sp, #96	; 0x60
 800efc8:	af02      	add	r7, sp, #8
 800efca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2200      	movs	r2, #0
 800efd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800efd4:	f7f5 f88a 	bl	80040ec <HAL_GetTick>
 800efd8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f003 0308 	and.w	r3, r3, #8
 800efe4:	2b08      	cmp	r3, #8
 800efe6:	d12f      	bne.n	800f048 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800efe8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800efec:	9300      	str	r3, [sp, #0]
 800efee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eff0:	2200      	movs	r2, #0
 800eff2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f000 f88e 	bl	800f118 <UART_WaitOnFlagUntilTimeout>
 800effc:	4603      	mov	r3, r0
 800effe:	2b00      	cmp	r3, #0
 800f000:	d022      	beq.n	800f048 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00a:	e853 3f00 	ldrex	r3, [r3]
 800f00e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f016:	653b      	str	r3, [r7, #80]	; 0x50
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	461a      	mov	r2, r3
 800f01e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f020:	647b      	str	r3, [r7, #68]	; 0x44
 800f022:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f024:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f028:	e841 2300 	strex	r3, r2, [r1]
 800f02c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f030:	2b00      	cmp	r3, #0
 800f032:	d1e6      	bne.n	800f002 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2220      	movs	r2, #32
 800f038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2200      	movs	r2, #0
 800f040:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f044:	2303      	movs	r3, #3
 800f046:	e063      	b.n	800f110 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f003 0304 	and.w	r3, r3, #4
 800f052:	2b04      	cmp	r3, #4
 800f054:	d149      	bne.n	800f0ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f056:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f05a:	9300      	str	r3, [sp, #0]
 800f05c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f05e:	2200      	movs	r2, #0
 800f060:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 f857 	bl	800f118 <UART_WaitOnFlagUntilTimeout>
 800f06a:	4603      	mov	r3, r0
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d03c      	beq.n	800f0ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f078:	e853 3f00 	ldrex	r3, [r3]
 800f07c:	623b      	str	r3, [r7, #32]
   return(result);
 800f07e:	6a3b      	ldr	r3, [r7, #32]
 800f080:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f084:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	461a      	mov	r2, r3
 800f08c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f08e:	633b      	str	r3, [r7, #48]	; 0x30
 800f090:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f092:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f096:	e841 2300 	strex	r3, r2, [r1]
 800f09a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d1e6      	bne.n	800f070 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	3308      	adds	r3, #8
 800f0a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	e853 3f00 	ldrex	r3, [r3]
 800f0b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f023 0301 	bic.w	r3, r3, #1
 800f0b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	3308      	adds	r3, #8
 800f0c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f0c2:	61fa      	str	r2, [r7, #28]
 800f0c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0c6:	69b9      	ldr	r1, [r7, #24]
 800f0c8:	69fa      	ldr	r2, [r7, #28]
 800f0ca:	e841 2300 	strex	r3, r2, [r1]
 800f0ce:	617b      	str	r3, [r7, #20]
   return(result);
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d1e5      	bne.n	800f0a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2220      	movs	r2, #32
 800f0da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f0e6:	2303      	movs	r3, #3
 800f0e8:	e012      	b.n	800f110 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2220      	movs	r2, #32
 800f0ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2220      	movs	r2, #32
 800f0f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2200      	movs	r2, #0
 800f104:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2200      	movs	r2, #0
 800f10a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f10e:	2300      	movs	r3, #0
}
 800f110:	4618      	mov	r0, r3
 800f112:	3758      	adds	r7, #88	; 0x58
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b084      	sub	sp, #16
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	60b9      	str	r1, [r7, #8]
 800f122:	603b      	str	r3, [r7, #0]
 800f124:	4613      	mov	r3, r2
 800f126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f128:	e049      	b.n	800f1be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f12a:	69bb      	ldr	r3, [r7, #24]
 800f12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f130:	d045      	beq.n	800f1be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f132:	f7f4 ffdb 	bl	80040ec <HAL_GetTick>
 800f136:	4602      	mov	r2, r0
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	1ad3      	subs	r3, r2, r3
 800f13c:	69ba      	ldr	r2, [r7, #24]
 800f13e:	429a      	cmp	r2, r3
 800f140:	d302      	bcc.n	800f148 <UART_WaitOnFlagUntilTimeout+0x30>
 800f142:	69bb      	ldr	r3, [r7, #24]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d101      	bne.n	800f14c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f148:	2303      	movs	r3, #3
 800f14a:	e048      	b.n	800f1de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f003 0304 	and.w	r3, r3, #4
 800f156:	2b00      	cmp	r3, #0
 800f158:	d031      	beq.n	800f1be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	69db      	ldr	r3, [r3, #28]
 800f160:	f003 0308 	and.w	r3, r3, #8
 800f164:	2b08      	cmp	r3, #8
 800f166:	d110      	bne.n	800f18a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	2208      	movs	r2, #8
 800f16e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f170:	68f8      	ldr	r0, [r7, #12]
 800f172:	f000 f839 	bl	800f1e8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	2208      	movs	r2, #8
 800f17a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2200      	movs	r2, #0
 800f182:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f186:	2301      	movs	r3, #1
 800f188:	e029      	b.n	800f1de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	69db      	ldr	r3, [r3, #28]
 800f190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f198:	d111      	bne.n	800f1be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f1a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f1a4:	68f8      	ldr	r0, [r7, #12]
 800f1a6:	f000 f81f 	bl	800f1e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	2220      	movs	r2, #32
 800f1ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f1ba:	2303      	movs	r3, #3
 800f1bc:	e00f      	b.n	800f1de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	69da      	ldr	r2, [r3, #28]
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	4013      	ands	r3, r2
 800f1c8:	68ba      	ldr	r2, [r7, #8]
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	bf0c      	ite	eq
 800f1ce:	2301      	moveq	r3, #1
 800f1d0:	2300      	movne	r3, #0
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	461a      	mov	r2, r3
 800f1d6:	79fb      	ldrb	r3, [r7, #7]
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d0a6      	beq.n	800f12a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f1dc:	2300      	movs	r3, #0
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3710      	adds	r7, #16
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
	...

0800f1e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b095      	sub	sp, #84	; 0x54
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1f8:	e853 3f00 	ldrex	r3, [r3]
 800f1fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f200:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f204:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	461a      	mov	r2, r3
 800f20c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f20e:	643b      	str	r3, [r7, #64]	; 0x40
 800f210:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f212:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f214:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f216:	e841 2300 	strex	r3, r2, [r1]
 800f21a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d1e6      	bne.n	800f1f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	3308      	adds	r3, #8
 800f228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f22a:	6a3b      	ldr	r3, [r7, #32]
 800f22c:	e853 3f00 	ldrex	r3, [r3]
 800f230:	61fb      	str	r3, [r7, #28]
   return(result);
 800f232:	69fa      	ldr	r2, [r7, #28]
 800f234:	4b1e      	ldr	r3, [pc, #120]	; (800f2b0 <UART_EndRxTransfer+0xc8>)
 800f236:	4013      	ands	r3, r2
 800f238:	64bb      	str	r3, [r7, #72]	; 0x48
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	3308      	adds	r3, #8
 800f240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f242:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f244:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f24a:	e841 2300 	strex	r3, r2, [r1]
 800f24e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f252:	2b00      	cmp	r3, #0
 800f254:	d1e5      	bne.n	800f222 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d118      	bne.n	800f290 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	e853 3f00 	ldrex	r3, [r3]
 800f26a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	f023 0310 	bic.w	r3, r3, #16
 800f272:	647b      	str	r3, [r7, #68]	; 0x44
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	461a      	mov	r2, r3
 800f27a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f27c:	61bb      	str	r3, [r7, #24]
 800f27e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f280:	6979      	ldr	r1, [r7, #20]
 800f282:	69ba      	ldr	r2, [r7, #24]
 800f284:	e841 2300 	strex	r3, r2, [r1]
 800f288:	613b      	str	r3, [r7, #16]
   return(result);
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d1e6      	bne.n	800f25e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2220      	movs	r2, #32
 800f294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2200      	movs	r2, #0
 800f29c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f2a4:	bf00      	nop
 800f2a6:	3754      	adds	r7, #84	; 0x54
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ae:	4770      	bx	lr
 800f2b0:	effffffe 	.word	0xeffffffe

0800f2b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b085      	sub	sp, #20
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f2c2:	2b01      	cmp	r3, #1
 800f2c4:	d101      	bne.n	800f2ca <HAL_UARTEx_DisableFifoMode+0x16>
 800f2c6:	2302      	movs	r3, #2
 800f2c8:	e027      	b.n	800f31a <HAL_UARTEx_DisableFifoMode+0x66>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2201      	movs	r2, #1
 800f2ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2224      	movs	r2, #36	; 0x24
 800f2d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	f022 0201 	bic.w	r2, r2, #1
 800f2f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f2f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	68fa      	ldr	r2, [r7, #12]
 800f306:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2220      	movs	r2, #32
 800f30c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2200      	movs	r2, #0
 800f314:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f318:	2300      	movs	r3, #0
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3714      	adds	r7, #20
 800f31e:	46bd      	mov	sp, r7
 800f320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f324:	4770      	bx	lr

0800f326 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f326:	b580      	push	{r7, lr}
 800f328:	b084      	sub	sp, #16
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
 800f32e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f336:	2b01      	cmp	r3, #1
 800f338:	d101      	bne.n	800f33e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f33a:	2302      	movs	r3, #2
 800f33c:	e02d      	b.n	800f39a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2201      	movs	r2, #1
 800f342:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2224      	movs	r2, #36	; 0x24
 800f34a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f022 0201 	bic.w	r2, r2, #1
 800f364:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	689b      	ldr	r3, [r3, #8]
 800f36c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	683a      	ldr	r2, [r7, #0]
 800f376:	430a      	orrs	r2, r1
 800f378:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 f850 	bl	800f420 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	68fa      	ldr	r2, [r7, #12]
 800f386:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2220      	movs	r2, #32
 800f38c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2200      	movs	r2, #0
 800f394:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f398:	2300      	movs	r3, #0
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3710      	adds	r7, #16
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}

0800f3a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f3a2:	b580      	push	{r7, lr}
 800f3a4:	b084      	sub	sp, #16
 800f3a6:	af00      	add	r7, sp, #0
 800f3a8:	6078      	str	r0, [r7, #4]
 800f3aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d101      	bne.n	800f3ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f3b6:	2302      	movs	r3, #2
 800f3b8:	e02d      	b.n	800f416 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2201      	movs	r2, #1
 800f3be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2224      	movs	r2, #36	; 0x24
 800f3c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	681a      	ldr	r2, [r3, #0]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	f022 0201 	bic.w	r2, r2, #1
 800f3e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	689b      	ldr	r3, [r3, #8]
 800f3e8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	683a      	ldr	r2, [r7, #0]
 800f3f2:	430a      	orrs	r2, r1
 800f3f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f000 f812 	bl	800f420 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	68fa      	ldr	r2, [r7, #12]
 800f402:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2220      	movs	r2, #32
 800f408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2200      	movs	r2, #0
 800f410:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f414:	2300      	movs	r3, #0
}
 800f416:	4618      	mov	r0, r3
 800f418:	3710      	adds	r7, #16
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
	...

0800f420 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f420:	b480      	push	{r7}
 800f422:	b085      	sub	sp, #20
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d108      	bne.n	800f442 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2201      	movs	r2, #1
 800f434:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2201      	movs	r2, #1
 800f43c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f440:	e031      	b.n	800f4a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f442:	2310      	movs	r3, #16
 800f444:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f446:	2310      	movs	r3, #16
 800f448:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	689b      	ldr	r3, [r3, #8]
 800f450:	0e5b      	lsrs	r3, r3, #25
 800f452:	b2db      	uxtb	r3, r3
 800f454:	f003 0307 	and.w	r3, r3, #7
 800f458:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	689b      	ldr	r3, [r3, #8]
 800f460:	0f5b      	lsrs	r3, r3, #29
 800f462:	b2db      	uxtb	r3, r3
 800f464:	f003 0307 	and.w	r3, r3, #7
 800f468:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f46a:	7bbb      	ldrb	r3, [r7, #14]
 800f46c:	7b3a      	ldrb	r2, [r7, #12]
 800f46e:	4911      	ldr	r1, [pc, #68]	; (800f4b4 <UARTEx_SetNbDataToProcess+0x94>)
 800f470:	5c8a      	ldrb	r2, [r1, r2]
 800f472:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f476:	7b3a      	ldrb	r2, [r7, #12]
 800f478:	490f      	ldr	r1, [pc, #60]	; (800f4b8 <UARTEx_SetNbDataToProcess+0x98>)
 800f47a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f47c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f480:	b29a      	uxth	r2, r3
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f488:	7bfb      	ldrb	r3, [r7, #15]
 800f48a:	7b7a      	ldrb	r2, [r7, #13]
 800f48c:	4909      	ldr	r1, [pc, #36]	; (800f4b4 <UARTEx_SetNbDataToProcess+0x94>)
 800f48e:	5c8a      	ldrb	r2, [r1, r2]
 800f490:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f494:	7b7a      	ldrb	r2, [r7, #13]
 800f496:	4908      	ldr	r1, [pc, #32]	; (800f4b8 <UARTEx_SetNbDataToProcess+0x98>)
 800f498:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f49a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f49e:	b29a      	uxth	r2, r3
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f4a6:	bf00      	nop
 800f4a8:	3714      	adds	r7, #20
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b0:	4770      	bx	lr
 800f4b2:	bf00      	nop
 800f4b4:	080104ac 	.word	0x080104ac
 800f4b8:	080104b4 	.word	0x080104b4

0800f4bc <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d101      	bne.n	800f4ce <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	e03c      	b.n	800f548 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f4d4:	b2db      	uxtb	r3, r3
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d106      	bne.n	800f4e8 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f7f4 fcba 	bl	8003e5c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2202      	movs	r2, #2
 800f4ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	681a      	ldr	r2, [r3, #0]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	f022 0201 	bic.w	r2, r2, #1
 800f4fe:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f000 f85b 	bl	800f5bc <USART_SetConfig>
 800f506:	4603      	mov	r3, r0
 800f508:	2b01      	cmp	r3, #1
 800f50a:	d101      	bne.n	800f510 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800f50c:	2301      	movs	r3, #1
 800f50e:	e01b      	b.n	800f548 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	685a      	ldr	r2, [r3, #4]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f51e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	689a      	ldr	r2, [r3, #8]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f52e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	681a      	ldr	r2, [r3, #0]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	f042 0201 	orr.w	r2, r2, #1
 800f53e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f000 fd5b 	bl	800fffc <USART_CheckIdleState>
 800f546:	4603      	mov	r3, r0
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3708      	adds	r7, #8
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b084      	sub	sp, #16
 800f554:	af00      	add	r7, sp, #0
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	60b9      	str	r1, [r7, #8]
 800f55a:	603b      	str	r3, [r7, #0]
 800f55c:	4613      	mov	r3, r2
 800f55e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800f560:	e018      	b.n	800f594 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f562:	69bb      	ldr	r3, [r7, #24]
 800f564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f568:	d014      	beq.n	800f594 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f56a:	f7f4 fdbf 	bl	80040ec <HAL_GetTick>
 800f56e:	4602      	mov	r2, r0
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	1ad3      	subs	r3, r2, r3
 800f574:	69ba      	ldr	r2, [r7, #24]
 800f576:	429a      	cmp	r2, r3
 800f578:	d302      	bcc.n	800f580 <USART_WaitOnFlagUntilTimeout+0x30>
 800f57a:	69bb      	ldr	r3, [r7, #24]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d109      	bne.n	800f594 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2201      	movs	r2, #1
 800f584:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2200      	movs	r2, #0
 800f58c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 800f590:	2303      	movs	r3, #3
 800f592:	e00f      	b.n	800f5b4 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	69da      	ldr	r2, [r3, #28]
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	4013      	ands	r3, r2
 800f59e:	68ba      	ldr	r2, [r7, #8]
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	bf0c      	ite	eq
 800f5a4:	2301      	moveq	r3, #1
 800f5a6:	2300      	movne	r3, #0
 800f5a8:	b2db      	uxtb	r3, r3
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	79fb      	ldrb	r3, [r7, #7]
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d0d7      	beq.n	800f562 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f5b2:	2300      	movs	r3, #0
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3710      	adds	r7, #16
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b08e      	sub	sp, #56	; 0x38
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	633b      	str	r3, [r7, #48]	; 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	689a      	ldr	r2, [r3, #8]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	691b      	ldr	r3, [r3, #16]
 800f5d6:	431a      	orrs	r2, r3
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	695b      	ldr	r3, [r3, #20]
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	681a      	ldr	r2, [r3, #0]
 800f5ea:	4bc9      	ldr	r3, [pc, #804]	; (800f910 <USART_SetConfig+0x354>)
 800f5ec:	4013      	ands	r3, r2
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	6812      	ldr	r2, [r2, #0]
 800f5f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f5f4:	430b      	orrs	r3, r1
 800f5f6:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800f5f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6a1b      	ldr	r3, [r3, #32]
 800f602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f604:	4313      	orrs	r3, r2
 800f606:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	699a      	ldr	r2, [r3, #24]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	69db      	ldr	r3, [r3, #28]
 800f610:	4313      	orrs	r3, r2
 800f612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f614:	4313      	orrs	r3, r2
 800f616:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	68db      	ldr	r3, [r3, #12]
 800f61c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f61e:	4313      	orrs	r3, r2
 800f620:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	685a      	ldr	r2, [r3, #4]
 800f628:	4bba      	ldr	r3, [pc, #744]	; (800f914 <USART_SetConfig+0x358>)
 800f62a:	4013      	ands	r3, r2
 800f62c:	687a      	ldr	r2, [r7, #4]
 800f62e:	6812      	ldr	r2, [r2, #0]
 800f630:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f632:	430b      	orrs	r3, r1
 800f634:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f63c:	f023 010f 	bic.w	r1, r3, #15
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	430a      	orrs	r2, r1
 800f64a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	4ab1      	ldr	r2, [pc, #708]	; (800f918 <USART_SetConfig+0x35c>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d176      	bne.n	800f744 <USART_SetConfig+0x188>
 800f656:	4bb1      	ldr	r3, [pc, #708]	; (800f91c <USART_SetConfig+0x360>)
 800f658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f65a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f65e:	2b28      	cmp	r3, #40	; 0x28
 800f660:	d86c      	bhi.n	800f73c <USART_SetConfig+0x180>
 800f662:	a201      	add	r2, pc, #4	; (adr r2, 800f668 <USART_SetConfig+0xac>)
 800f664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f668:	0800f70d 	.word	0x0800f70d
 800f66c:	0800f73d 	.word	0x0800f73d
 800f670:	0800f73d 	.word	0x0800f73d
 800f674:	0800f73d 	.word	0x0800f73d
 800f678:	0800f73d 	.word	0x0800f73d
 800f67c:	0800f73d 	.word	0x0800f73d
 800f680:	0800f73d 	.word	0x0800f73d
 800f684:	0800f73d 	.word	0x0800f73d
 800f688:	0800f715 	.word	0x0800f715
 800f68c:	0800f73d 	.word	0x0800f73d
 800f690:	0800f73d 	.word	0x0800f73d
 800f694:	0800f73d 	.word	0x0800f73d
 800f698:	0800f73d 	.word	0x0800f73d
 800f69c:	0800f73d 	.word	0x0800f73d
 800f6a0:	0800f73d 	.word	0x0800f73d
 800f6a4:	0800f73d 	.word	0x0800f73d
 800f6a8:	0800f71d 	.word	0x0800f71d
 800f6ac:	0800f73d 	.word	0x0800f73d
 800f6b0:	0800f73d 	.word	0x0800f73d
 800f6b4:	0800f73d 	.word	0x0800f73d
 800f6b8:	0800f73d 	.word	0x0800f73d
 800f6bc:	0800f73d 	.word	0x0800f73d
 800f6c0:	0800f73d 	.word	0x0800f73d
 800f6c4:	0800f73d 	.word	0x0800f73d
 800f6c8:	0800f725 	.word	0x0800f725
 800f6cc:	0800f73d 	.word	0x0800f73d
 800f6d0:	0800f73d 	.word	0x0800f73d
 800f6d4:	0800f73d 	.word	0x0800f73d
 800f6d8:	0800f73d 	.word	0x0800f73d
 800f6dc:	0800f73d 	.word	0x0800f73d
 800f6e0:	0800f73d 	.word	0x0800f73d
 800f6e4:	0800f73d 	.word	0x0800f73d
 800f6e8:	0800f72d 	.word	0x0800f72d
 800f6ec:	0800f73d 	.word	0x0800f73d
 800f6f0:	0800f73d 	.word	0x0800f73d
 800f6f4:	0800f73d 	.word	0x0800f73d
 800f6f8:	0800f73d 	.word	0x0800f73d
 800f6fc:	0800f73d 	.word	0x0800f73d
 800f700:	0800f73d 	.word	0x0800f73d
 800f704:	0800f73d 	.word	0x0800f73d
 800f708:	0800f735 	.word	0x0800f735
 800f70c:	2301      	movs	r3, #1
 800f70e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f712:	e112      	b.n	800f93a <USART_SetConfig+0x37e>
 800f714:	2302      	movs	r3, #2
 800f716:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f71a:	e10e      	b.n	800f93a <USART_SetConfig+0x37e>
 800f71c:	2304      	movs	r3, #4
 800f71e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f722:	e10a      	b.n	800f93a <USART_SetConfig+0x37e>
 800f724:	2308      	movs	r3, #8
 800f726:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f72a:	e106      	b.n	800f93a <USART_SetConfig+0x37e>
 800f72c:	2310      	movs	r3, #16
 800f72e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f732:	e102      	b.n	800f93a <USART_SetConfig+0x37e>
 800f734:	2320      	movs	r3, #32
 800f736:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f73a:	e0fe      	b.n	800f93a <USART_SetConfig+0x37e>
 800f73c:	2340      	movs	r3, #64	; 0x40
 800f73e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f742:	e0fa      	b.n	800f93a <USART_SetConfig+0x37e>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	4a75      	ldr	r2, [pc, #468]	; (800f920 <USART_SetConfig+0x364>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d130      	bne.n	800f7b0 <USART_SetConfig+0x1f4>
 800f74e:	4b73      	ldr	r3, [pc, #460]	; (800f91c <USART_SetConfig+0x360>)
 800f750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f752:	f003 0307 	and.w	r3, r3, #7
 800f756:	2b05      	cmp	r3, #5
 800f758:	d826      	bhi.n	800f7a8 <USART_SetConfig+0x1ec>
 800f75a:	a201      	add	r2, pc, #4	; (adr r2, 800f760 <USART_SetConfig+0x1a4>)
 800f75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f760:	0800f779 	.word	0x0800f779
 800f764:	0800f781 	.word	0x0800f781
 800f768:	0800f789 	.word	0x0800f789
 800f76c:	0800f791 	.word	0x0800f791
 800f770:	0800f799 	.word	0x0800f799
 800f774:	0800f7a1 	.word	0x0800f7a1
 800f778:	2300      	movs	r3, #0
 800f77a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f77e:	e0dc      	b.n	800f93a <USART_SetConfig+0x37e>
 800f780:	2302      	movs	r3, #2
 800f782:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f786:	e0d8      	b.n	800f93a <USART_SetConfig+0x37e>
 800f788:	2304      	movs	r3, #4
 800f78a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f78e:	e0d4      	b.n	800f93a <USART_SetConfig+0x37e>
 800f790:	2308      	movs	r3, #8
 800f792:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f796:	e0d0      	b.n	800f93a <USART_SetConfig+0x37e>
 800f798:	2310      	movs	r3, #16
 800f79a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f79e:	e0cc      	b.n	800f93a <USART_SetConfig+0x37e>
 800f7a0:	2320      	movs	r3, #32
 800f7a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f7a6:	e0c8      	b.n	800f93a <USART_SetConfig+0x37e>
 800f7a8:	2340      	movs	r3, #64	; 0x40
 800f7aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f7ae:	e0c4      	b.n	800f93a <USART_SetConfig+0x37e>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	4a5b      	ldr	r2, [pc, #364]	; (800f924 <USART_SetConfig+0x368>)
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d130      	bne.n	800f81c <USART_SetConfig+0x260>
 800f7ba:	4b58      	ldr	r3, [pc, #352]	; (800f91c <USART_SetConfig+0x360>)
 800f7bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7be:	f003 0307 	and.w	r3, r3, #7
 800f7c2:	2b05      	cmp	r3, #5
 800f7c4:	d826      	bhi.n	800f814 <USART_SetConfig+0x258>
 800f7c6:	a201      	add	r2, pc, #4	; (adr r2, 800f7cc <USART_SetConfig+0x210>)
 800f7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7cc:	0800f7e5 	.word	0x0800f7e5
 800f7d0:	0800f7ed 	.word	0x0800f7ed
 800f7d4:	0800f7f5 	.word	0x0800f7f5
 800f7d8:	0800f7fd 	.word	0x0800f7fd
 800f7dc:	0800f805 	.word	0x0800f805
 800f7e0:	0800f80d 	.word	0x0800f80d
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f7ea:	e0a6      	b.n	800f93a <USART_SetConfig+0x37e>
 800f7ec:	2302      	movs	r3, #2
 800f7ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f7f2:	e0a2      	b.n	800f93a <USART_SetConfig+0x37e>
 800f7f4:	2304      	movs	r3, #4
 800f7f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f7fa:	e09e      	b.n	800f93a <USART_SetConfig+0x37e>
 800f7fc:	2308      	movs	r3, #8
 800f7fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f802:	e09a      	b.n	800f93a <USART_SetConfig+0x37e>
 800f804:	2310      	movs	r3, #16
 800f806:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f80a:	e096      	b.n	800f93a <USART_SetConfig+0x37e>
 800f80c:	2320      	movs	r3, #32
 800f80e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f812:	e092      	b.n	800f93a <USART_SetConfig+0x37e>
 800f814:	2340      	movs	r3, #64	; 0x40
 800f816:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f81a:	e08e      	b.n	800f93a <USART_SetConfig+0x37e>
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	4a41      	ldr	r2, [pc, #260]	; (800f928 <USART_SetConfig+0x36c>)
 800f822:	4293      	cmp	r3, r2
 800f824:	f040 8086 	bne.w	800f934 <USART_SetConfig+0x378>
 800f828:	4b3c      	ldr	r3, [pc, #240]	; (800f91c <USART_SetConfig+0x360>)
 800f82a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f82c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f830:	2b28      	cmp	r3, #40	; 0x28
 800f832:	d87b      	bhi.n	800f92c <USART_SetConfig+0x370>
 800f834:	a201      	add	r2, pc, #4	; (adr r2, 800f83c <USART_SetConfig+0x280>)
 800f836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f83a:	bf00      	nop
 800f83c:	0800f8e1 	.word	0x0800f8e1
 800f840:	0800f92d 	.word	0x0800f92d
 800f844:	0800f92d 	.word	0x0800f92d
 800f848:	0800f92d 	.word	0x0800f92d
 800f84c:	0800f92d 	.word	0x0800f92d
 800f850:	0800f92d 	.word	0x0800f92d
 800f854:	0800f92d 	.word	0x0800f92d
 800f858:	0800f92d 	.word	0x0800f92d
 800f85c:	0800f8e9 	.word	0x0800f8e9
 800f860:	0800f92d 	.word	0x0800f92d
 800f864:	0800f92d 	.word	0x0800f92d
 800f868:	0800f92d 	.word	0x0800f92d
 800f86c:	0800f92d 	.word	0x0800f92d
 800f870:	0800f92d 	.word	0x0800f92d
 800f874:	0800f92d 	.word	0x0800f92d
 800f878:	0800f92d 	.word	0x0800f92d
 800f87c:	0800f8f1 	.word	0x0800f8f1
 800f880:	0800f92d 	.word	0x0800f92d
 800f884:	0800f92d 	.word	0x0800f92d
 800f888:	0800f92d 	.word	0x0800f92d
 800f88c:	0800f92d 	.word	0x0800f92d
 800f890:	0800f92d 	.word	0x0800f92d
 800f894:	0800f92d 	.word	0x0800f92d
 800f898:	0800f92d 	.word	0x0800f92d
 800f89c:	0800f8f9 	.word	0x0800f8f9
 800f8a0:	0800f92d 	.word	0x0800f92d
 800f8a4:	0800f92d 	.word	0x0800f92d
 800f8a8:	0800f92d 	.word	0x0800f92d
 800f8ac:	0800f92d 	.word	0x0800f92d
 800f8b0:	0800f92d 	.word	0x0800f92d
 800f8b4:	0800f92d 	.word	0x0800f92d
 800f8b8:	0800f92d 	.word	0x0800f92d
 800f8bc:	0800f901 	.word	0x0800f901
 800f8c0:	0800f92d 	.word	0x0800f92d
 800f8c4:	0800f92d 	.word	0x0800f92d
 800f8c8:	0800f92d 	.word	0x0800f92d
 800f8cc:	0800f92d 	.word	0x0800f92d
 800f8d0:	0800f92d 	.word	0x0800f92d
 800f8d4:	0800f92d 	.word	0x0800f92d
 800f8d8:	0800f92d 	.word	0x0800f92d
 800f8dc:	0800f909 	.word	0x0800f909
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f8e6:	e028      	b.n	800f93a <USART_SetConfig+0x37e>
 800f8e8:	2302      	movs	r3, #2
 800f8ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f8ee:	e024      	b.n	800f93a <USART_SetConfig+0x37e>
 800f8f0:	2304      	movs	r3, #4
 800f8f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f8f6:	e020      	b.n	800f93a <USART_SetConfig+0x37e>
 800f8f8:	2308      	movs	r3, #8
 800f8fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f8fe:	e01c      	b.n	800f93a <USART_SetConfig+0x37e>
 800f900:	2310      	movs	r3, #16
 800f902:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f906:	e018      	b.n	800f93a <USART_SetConfig+0x37e>
 800f908:	2320      	movs	r3, #32
 800f90a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f90e:	e014      	b.n	800f93a <USART_SetConfig+0x37e>
 800f910:	cfff69f3 	.word	0xcfff69f3
 800f914:	ffffc0f6 	.word	0xffffc0f6
 800f918:	40011000 	.word	0x40011000
 800f91c:	58024400 	.word	0x58024400
 800f920:	40004400 	.word	0x40004400
 800f924:	40004800 	.word	0x40004800
 800f928:	40011400 	.word	0x40011400
 800f92c:	2340      	movs	r3, #64	; 0x40
 800f92e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f932:	e002      	b.n	800f93a <USART_SetConfig+0x37e>
 800f934:	2340      	movs	r3, #64	; 0x40
 800f936:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  switch (clocksource)
 800f93a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f93e:	2b20      	cmp	r3, #32
 800f940:	f200 8329 	bhi.w	800ff96 <USART_SetConfig+0x9da>
 800f944:	a201      	add	r2, pc, #4	; (adr r2, 800f94c <USART_SetConfig+0x390>)
 800f946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f94a:	bf00      	nop
 800f94c:	0800f9d1 	.word	0x0800f9d1
 800f950:	0800fa87 	.word	0x0800fa87
 800f954:	0800fb3d 	.word	0x0800fb3d
 800f958:	0800ff97 	.word	0x0800ff97
 800f95c:	0800fbf7 	.word	0x0800fbf7
 800f960:	0800ff97 	.word	0x0800ff97
 800f964:	0800ff97 	.word	0x0800ff97
 800f968:	0800ff97 	.word	0x0800ff97
 800f96c:	0800fcb1 	.word	0x0800fcb1
 800f970:	0800ff97 	.word	0x0800ff97
 800f974:	0800ff97 	.word	0x0800ff97
 800f978:	0800ff97 	.word	0x0800ff97
 800f97c:	0800ff97 	.word	0x0800ff97
 800f980:	0800ff97 	.word	0x0800ff97
 800f984:	0800ff97 	.word	0x0800ff97
 800f988:	0800ff97 	.word	0x0800ff97
 800f98c:	0800fe29 	.word	0x0800fe29
 800f990:	0800ff97 	.word	0x0800ff97
 800f994:	0800ff97 	.word	0x0800ff97
 800f998:	0800ff97 	.word	0x0800ff97
 800f99c:	0800ff97 	.word	0x0800ff97
 800f9a0:	0800ff97 	.word	0x0800ff97
 800f9a4:	0800ff97 	.word	0x0800ff97
 800f9a8:	0800ff97 	.word	0x0800ff97
 800f9ac:	0800ff97 	.word	0x0800ff97
 800f9b0:	0800ff97 	.word	0x0800ff97
 800f9b4:	0800ff97 	.word	0x0800ff97
 800f9b8:	0800ff97 	.word	0x0800ff97
 800f9bc:	0800ff97 	.word	0x0800ff97
 800f9c0:	0800ff97 	.word	0x0800ff97
 800f9c4:	0800ff97 	.word	0x0800ff97
 800f9c8:	0800ff97 	.word	0x0800ff97
 800f9cc:	0800fee5 	.word	0x0800fee5
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800f9d0:	f7fa f82c 	bl	8009a2c <HAL_RCC_GetPCLK1Freq>
 800f9d4:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d044      	beq.n	800fa68 <USART_SetConfig+0x4ac>
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	d03e      	beq.n	800fa64 <USART_SetConfig+0x4a8>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ea:	2b02      	cmp	r3, #2
 800f9ec:	d038      	beq.n	800fa60 <USART_SetConfig+0x4a4>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9f2:	2b03      	cmp	r3, #3
 800f9f4:	d032      	beq.n	800fa5c <USART_SetConfig+0x4a0>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9fa:	2b04      	cmp	r3, #4
 800f9fc:	d02c      	beq.n	800fa58 <USART_SetConfig+0x49c>
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa02:	2b05      	cmp	r3, #5
 800fa04:	d026      	beq.n	800fa54 <USART_SetConfig+0x498>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa0a:	2b06      	cmp	r3, #6
 800fa0c:	d020      	beq.n	800fa50 <USART_SetConfig+0x494>
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa12:	2b07      	cmp	r3, #7
 800fa14:	d01a      	beq.n	800fa4c <USART_SetConfig+0x490>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa1a:	2b08      	cmp	r3, #8
 800fa1c:	d014      	beq.n	800fa48 <USART_SetConfig+0x48c>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa22:	2b09      	cmp	r3, #9
 800fa24:	d00e      	beq.n	800fa44 <USART_SetConfig+0x488>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa2a:	2b0a      	cmp	r3, #10
 800fa2c:	d008      	beq.n	800fa40 <USART_SetConfig+0x484>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa32:	2b0b      	cmp	r3, #11
 800fa34:	d102      	bne.n	800fa3c <USART_SetConfig+0x480>
 800fa36:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fa3a:	e016      	b.n	800fa6a <USART_SetConfig+0x4ae>
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	e014      	b.n	800fa6a <USART_SetConfig+0x4ae>
 800fa40:	2380      	movs	r3, #128	; 0x80
 800fa42:	e012      	b.n	800fa6a <USART_SetConfig+0x4ae>
 800fa44:	2340      	movs	r3, #64	; 0x40
 800fa46:	e010      	b.n	800fa6a <USART_SetConfig+0x4ae>
 800fa48:	2320      	movs	r3, #32
 800fa4a:	e00e      	b.n	800fa6a <USART_SetConfig+0x4ae>
 800fa4c:	2310      	movs	r3, #16
 800fa4e:	e00c      	b.n	800fa6a <USART_SetConfig+0x4ae>
 800fa50:	230c      	movs	r3, #12
 800fa52:	e00a      	b.n	800fa6a <USART_SetConfig+0x4ae>
 800fa54:	230a      	movs	r3, #10
 800fa56:	e008      	b.n	800fa6a <USART_SetConfig+0x4ae>
 800fa58:	2308      	movs	r3, #8
 800fa5a:	e006      	b.n	800fa6a <USART_SetConfig+0x4ae>
 800fa5c:	2306      	movs	r3, #6
 800fa5e:	e004      	b.n	800fa6a <USART_SetConfig+0x4ae>
 800fa60:	2304      	movs	r3, #4
 800fa62:	e002      	b.n	800fa6a <USART_SetConfig+0x4ae>
 800fa64:	2302      	movs	r3, #2
 800fa66:	e000      	b.n	800fa6a <USART_SetConfig+0x4ae>
 800fa68:	2301      	movs	r3, #1
 800fa6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa70:	005a      	lsls	r2, r3, #1
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	085b      	lsrs	r3, r3, #1
 800fa78:	441a      	add	r2, r3
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800fa84:	e28b      	b.n	800ff9e <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800fa86:	f7f9 ffe7 	bl	8009a58 <HAL_RCC_GetPCLK2Freq>
 800fa8a:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d044      	beq.n	800fb1e <USART_SetConfig+0x562>
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa98:	2b01      	cmp	r3, #1
 800fa9a:	d03e      	beq.n	800fb1a <USART_SetConfig+0x55e>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa0:	2b02      	cmp	r3, #2
 800faa2:	d038      	beq.n	800fb16 <USART_SetConfig+0x55a>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa8:	2b03      	cmp	r3, #3
 800faaa:	d032      	beq.n	800fb12 <USART_SetConfig+0x556>
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab0:	2b04      	cmp	r3, #4
 800fab2:	d02c      	beq.n	800fb0e <USART_SetConfig+0x552>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab8:	2b05      	cmp	r3, #5
 800faba:	d026      	beq.n	800fb0a <USART_SetConfig+0x54e>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac0:	2b06      	cmp	r3, #6
 800fac2:	d020      	beq.n	800fb06 <USART_SetConfig+0x54a>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac8:	2b07      	cmp	r3, #7
 800faca:	d01a      	beq.n	800fb02 <USART_SetConfig+0x546>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fad0:	2b08      	cmp	r3, #8
 800fad2:	d014      	beq.n	800fafe <USART_SetConfig+0x542>
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fad8:	2b09      	cmp	r3, #9
 800fada:	d00e      	beq.n	800fafa <USART_SetConfig+0x53e>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fae0:	2b0a      	cmp	r3, #10
 800fae2:	d008      	beq.n	800faf6 <USART_SetConfig+0x53a>
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fae8:	2b0b      	cmp	r3, #11
 800faea:	d102      	bne.n	800faf2 <USART_SetConfig+0x536>
 800faec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800faf0:	e016      	b.n	800fb20 <USART_SetConfig+0x564>
 800faf2:	2301      	movs	r3, #1
 800faf4:	e014      	b.n	800fb20 <USART_SetConfig+0x564>
 800faf6:	2380      	movs	r3, #128	; 0x80
 800faf8:	e012      	b.n	800fb20 <USART_SetConfig+0x564>
 800fafa:	2340      	movs	r3, #64	; 0x40
 800fafc:	e010      	b.n	800fb20 <USART_SetConfig+0x564>
 800fafe:	2320      	movs	r3, #32
 800fb00:	e00e      	b.n	800fb20 <USART_SetConfig+0x564>
 800fb02:	2310      	movs	r3, #16
 800fb04:	e00c      	b.n	800fb20 <USART_SetConfig+0x564>
 800fb06:	230c      	movs	r3, #12
 800fb08:	e00a      	b.n	800fb20 <USART_SetConfig+0x564>
 800fb0a:	230a      	movs	r3, #10
 800fb0c:	e008      	b.n	800fb20 <USART_SetConfig+0x564>
 800fb0e:	2308      	movs	r3, #8
 800fb10:	e006      	b.n	800fb20 <USART_SetConfig+0x564>
 800fb12:	2306      	movs	r3, #6
 800fb14:	e004      	b.n	800fb20 <USART_SetConfig+0x564>
 800fb16:	2304      	movs	r3, #4
 800fb18:	e002      	b.n	800fb20 <USART_SetConfig+0x564>
 800fb1a:	2302      	movs	r3, #2
 800fb1c:	e000      	b.n	800fb20 <USART_SetConfig+0x564>
 800fb1e:	2301      	movs	r3, #1
 800fb20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb22:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb26:	005a      	lsls	r2, r3, #1
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	685b      	ldr	r3, [r3, #4]
 800fb2c:	085b      	lsrs	r3, r3, #1
 800fb2e:	441a      	add	r2, r3
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	685b      	ldr	r3, [r3, #4]
 800fb34:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb38:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800fb3a:	e230      	b.n	800ff9e <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb3c:	f107 0318 	add.w	r3, r7, #24
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7fb ff3f 	bl	800b9c4 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800fb46:	69fa      	ldr	r2, [r7, #28]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d044      	beq.n	800fbda <USART_SetConfig+0x61e>
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	d03e      	beq.n	800fbd6 <USART_SetConfig+0x61a>
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb5c:	2b02      	cmp	r3, #2
 800fb5e:	d038      	beq.n	800fbd2 <USART_SetConfig+0x616>
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb64:	2b03      	cmp	r3, #3
 800fb66:	d032      	beq.n	800fbce <USART_SetConfig+0x612>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb6c:	2b04      	cmp	r3, #4
 800fb6e:	d02c      	beq.n	800fbca <USART_SetConfig+0x60e>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb74:	2b05      	cmp	r3, #5
 800fb76:	d026      	beq.n	800fbc6 <USART_SetConfig+0x60a>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb7c:	2b06      	cmp	r3, #6
 800fb7e:	d020      	beq.n	800fbc2 <USART_SetConfig+0x606>
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb84:	2b07      	cmp	r3, #7
 800fb86:	d01a      	beq.n	800fbbe <USART_SetConfig+0x602>
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb8c:	2b08      	cmp	r3, #8
 800fb8e:	d014      	beq.n	800fbba <USART_SetConfig+0x5fe>
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb94:	2b09      	cmp	r3, #9
 800fb96:	d00e      	beq.n	800fbb6 <USART_SetConfig+0x5fa>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb9c:	2b0a      	cmp	r3, #10
 800fb9e:	d008      	beq.n	800fbb2 <USART_SetConfig+0x5f6>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fba4:	2b0b      	cmp	r3, #11
 800fba6:	d102      	bne.n	800fbae <USART_SetConfig+0x5f2>
 800fba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fbac:	e016      	b.n	800fbdc <USART_SetConfig+0x620>
 800fbae:	2301      	movs	r3, #1
 800fbb0:	e014      	b.n	800fbdc <USART_SetConfig+0x620>
 800fbb2:	2380      	movs	r3, #128	; 0x80
 800fbb4:	e012      	b.n	800fbdc <USART_SetConfig+0x620>
 800fbb6:	2340      	movs	r3, #64	; 0x40
 800fbb8:	e010      	b.n	800fbdc <USART_SetConfig+0x620>
 800fbba:	2320      	movs	r3, #32
 800fbbc:	e00e      	b.n	800fbdc <USART_SetConfig+0x620>
 800fbbe:	2310      	movs	r3, #16
 800fbc0:	e00c      	b.n	800fbdc <USART_SetConfig+0x620>
 800fbc2:	230c      	movs	r3, #12
 800fbc4:	e00a      	b.n	800fbdc <USART_SetConfig+0x620>
 800fbc6:	230a      	movs	r3, #10
 800fbc8:	e008      	b.n	800fbdc <USART_SetConfig+0x620>
 800fbca:	2308      	movs	r3, #8
 800fbcc:	e006      	b.n	800fbdc <USART_SetConfig+0x620>
 800fbce:	2306      	movs	r3, #6
 800fbd0:	e004      	b.n	800fbdc <USART_SetConfig+0x620>
 800fbd2:	2304      	movs	r3, #4
 800fbd4:	e002      	b.n	800fbdc <USART_SetConfig+0x620>
 800fbd6:	2302      	movs	r3, #2
 800fbd8:	e000      	b.n	800fbdc <USART_SetConfig+0x620>
 800fbda:	2301      	movs	r3, #1
 800fbdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbe0:	005a      	lsls	r2, r3, #1
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	685b      	ldr	r3, [r3, #4]
 800fbe6:	085b      	lsrs	r3, r3, #1
 800fbe8:	441a      	add	r2, r3
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	685b      	ldr	r3, [r3, #4]
 800fbee:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbf2:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800fbf4:	e1d3      	b.n	800ff9e <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fbf6:	f107 030c 	add.w	r3, r7, #12
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7fc f836 	bl	800bc6c <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800fc00:	693a      	ldr	r2, [r7, #16]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d044      	beq.n	800fc94 <USART_SetConfig+0x6d8>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc0e:	2b01      	cmp	r3, #1
 800fc10:	d03e      	beq.n	800fc90 <USART_SetConfig+0x6d4>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc16:	2b02      	cmp	r3, #2
 800fc18:	d038      	beq.n	800fc8c <USART_SetConfig+0x6d0>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc1e:	2b03      	cmp	r3, #3
 800fc20:	d032      	beq.n	800fc88 <USART_SetConfig+0x6cc>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc26:	2b04      	cmp	r3, #4
 800fc28:	d02c      	beq.n	800fc84 <USART_SetConfig+0x6c8>
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc2e:	2b05      	cmp	r3, #5
 800fc30:	d026      	beq.n	800fc80 <USART_SetConfig+0x6c4>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc36:	2b06      	cmp	r3, #6
 800fc38:	d020      	beq.n	800fc7c <USART_SetConfig+0x6c0>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc3e:	2b07      	cmp	r3, #7
 800fc40:	d01a      	beq.n	800fc78 <USART_SetConfig+0x6bc>
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc46:	2b08      	cmp	r3, #8
 800fc48:	d014      	beq.n	800fc74 <USART_SetConfig+0x6b8>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc4e:	2b09      	cmp	r3, #9
 800fc50:	d00e      	beq.n	800fc70 <USART_SetConfig+0x6b4>
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc56:	2b0a      	cmp	r3, #10
 800fc58:	d008      	beq.n	800fc6c <USART_SetConfig+0x6b0>
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc5e:	2b0b      	cmp	r3, #11
 800fc60:	d102      	bne.n	800fc68 <USART_SetConfig+0x6ac>
 800fc62:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fc66:	e016      	b.n	800fc96 <USART_SetConfig+0x6da>
 800fc68:	2301      	movs	r3, #1
 800fc6a:	e014      	b.n	800fc96 <USART_SetConfig+0x6da>
 800fc6c:	2380      	movs	r3, #128	; 0x80
 800fc6e:	e012      	b.n	800fc96 <USART_SetConfig+0x6da>
 800fc70:	2340      	movs	r3, #64	; 0x40
 800fc72:	e010      	b.n	800fc96 <USART_SetConfig+0x6da>
 800fc74:	2320      	movs	r3, #32
 800fc76:	e00e      	b.n	800fc96 <USART_SetConfig+0x6da>
 800fc78:	2310      	movs	r3, #16
 800fc7a:	e00c      	b.n	800fc96 <USART_SetConfig+0x6da>
 800fc7c:	230c      	movs	r3, #12
 800fc7e:	e00a      	b.n	800fc96 <USART_SetConfig+0x6da>
 800fc80:	230a      	movs	r3, #10
 800fc82:	e008      	b.n	800fc96 <USART_SetConfig+0x6da>
 800fc84:	2308      	movs	r3, #8
 800fc86:	e006      	b.n	800fc96 <USART_SetConfig+0x6da>
 800fc88:	2306      	movs	r3, #6
 800fc8a:	e004      	b.n	800fc96 <USART_SetConfig+0x6da>
 800fc8c:	2304      	movs	r3, #4
 800fc8e:	e002      	b.n	800fc96 <USART_SetConfig+0x6da>
 800fc90:	2302      	movs	r3, #2
 800fc92:	e000      	b.n	800fc96 <USART_SetConfig+0x6da>
 800fc94:	2301      	movs	r3, #1
 800fc96:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc9a:	005a      	lsls	r2, r3, #1
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	685b      	ldr	r3, [r3, #4]
 800fca0:	085b      	lsrs	r3, r3, #1
 800fca2:	441a      	add	r2, r3
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcac:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800fcae:	e176      	b.n	800ff9e <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fcb0:	4b89      	ldr	r3, [pc, #548]	; (800fed8 <USART_SetConfig+0x91c>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f003 0320 	and.w	r3, r3, #32
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d05d      	beq.n	800fd78 <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 800fcbc:	4b86      	ldr	r3, [pc, #536]	; (800fed8 <USART_SetConfig+0x91c>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	08db      	lsrs	r3, r3, #3
 800fcc2:	f003 0303 	and.w	r3, r3, #3
 800fcc6:	4a85      	ldr	r2, [pc, #532]	; (800fedc <USART_SetConfig+0x920>)
 800fcc8:	40da      	lsrs	r2, r3
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d044      	beq.n	800fd5c <USART_SetConfig+0x7a0>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcd6:	2b01      	cmp	r3, #1
 800fcd8:	d03e      	beq.n	800fd58 <USART_SetConfig+0x79c>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcde:	2b02      	cmp	r3, #2
 800fce0:	d038      	beq.n	800fd54 <USART_SetConfig+0x798>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fce6:	2b03      	cmp	r3, #3
 800fce8:	d032      	beq.n	800fd50 <USART_SetConfig+0x794>
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcee:	2b04      	cmp	r3, #4
 800fcf0:	d02c      	beq.n	800fd4c <USART_SetConfig+0x790>
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcf6:	2b05      	cmp	r3, #5
 800fcf8:	d026      	beq.n	800fd48 <USART_SetConfig+0x78c>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcfe:	2b06      	cmp	r3, #6
 800fd00:	d020      	beq.n	800fd44 <USART_SetConfig+0x788>
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd06:	2b07      	cmp	r3, #7
 800fd08:	d01a      	beq.n	800fd40 <USART_SetConfig+0x784>
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd0e:	2b08      	cmp	r3, #8
 800fd10:	d014      	beq.n	800fd3c <USART_SetConfig+0x780>
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd16:	2b09      	cmp	r3, #9
 800fd18:	d00e      	beq.n	800fd38 <USART_SetConfig+0x77c>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd1e:	2b0a      	cmp	r3, #10
 800fd20:	d008      	beq.n	800fd34 <USART_SetConfig+0x778>
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd26:	2b0b      	cmp	r3, #11
 800fd28:	d102      	bne.n	800fd30 <USART_SetConfig+0x774>
 800fd2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fd2e:	e016      	b.n	800fd5e <USART_SetConfig+0x7a2>
 800fd30:	2301      	movs	r3, #1
 800fd32:	e014      	b.n	800fd5e <USART_SetConfig+0x7a2>
 800fd34:	2380      	movs	r3, #128	; 0x80
 800fd36:	e012      	b.n	800fd5e <USART_SetConfig+0x7a2>
 800fd38:	2340      	movs	r3, #64	; 0x40
 800fd3a:	e010      	b.n	800fd5e <USART_SetConfig+0x7a2>
 800fd3c:	2320      	movs	r3, #32
 800fd3e:	e00e      	b.n	800fd5e <USART_SetConfig+0x7a2>
 800fd40:	2310      	movs	r3, #16
 800fd42:	e00c      	b.n	800fd5e <USART_SetConfig+0x7a2>
 800fd44:	230c      	movs	r3, #12
 800fd46:	e00a      	b.n	800fd5e <USART_SetConfig+0x7a2>
 800fd48:	230a      	movs	r3, #10
 800fd4a:	e008      	b.n	800fd5e <USART_SetConfig+0x7a2>
 800fd4c:	2308      	movs	r3, #8
 800fd4e:	e006      	b.n	800fd5e <USART_SetConfig+0x7a2>
 800fd50:	2306      	movs	r3, #6
 800fd52:	e004      	b.n	800fd5e <USART_SetConfig+0x7a2>
 800fd54:	2304      	movs	r3, #4
 800fd56:	e002      	b.n	800fd5e <USART_SetConfig+0x7a2>
 800fd58:	2302      	movs	r3, #2
 800fd5a:	e000      	b.n	800fd5e <USART_SetConfig+0x7a2>
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd62:	005a      	lsls	r2, r3, #1
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	685b      	ldr	r3, [r3, #4]
 800fd68:	085b      	lsrs	r3, r3, #1
 800fd6a:	441a      	add	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd74:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 800fd76:	e112      	b.n	800ff9e <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d044      	beq.n	800fe0a <USART_SetConfig+0x84e>
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d03e      	beq.n	800fe06 <USART_SetConfig+0x84a>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd8c:	2b02      	cmp	r3, #2
 800fd8e:	d038      	beq.n	800fe02 <USART_SetConfig+0x846>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd94:	2b03      	cmp	r3, #3
 800fd96:	d032      	beq.n	800fdfe <USART_SetConfig+0x842>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd9c:	2b04      	cmp	r3, #4
 800fd9e:	d02c      	beq.n	800fdfa <USART_SetConfig+0x83e>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fda4:	2b05      	cmp	r3, #5
 800fda6:	d026      	beq.n	800fdf6 <USART_SetConfig+0x83a>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdac:	2b06      	cmp	r3, #6
 800fdae:	d020      	beq.n	800fdf2 <USART_SetConfig+0x836>
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdb4:	2b07      	cmp	r3, #7
 800fdb6:	d01a      	beq.n	800fdee <USART_SetConfig+0x832>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdbc:	2b08      	cmp	r3, #8
 800fdbe:	d014      	beq.n	800fdea <USART_SetConfig+0x82e>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdc4:	2b09      	cmp	r3, #9
 800fdc6:	d00e      	beq.n	800fde6 <USART_SetConfig+0x82a>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdcc:	2b0a      	cmp	r3, #10
 800fdce:	d008      	beq.n	800fde2 <USART_SetConfig+0x826>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdd4:	2b0b      	cmp	r3, #11
 800fdd6:	d102      	bne.n	800fdde <USART_SetConfig+0x822>
 800fdd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fddc:	e016      	b.n	800fe0c <USART_SetConfig+0x850>
 800fdde:	2301      	movs	r3, #1
 800fde0:	e014      	b.n	800fe0c <USART_SetConfig+0x850>
 800fde2:	2380      	movs	r3, #128	; 0x80
 800fde4:	e012      	b.n	800fe0c <USART_SetConfig+0x850>
 800fde6:	2340      	movs	r3, #64	; 0x40
 800fde8:	e010      	b.n	800fe0c <USART_SetConfig+0x850>
 800fdea:	2320      	movs	r3, #32
 800fdec:	e00e      	b.n	800fe0c <USART_SetConfig+0x850>
 800fdee:	2310      	movs	r3, #16
 800fdf0:	e00c      	b.n	800fe0c <USART_SetConfig+0x850>
 800fdf2:	230c      	movs	r3, #12
 800fdf4:	e00a      	b.n	800fe0c <USART_SetConfig+0x850>
 800fdf6:	230a      	movs	r3, #10
 800fdf8:	e008      	b.n	800fe0c <USART_SetConfig+0x850>
 800fdfa:	2308      	movs	r3, #8
 800fdfc:	e006      	b.n	800fe0c <USART_SetConfig+0x850>
 800fdfe:	2306      	movs	r3, #6
 800fe00:	e004      	b.n	800fe0c <USART_SetConfig+0x850>
 800fe02:	2304      	movs	r3, #4
 800fe04:	e002      	b.n	800fe0c <USART_SetConfig+0x850>
 800fe06:	2302      	movs	r3, #2
 800fe08:	e000      	b.n	800fe0c <USART_SetConfig+0x850>
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	4a33      	ldr	r2, [pc, #204]	; (800fedc <USART_SetConfig+0x920>)
 800fe0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe12:	005a      	lsls	r2, r3, #1
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	085b      	lsrs	r3, r3, #1
 800fe1a:	441a      	add	r2, r3
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe24:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800fe26:	e0ba      	b.n	800ff9e <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d044      	beq.n	800feba <USART_SetConfig+0x8fe>
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe34:	2b01      	cmp	r3, #1
 800fe36:	d03e      	beq.n	800feb6 <USART_SetConfig+0x8fa>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe3c:	2b02      	cmp	r3, #2
 800fe3e:	d038      	beq.n	800feb2 <USART_SetConfig+0x8f6>
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe44:	2b03      	cmp	r3, #3
 800fe46:	d032      	beq.n	800feae <USART_SetConfig+0x8f2>
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe4c:	2b04      	cmp	r3, #4
 800fe4e:	d02c      	beq.n	800feaa <USART_SetConfig+0x8ee>
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe54:	2b05      	cmp	r3, #5
 800fe56:	d026      	beq.n	800fea6 <USART_SetConfig+0x8ea>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe5c:	2b06      	cmp	r3, #6
 800fe5e:	d020      	beq.n	800fea2 <USART_SetConfig+0x8e6>
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe64:	2b07      	cmp	r3, #7
 800fe66:	d01a      	beq.n	800fe9e <USART_SetConfig+0x8e2>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe6c:	2b08      	cmp	r3, #8
 800fe6e:	d014      	beq.n	800fe9a <USART_SetConfig+0x8de>
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe74:	2b09      	cmp	r3, #9
 800fe76:	d00e      	beq.n	800fe96 <USART_SetConfig+0x8da>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe7c:	2b0a      	cmp	r3, #10
 800fe7e:	d008      	beq.n	800fe92 <USART_SetConfig+0x8d6>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe84:	2b0b      	cmp	r3, #11
 800fe86:	d102      	bne.n	800fe8e <USART_SetConfig+0x8d2>
 800fe88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fe8c:	e016      	b.n	800febc <USART_SetConfig+0x900>
 800fe8e:	2301      	movs	r3, #1
 800fe90:	e014      	b.n	800febc <USART_SetConfig+0x900>
 800fe92:	2380      	movs	r3, #128	; 0x80
 800fe94:	e012      	b.n	800febc <USART_SetConfig+0x900>
 800fe96:	2340      	movs	r3, #64	; 0x40
 800fe98:	e010      	b.n	800febc <USART_SetConfig+0x900>
 800fe9a:	2320      	movs	r3, #32
 800fe9c:	e00e      	b.n	800febc <USART_SetConfig+0x900>
 800fe9e:	2310      	movs	r3, #16
 800fea0:	e00c      	b.n	800febc <USART_SetConfig+0x900>
 800fea2:	230c      	movs	r3, #12
 800fea4:	e00a      	b.n	800febc <USART_SetConfig+0x900>
 800fea6:	230a      	movs	r3, #10
 800fea8:	e008      	b.n	800febc <USART_SetConfig+0x900>
 800feaa:	2308      	movs	r3, #8
 800feac:	e006      	b.n	800febc <USART_SetConfig+0x900>
 800feae:	2306      	movs	r3, #6
 800feb0:	e004      	b.n	800febc <USART_SetConfig+0x900>
 800feb2:	2304      	movs	r3, #4
 800feb4:	e002      	b.n	800febc <USART_SetConfig+0x900>
 800feb6:	2302      	movs	r3, #2
 800feb8:	e000      	b.n	800febc <USART_SetConfig+0x900>
 800feba:	2301      	movs	r3, #1
 800febc:	4a08      	ldr	r2, [pc, #32]	; (800fee0 <USART_SetConfig+0x924>)
 800febe:	fbb2 f3f3 	udiv	r3, r2, r3
 800fec2:	005a      	lsls	r2, r3, #1
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	685b      	ldr	r3, [r3, #4]
 800fec8:	085b      	lsrs	r3, r3, #1
 800feca:	441a      	add	r2, r3
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	fbb2 f3f3 	udiv	r3, r2, r3
 800fed4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800fed6:	e062      	b.n	800ff9e <USART_SetConfig+0x9e2>
 800fed8:	58024400 	.word	0x58024400
 800fedc:	03d09000 	.word	0x03d09000
 800fee0:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d044      	beq.n	800ff76 <USART_SetConfig+0x9ba>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef0:	2b01      	cmp	r3, #1
 800fef2:	d03e      	beq.n	800ff72 <USART_SetConfig+0x9b6>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef8:	2b02      	cmp	r3, #2
 800fefa:	d038      	beq.n	800ff6e <USART_SetConfig+0x9b2>
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff00:	2b03      	cmp	r3, #3
 800ff02:	d032      	beq.n	800ff6a <USART_SetConfig+0x9ae>
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff08:	2b04      	cmp	r3, #4
 800ff0a:	d02c      	beq.n	800ff66 <USART_SetConfig+0x9aa>
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff10:	2b05      	cmp	r3, #5
 800ff12:	d026      	beq.n	800ff62 <USART_SetConfig+0x9a6>
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff18:	2b06      	cmp	r3, #6
 800ff1a:	d020      	beq.n	800ff5e <USART_SetConfig+0x9a2>
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff20:	2b07      	cmp	r3, #7
 800ff22:	d01a      	beq.n	800ff5a <USART_SetConfig+0x99e>
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff28:	2b08      	cmp	r3, #8
 800ff2a:	d014      	beq.n	800ff56 <USART_SetConfig+0x99a>
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff30:	2b09      	cmp	r3, #9
 800ff32:	d00e      	beq.n	800ff52 <USART_SetConfig+0x996>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff38:	2b0a      	cmp	r3, #10
 800ff3a:	d008      	beq.n	800ff4e <USART_SetConfig+0x992>
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff40:	2b0b      	cmp	r3, #11
 800ff42:	d102      	bne.n	800ff4a <USART_SetConfig+0x98e>
 800ff44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ff48:	e016      	b.n	800ff78 <USART_SetConfig+0x9bc>
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	e014      	b.n	800ff78 <USART_SetConfig+0x9bc>
 800ff4e:	2380      	movs	r3, #128	; 0x80
 800ff50:	e012      	b.n	800ff78 <USART_SetConfig+0x9bc>
 800ff52:	2340      	movs	r3, #64	; 0x40
 800ff54:	e010      	b.n	800ff78 <USART_SetConfig+0x9bc>
 800ff56:	2320      	movs	r3, #32
 800ff58:	e00e      	b.n	800ff78 <USART_SetConfig+0x9bc>
 800ff5a:	2310      	movs	r3, #16
 800ff5c:	e00c      	b.n	800ff78 <USART_SetConfig+0x9bc>
 800ff5e:	230c      	movs	r3, #12
 800ff60:	e00a      	b.n	800ff78 <USART_SetConfig+0x9bc>
 800ff62:	230a      	movs	r3, #10
 800ff64:	e008      	b.n	800ff78 <USART_SetConfig+0x9bc>
 800ff66:	2308      	movs	r3, #8
 800ff68:	e006      	b.n	800ff78 <USART_SetConfig+0x9bc>
 800ff6a:	2306      	movs	r3, #6
 800ff6c:	e004      	b.n	800ff78 <USART_SetConfig+0x9bc>
 800ff6e:	2304      	movs	r3, #4
 800ff70:	e002      	b.n	800ff78 <USART_SetConfig+0x9bc>
 800ff72:	2302      	movs	r3, #2
 800ff74:	e000      	b.n	800ff78 <USART_SetConfig+0x9bc>
 800ff76:	2301      	movs	r3, #1
 800ff78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ff7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff80:	005a      	lsls	r2, r3, #1
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	085b      	lsrs	r3, r3, #1
 800ff88:	441a      	add	r2, r3
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800ff94:	e003      	b.n	800ff9e <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 800ff96:	2301      	movs	r3, #1
 800ff98:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      break;
 800ff9c:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800ff9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa0:	2b0f      	cmp	r3, #15
 800ffa2:	d916      	bls.n	800ffd2 <USART_SetConfig+0xa16>
 800ffa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffaa:	d212      	bcs.n	800ffd2 <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ffac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffae:	b29b      	uxth	r3, r3
 800ffb0:	f023 030f 	bic.w	r3, r3, #15
 800ffb4:	84fb      	strh	r3, [r7, #38]	; 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ffb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb8:	085b      	lsrs	r3, r3, #1
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	f003 0307 	and.w	r3, r3, #7
 800ffc0:	b29a      	uxth	r2, r3
 800ffc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ffc4:	4313      	orrs	r3, r2
 800ffc6:	84fb      	strh	r3, [r7, #38]	; 0x26
    husart->Instance->BRR = brrtemp;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ffce:	60da      	str	r2, [r3, #12]
 800ffd0:	e002      	b.n	800ffd8 <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2201      	movs	r2, #1
 800ffdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2200      	movs	r2, #0
 800ffee:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800fff0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3738      	adds	r7, #56	; 0x38
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}

0800fffc <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b086      	sub	sp, #24
 8010000:	af02      	add	r7, sp, #8
 8010002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2200      	movs	r2, #0
 8010008:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801000a:	f7f4 f86f 	bl	80040ec <HAL_GetTick>
 801000e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f003 0308 	and.w	r3, r3, #8
 801001a:	2b08      	cmp	r3, #8
 801001c:	d10e      	bne.n	801003c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801001e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010022:	9300      	str	r3, [sp, #0]
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	2200      	movs	r2, #0
 8010028:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f7ff fa8f 	bl	800f550 <USART_WaitOnFlagUntilTimeout>
 8010032:	4603      	mov	r3, r0
 8010034:	2b00      	cmp	r3, #0
 8010036:	d001      	beq.n	801003c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010038:	2303      	movs	r3, #3
 801003a:	e01e      	b.n	801007a <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	f003 0304 	and.w	r3, r3, #4
 8010046:	2b04      	cmp	r3, #4
 8010048:	d10e      	bne.n	8010068 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801004a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801004e:	9300      	str	r3, [sp, #0]
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	2200      	movs	r2, #0
 8010054:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f7ff fa79 	bl	800f550 <USART_WaitOnFlagUntilTimeout>
 801005e:	4603      	mov	r3, r0
 8010060:	2b00      	cmp	r3, #0
 8010062:	d001      	beq.n	8010068 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010064:	2303      	movs	r3, #3
 8010066:	e008      	b.n	801007a <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2201      	movs	r2, #1
 801006c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2200      	movs	r2, #0
 8010074:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8010078:	2300      	movs	r3, #0
}
 801007a:	4618      	mov	r0, r3
 801007c:	3710      	adds	r7, #16
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}

08010082 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 8010082:	b480      	push	{r7}
 8010084:	b085      	sub	sp, #20
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010090:	2b01      	cmp	r3, #1
 8010092:	d101      	bne.n	8010098 <HAL_USARTEx_DisableFifoMode+0x16>
 8010094:	2302      	movs	r3, #2
 8010096:	e027      	b.n	80100e8 <HAL_USARTEx_DisableFifoMode+0x66>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2201      	movs	r2, #1
 801009c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2202      	movs	r2, #2
 80100a4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	f022 0201 	bic.w	r2, r2, #1
 80100be:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80100c6:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2200      	movs	r2, #0
 80100cc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	68fa      	ldr	r2, [r7, #12]
 80100d4:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2201      	movs	r2, #1
 80100da:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2200      	movs	r2, #0
 80100e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80100e6:	2300      	movs	r3, #0
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3714      	adds	r7, #20
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b084      	sub	sp, #16
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010104:	2b01      	cmp	r3, #1
 8010106:	d101      	bne.n	801010c <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8010108:	2302      	movs	r3, #2
 801010a:	e02d      	b.n	8010168 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2201      	movs	r2, #1
 8010110:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2202      	movs	r2, #2
 8010118:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	681a      	ldr	r2, [r3, #0]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	f022 0201 	bic.w	r2, r2, #1
 8010132:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	689b      	ldr	r3, [r3, #8]
 801013a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	683a      	ldr	r2, [r7, #0]
 8010144:	430a      	orrs	r2, r1
 8010146:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f000 f84f 	bl	80101ec <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	68fa      	ldr	r2, [r7, #12]
 8010154:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	2201      	movs	r2, #1
 801015a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2200      	movs	r2, #0
 8010162:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8010166:	2300      	movs	r3, #0
}
 8010168:	4618      	mov	r0, r3
 801016a:	3710      	adds	r7, #16
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}

08010170 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b084      	sub	sp, #16
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
 8010178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8010180:	2b01      	cmp	r3, #1
 8010182:	d101      	bne.n	8010188 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8010184:	2302      	movs	r3, #2
 8010186:	e02d      	b.n	80101e4 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2201      	movs	r2, #1
 801018c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2202      	movs	r2, #2
 8010194:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	681a      	ldr	r2, [r3, #0]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	f022 0201 	bic.w	r2, r2, #1
 80101ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	689b      	ldr	r3, [r3, #8]
 80101b6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	683a      	ldr	r2, [r7, #0]
 80101c0:	430a      	orrs	r2, r1
 80101c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f000 f811 	bl	80101ec <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	68fa      	ldr	r2, [r7, #12]
 80101d0:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2201      	movs	r2, #1
 80101d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2200      	movs	r2, #0
 80101de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80101e2:	2300      	movs	r3, #0
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3710      	adds	r7, #16
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 80101ec:	b480      	push	{r7}
 80101ee:	b085      	sub	sp, #20
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d106      	bne.n	801020a <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2201      	movs	r2, #1
 8010200:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	2201      	movs	r2, #1
 8010206:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010208:	e02f      	b.n	801026a <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801020a:	2310      	movs	r3, #16
 801020c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801020e:	2310      	movs	r3, #16
 8010210:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8010218:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 801021a:	b2db      	uxtb	r3, r3
 801021c:	f003 0307 	and.w	r3, r3, #7
 8010220:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8010228:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 801022a:	b2db      	uxtb	r3, r3
 801022c:	f003 0307 	and.w	r3, r3, #7
 8010230:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010232:	7bbb      	ldrb	r3, [r7, #14]
 8010234:	7b3a      	ldrb	r2, [r7, #12]
 8010236:	4910      	ldr	r1, [pc, #64]	; (8010278 <USARTEx_SetNbDataToProcess+0x8c>)
 8010238:	5c8a      	ldrb	r2, [r1, r2]
 801023a:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 801023e:	7b3a      	ldrb	r2, [r7, #12]
 8010240:	490e      	ldr	r1, [pc, #56]	; (801027c <USARTEx_SetNbDataToProcess+0x90>)
 8010242:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010244:	fb93 f3f2 	sdiv	r3, r3, r2
 8010248:	b29a      	uxth	r2, r3
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801024e:	7bfb      	ldrb	r3, [r7, #15]
 8010250:	7b7a      	ldrb	r2, [r7, #13]
 8010252:	4909      	ldr	r1, [pc, #36]	; (8010278 <USARTEx_SetNbDataToProcess+0x8c>)
 8010254:	5c8a      	ldrb	r2, [r1, r2]
 8010256:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 801025a:	7b7a      	ldrb	r2, [r7, #13]
 801025c:	4907      	ldr	r1, [pc, #28]	; (801027c <USARTEx_SetNbDataToProcess+0x90>)
 801025e:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010260:	fb93 f3f2 	sdiv	r3, r3, r2
 8010264:	b29a      	uxth	r2, r3
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 801026a:	bf00      	nop
 801026c:	3714      	adds	r7, #20
 801026e:	46bd      	mov	sp, r7
 8010270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010274:	4770      	bx	lr
 8010276:	bf00      	nop
 8010278:	080104bc 	.word	0x080104bc
 801027c:	080104c4 	.word	0x080104c4

08010280 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8010280:	b480      	push	{r7}
 8010282:	b083      	sub	sp, #12
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d121      	bne.n	80102d6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	4b27      	ldr	r3, [pc, #156]	; (8010334 <FMC_SDRAM_Init+0xb4>)
 8010298:	4013      	ands	r3, r2
 801029a:	683a      	ldr	r2, [r7, #0]
 801029c:	6851      	ldr	r1, [r2, #4]
 801029e:	683a      	ldr	r2, [r7, #0]
 80102a0:	6892      	ldr	r2, [r2, #8]
 80102a2:	4311      	orrs	r1, r2
 80102a4:	683a      	ldr	r2, [r7, #0]
 80102a6:	68d2      	ldr	r2, [r2, #12]
 80102a8:	4311      	orrs	r1, r2
 80102aa:	683a      	ldr	r2, [r7, #0]
 80102ac:	6912      	ldr	r2, [r2, #16]
 80102ae:	4311      	orrs	r1, r2
 80102b0:	683a      	ldr	r2, [r7, #0]
 80102b2:	6952      	ldr	r2, [r2, #20]
 80102b4:	4311      	orrs	r1, r2
 80102b6:	683a      	ldr	r2, [r7, #0]
 80102b8:	6992      	ldr	r2, [r2, #24]
 80102ba:	4311      	orrs	r1, r2
 80102bc:	683a      	ldr	r2, [r7, #0]
 80102be:	69d2      	ldr	r2, [r2, #28]
 80102c0:	4311      	orrs	r1, r2
 80102c2:	683a      	ldr	r2, [r7, #0]
 80102c4:	6a12      	ldr	r2, [r2, #32]
 80102c6:	4311      	orrs	r1, r2
 80102c8:	683a      	ldr	r2, [r7, #0]
 80102ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80102cc:	430a      	orrs	r2, r1
 80102ce:	431a      	orrs	r2, r3
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	601a      	str	r2, [r3, #0]
 80102d4:	e026      	b.n	8010324 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	69d9      	ldr	r1, [r3, #28]
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	6a1b      	ldr	r3, [r3, #32]
 80102e6:	4319      	orrs	r1, r3
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ec:	430b      	orrs	r3, r1
 80102ee:	431a      	orrs	r2, r3
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	685a      	ldr	r2, [r3, #4]
 80102f8:	4b0e      	ldr	r3, [pc, #56]	; (8010334 <FMC_SDRAM_Init+0xb4>)
 80102fa:	4013      	ands	r3, r2
 80102fc:	683a      	ldr	r2, [r7, #0]
 80102fe:	6851      	ldr	r1, [r2, #4]
 8010300:	683a      	ldr	r2, [r7, #0]
 8010302:	6892      	ldr	r2, [r2, #8]
 8010304:	4311      	orrs	r1, r2
 8010306:	683a      	ldr	r2, [r7, #0]
 8010308:	68d2      	ldr	r2, [r2, #12]
 801030a:	4311      	orrs	r1, r2
 801030c:	683a      	ldr	r2, [r7, #0]
 801030e:	6912      	ldr	r2, [r2, #16]
 8010310:	4311      	orrs	r1, r2
 8010312:	683a      	ldr	r2, [r7, #0]
 8010314:	6952      	ldr	r2, [r2, #20]
 8010316:	4311      	orrs	r1, r2
 8010318:	683a      	ldr	r2, [r7, #0]
 801031a:	6992      	ldr	r2, [r2, #24]
 801031c:	430a      	orrs	r2, r1
 801031e:	431a      	orrs	r2, r3
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8010324:	2300      	movs	r3, #0
}
 8010326:	4618      	mov	r0, r3
 8010328:	370c      	adds	r7, #12
 801032a:	46bd      	mov	sp, r7
 801032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010330:	4770      	bx	lr
 8010332:	bf00      	nop
 8010334:	ffff8000 	.word	0xffff8000

08010338 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010338:	b480      	push	{r7}
 801033a:	b085      	sub	sp, #20
 801033c:	af00      	add	r7, sp, #0
 801033e:	60f8      	str	r0, [r7, #12]
 8010340:	60b9      	str	r1, [r7, #8]
 8010342:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d128      	bne.n	801039c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	689b      	ldr	r3, [r3, #8]
 801034e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	1e59      	subs	r1, r3, #1
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	685b      	ldr	r3, [r3, #4]
 801035c:	3b01      	subs	r3, #1
 801035e:	011b      	lsls	r3, r3, #4
 8010360:	4319      	orrs	r1, r3
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	689b      	ldr	r3, [r3, #8]
 8010366:	3b01      	subs	r3, #1
 8010368:	021b      	lsls	r3, r3, #8
 801036a:	4319      	orrs	r1, r3
 801036c:	68bb      	ldr	r3, [r7, #8]
 801036e:	68db      	ldr	r3, [r3, #12]
 8010370:	3b01      	subs	r3, #1
 8010372:	031b      	lsls	r3, r3, #12
 8010374:	4319      	orrs	r1, r3
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	691b      	ldr	r3, [r3, #16]
 801037a:	3b01      	subs	r3, #1
 801037c:	041b      	lsls	r3, r3, #16
 801037e:	4319      	orrs	r1, r3
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	695b      	ldr	r3, [r3, #20]
 8010384:	3b01      	subs	r3, #1
 8010386:	051b      	lsls	r3, r3, #20
 8010388:	4319      	orrs	r1, r3
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	699b      	ldr	r3, [r3, #24]
 801038e:	3b01      	subs	r3, #1
 8010390:	061b      	lsls	r3, r3, #24
 8010392:	430b      	orrs	r3, r1
 8010394:	431a      	orrs	r2, r3
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	609a      	str	r2, [r3, #8]
 801039a:	e02d      	b.n	80103f8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	689a      	ldr	r2, [r3, #8]
 80103a0:	4b19      	ldr	r3, [pc, #100]	; (8010408 <FMC_SDRAM_Timing_Init+0xd0>)
 80103a2:	4013      	ands	r3, r2
 80103a4:	68ba      	ldr	r2, [r7, #8]
 80103a6:	68d2      	ldr	r2, [r2, #12]
 80103a8:	3a01      	subs	r2, #1
 80103aa:	0311      	lsls	r1, r2, #12
 80103ac:	68ba      	ldr	r2, [r7, #8]
 80103ae:	6952      	ldr	r2, [r2, #20]
 80103b0:	3a01      	subs	r2, #1
 80103b2:	0512      	lsls	r2, r2, #20
 80103b4:	430a      	orrs	r2, r1
 80103b6:	431a      	orrs	r2, r3
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	68db      	ldr	r3, [r3, #12]
 80103c0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	1e59      	subs	r1, r3, #1
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	685b      	ldr	r3, [r3, #4]
 80103ce:	3b01      	subs	r3, #1
 80103d0:	011b      	lsls	r3, r3, #4
 80103d2:	4319      	orrs	r1, r3
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	689b      	ldr	r3, [r3, #8]
 80103d8:	3b01      	subs	r3, #1
 80103da:	021b      	lsls	r3, r3, #8
 80103dc:	4319      	orrs	r1, r3
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	691b      	ldr	r3, [r3, #16]
 80103e2:	3b01      	subs	r3, #1
 80103e4:	041b      	lsls	r3, r3, #16
 80103e6:	4319      	orrs	r1, r3
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	699b      	ldr	r3, [r3, #24]
 80103ec:	3b01      	subs	r3, #1
 80103ee:	061b      	lsls	r3, r3, #24
 80103f0:	430b      	orrs	r3, r1
 80103f2:	431a      	orrs	r2, r3
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80103f8:	2300      	movs	r3, #0
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	3714      	adds	r7, #20
 80103fe:	46bd      	mov	sp, r7
 8010400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010404:	4770      	bx	lr
 8010406:	bf00      	nop
 8010408:	ff0f0fff 	.word	0xff0f0fff

0801040c <memset>:
 801040c:	4402      	add	r2, r0
 801040e:	4603      	mov	r3, r0
 8010410:	4293      	cmp	r3, r2
 8010412:	d100      	bne.n	8010416 <memset+0xa>
 8010414:	4770      	bx	lr
 8010416:	f803 1b01 	strb.w	r1, [r3], #1
 801041a:	e7f9      	b.n	8010410 <memset+0x4>

0801041c <__libc_init_array>:
 801041c:	b570      	push	{r4, r5, r6, lr}
 801041e:	4d0d      	ldr	r5, [pc, #52]	; (8010454 <__libc_init_array+0x38>)
 8010420:	4c0d      	ldr	r4, [pc, #52]	; (8010458 <__libc_init_array+0x3c>)
 8010422:	1b64      	subs	r4, r4, r5
 8010424:	10a4      	asrs	r4, r4, #2
 8010426:	2600      	movs	r6, #0
 8010428:	42a6      	cmp	r6, r4
 801042a:	d109      	bne.n	8010440 <__libc_init_array+0x24>
 801042c:	4d0b      	ldr	r5, [pc, #44]	; (801045c <__libc_init_array+0x40>)
 801042e:	4c0c      	ldr	r4, [pc, #48]	; (8010460 <__libc_init_array+0x44>)
 8010430:	f000 f818 	bl	8010464 <_init>
 8010434:	1b64      	subs	r4, r4, r5
 8010436:	10a4      	asrs	r4, r4, #2
 8010438:	2600      	movs	r6, #0
 801043a:	42a6      	cmp	r6, r4
 801043c:	d105      	bne.n	801044a <__libc_init_array+0x2e>
 801043e:	bd70      	pop	{r4, r5, r6, pc}
 8010440:	f855 3b04 	ldr.w	r3, [r5], #4
 8010444:	4798      	blx	r3
 8010446:	3601      	adds	r6, #1
 8010448:	e7ee      	b.n	8010428 <__libc_init_array+0xc>
 801044a:	f855 3b04 	ldr.w	r3, [r5], #4
 801044e:	4798      	blx	r3
 8010450:	3601      	adds	r6, #1
 8010452:	e7f2      	b.n	801043a <__libc_init_array+0x1e>
 8010454:	080104d4 	.word	0x080104d4
 8010458:	080104d4 	.word	0x080104d4
 801045c:	080104d4 	.word	0x080104d4
 8010460:	080104d8 	.word	0x080104d8

08010464 <_init>:
 8010464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010466:	bf00      	nop
 8010468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801046a:	bc08      	pop	{r3}
 801046c:	469e      	mov	lr, r3
 801046e:	4770      	bx	lr

08010470 <_fini>:
 8010470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010472:	bf00      	nop
 8010474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010476:	bc08      	pop	{r3}
 8010478:	469e      	mov	lr, r3
 801047a:	4770      	bx	lr
